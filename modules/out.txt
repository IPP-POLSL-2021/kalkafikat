TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=3 (STRING), string='"""Tokenization for plagiarism checking.\n"""', start=(1, 0), end=(2, 3), line='"""Tokenization for plagiarism checking.\n"""\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(2, 3), end=(2, 4), line='"""\n')
TokenNode(type=54 (NL), string='\n', start=(3, 0), end=(3, 1), line='\n')
TokenNode(type=40 (FROM), string='from', start=(4, 0), end=(4, 4), line='from builtins import open as _open\n')
TokenNode(type=1 (NAME), string='builtins', start=(4, 5), end=(4, 13), line='from builtins import open as _open\n')
TokenNode(type=1 (NAME), string='import', start=(4, 14), end=(4, 20), line='from builtins import open as _open\n')
TokenNode(type=1 (NAME), string='open', start=(4, 21), end=(4, 25), line='from builtins import open as _open\n')
TokenNode(type=26 (AS), string='as', start=(4, 26), end=(4, 28), line='from builtins import open as _open\n')
TokenNode(type=1 (NAME), string='_open', start=(4, 29), end=(4, 34), line='from builtins import open as _open\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(4, 34), end=(4, 35), line='from builtins import open as _open\n')
TokenNode(type=40 (FROM), string='from', start=(5, 0), end=(5, 4), line='from codecs import BOM_UTF8\n')
TokenNode(type=1 (NAME), string='codecs', start=(5, 5), end=(5, 11), line='from codecs import BOM_UTF8\n')
TokenNode(type=1 (NAME), string='import', start=(5, 12), end=(5, 18), line='from codecs import BOM_UTF8\n')
TokenNode(type=1 (NAME), string='BOM_UTF8', start=(5, 19), end=(5, 27), line='from codecs import BOM_UTF8\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(5, 27), end=(5, 28), line='from codecs import BOM_UTF8\n')
TokenNode(type=1 (NAME), string='import', start=(6, 0), end=(6, 6), line='import collections\n')
TokenNode(type=1 (NAME), string='collections', start=(6, 7), end=(6, 18), line='import collections\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(6, 18), end=(6, 19), line='import collections\n')
TokenNode(type=1 (NAME), string='import', start=(7, 0), end=(7, 6), line='import functools\n')
TokenNode(type=1 (NAME), string='functools', start=(7, 7), end=(7, 16), line='import functools\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(7, 16), end=(7, 17), line='import functools\n')
TokenNode(type=40 (FROM), string='from', start=(8, 0), end=(8, 4), line='from io import TextIOWrapper\n')
TokenNode(type=1 (NAME), string='io', start=(8, 5), end=(8, 7), line='from io import TextIOWrapper\n')
TokenNode(type=1 (NAME), string='import', start=(8, 8), end=(8, 14), line='from io import TextIOWrapper\n')
TokenNode(type=1 (NAME), string='TextIOWrapper', start=(8, 15), end=(8, 28), line='from io import TextIOWrapper\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(8, 28), end=(8, 29), line='from io import TextIOWrapper\n')
TokenNode(type=1 (NAME), string='import', start=(9, 0), end=(9, 6), line='import itertools\n')
TokenNode(type=1 (NAME), string='itertools', start=(9, 7), end=(9, 16), line='import itertools\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(9, 16), end=(9, 17), line='import itertools\n')
TokenNode(type=1 (NAME), string='import', start=(10, 0), end=(10, 6), line='import re\n')
TokenNode(type=1 (NAME), string='re', start=(10, 7), end=(10, 9), line='import re\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(10, 9), end=(10, 10), line='import re\n')
TokenNode(type=54 (NL), string='\n', start=(11, 0), end=(11, 1), line='\n')
TokenNode(type=40 (FROM), string='from', start=(12, 0), end=(12, 4), line='from kftoken import *\n')
TokenNode(type=1 (NAME), string='kftoken', start=(12, 5), end=(12, 12), line='from kftoken import *\n')
TokenNode(type=1 (NAME), string='import', start=(12, 13), end=(12, 19), line='from kftoken import *\n')
TokenNode(type=18 (OP), string='*', start=(12, 20), end=(12, 21), line='from kftoken import *\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(12, 21), end=(12, 22), line='from kftoken import *\n')
TokenNode(type=54 (NL), string='\n', start=(13, 0), end=(13, 1), line='\n')
TokenNode(type=1 (NAME), string='import', start=(14, 0), end=(14, 6), line='import kftoken\n')
TokenNode(type=1 (NAME), string='kftoken', start=(14, 7), end=(14, 14), line='import kftoken\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(14, 14), end=(14, 15), line='import kftoken\n')
TokenNode(type=1 (NAME), string='__all__', start=(15, 0), end=(15, 7), line="__all__ = kftoken.__all__ + ['tokenize', 'TokenNode', 'detect_encoding']\n")
TokenNode(type=17 (ASSIGN), string='=', start=(15, 8), end=(15, 9), line="__all__ = kftoken.__all__ + ['tokenize', 'TokenNode', 'detect_encoding']\n")
TokenNode(type=1 (NAME), string='kftoken', start=(15, 10), end=(15, 17), line="__all__ = kftoken.__all__ + ['tokenize', 'TokenNode', 'detect_encoding']\n")
TokenNode(type=15 (DOT), string='.', start=(15, 17), end=(15, 18), line="__all__ = kftoken.__all__ + ['tokenize', 'TokenNode', 'detect_encoding']\n")
TokenNode(type=1 (NAME), string='__all__', start=(15, 18), end=(15, 25), line="__all__ = kftoken.__all__ + ['tokenize', 'TokenNode', 'detect_encoding']\n")
TokenNode(type=18 (OP), string='+', start=(15, 26), end=(15, 27), line="__all__ = kftoken.__all__ + ['tokenize', 'TokenNode', 'detect_encoding']\n")
TokenNode(type=9 (LSQB), string='[', start=(15, 28), end=(15, 29), line="__all__ = kftoken.__all__ + ['tokenize', 'TokenNode', 'detect_encoding']\n")
TokenNode(type=3 (STRING), string="'tokenize'", start=(15, 29), end=(15, 39), line="__all__ = kftoken.__all__ + ['tokenize', 'TokenNode', 'detect_encoding']\n")
TokenNode(type=16 (COMMA), string=',', start=(15, 39), end=(15, 40), line="__all__ = kftoken.__all__ + ['tokenize', 'TokenNode', 'detect_encoding']\n")
TokenNode(type=3 (STRING), string="'TokenNode'", start=(15, 41), end=(15, 52), line="__all__ = kftoken.__all__ + ['tokenize', 'TokenNode', 'detect_encoding']\n")
TokenNode(type=16 (COMMA), string=',', start=(15, 52), end=(15, 53), line="__all__ = kftoken.__all__ + ['tokenize', 'TokenNode', 'detect_encoding']\n")
TokenNode(type=3 (STRING), string="'detect_encoding'", start=(15, 54), end=(15, 71), line="__all__ = kftoken.__all__ + ['tokenize', 'TokenNode', 'detect_encoding']\n")
TokenNode(type=10 (RSQB), string=']', start=(15, 71), end=(15, 72), line="__all__ = kftoken.__all__ + ['tokenize', 'TokenNode', 'detect_encoding']\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(15, 72), end=(15, 73), line="__all__ = kftoken.__all__ + ['tokenize', 'TokenNode', 'detect_encoding']\n")
TokenNode(type=34 (DEL), string='del', start=(16, 0), end=(16, 3), line='del kftoken\n')
TokenNode(type=1 (NAME), string='kftoken', start=(16, 4), end=(16, 11), line='del kftoken\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(16, 11), end=(16, 12), line='del kftoken\n')
TokenNode(type=54 (NL), string='\n', start=(17, 0), end=(17, 1), line='\n')
TokenNode(type=53 (COMMENT), string='# memorize function into cache (expression is compiled as unicode)', start=(18, 0), end=(18, 66), line='# memorize function into cache (expression is compiled as unicode)\n')
TokenNode(type=54 (NL), string='\n', start=(18, 66), end=(18, 67), line='# memorize function into cache (expression is compiled as unicode)\n')
TokenNode(type=18 (OP), string='@', start=(19, 0), end=(19, 1), line='@functools.lru_cache\n')
TokenNode(type=1 (NAME), string='functools', start=(19, 1), end=(19, 10), line='@functools.lru_cache\n')
TokenNode(type=15 (DOT), string='.', start=(19, 10), end=(19, 11), line='@functools.lru_cache\n')
TokenNode(type=1 (NAME), string='lru_cache', start=(19, 11), end=(19, 20), line='@functools.lru_cache\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(19, 20), end=(19, 21), line='@functools.lru_cache\n')
TokenNode(type=33 (DEF), string='def', start=(20, 0), end=(20, 3), line='def _compile(expr):\n')
TokenNode(type=1 (NAME), string='_compile', start=(20, 4), end=(20, 12), line='def _compile(expr):\n')
TokenNode(type=7 (LPAR), string='(', start=(20, 12), end=(20, 13), line='def _compile(expr):\n')
TokenNode(type=1 (NAME), string='expr', start=(20, 13), end=(20, 17), line='def _compile(expr):\n')
TokenNode(type=8 (RPAR), string=')', start=(20, 17), end=(20, 18), line='def _compile(expr):\n')
TokenNode(type=13 (COLON), string=':', start=(20, 18), end=(20, 19), line='def _compile(expr):\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(20, 19), end=(20, 20), line='def _compile(expr):\n')
TokenNode(type=5 (INDENT), string='    ', start=(21, 0), end=(21, 4), line='    return re.compile(expr, re.UNICODE)\n')
TokenNode(type=24 (RETURN), string='return', start=(21, 4), end=(21, 10), line='    return re.compile(expr, re.UNICODE)\n')
TokenNode(type=1 (NAME), string='re', start=(21, 11), end=(21, 13), line='    return re.compile(expr, re.UNICODE)\n')
TokenNode(type=15 (DOT), string='.', start=(21, 13), end=(21, 14), line='    return re.compile(expr, re.UNICODE)\n')
TokenNode(type=1 (NAME), string='compile', start=(21, 14), end=(21, 21), line='    return re.compile(expr, re.UNICODE)\n')
TokenNode(type=7 (LPAR), string='(', start=(21, 21), end=(21, 22), line='    return re.compile(expr, re.UNICODE)\n')
TokenNode(type=1 (NAME), string='expr', start=(21, 22), end=(21, 26), line='    return re.compile(expr, re.UNICODE)\n')
TokenNode(type=16 (COMMA), string=',', start=(21, 26), end=(21, 27), line='    return re.compile(expr, re.UNICODE)\n')
TokenNode(type=1 (NAME), string='re', start=(21, 28), end=(21, 30), line='    return re.compile(expr, re.UNICODE)\n')
TokenNode(type=15 (DOT), string='.', start=(21, 30), end=(21, 31), line='    return re.compile(expr, re.UNICODE)\n')
TokenNode(type=1 (NAME), string='UNICODE', start=(21, 31), end=(21, 38), line='    return re.compile(expr, re.UNICODE)\n')
TokenNode(type=8 (RPAR), string=')', start=(21, 38), end=(21, 39), line='    return re.compile(expr, re.UNICODE)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(21, 39), end=(21, 40), line='    return re.compile(expr, re.UNICODE)\n')
TokenNode(type=54 (NL), string='\n', start=(22, 0), end=(22, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(23, 0), end=(23, 0), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=31 (CLASS), string='class', start=(23, 0), end=(23, 5), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=1 (NAME), string='TokenNode', start=(23, 6), end=(23, 15), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=7 (LPAR), string='(', start=(23, 15), end=(23, 16), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=1 (NAME), string='collections', start=(23, 16), end=(23, 27), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=15 (DOT), string='.', start=(23, 27), end=(23, 28), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=1 (NAME), string='namedtuple', start=(23, 28), end=(23, 38), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=7 (LPAR), string='(', start=(23, 38), end=(23, 39), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=3 (STRING), string="'TokenNode'", start=(23, 39), end=(23, 50), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=16 (COMMA), string=',', start=(23, 50), end=(23, 51), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=3 (STRING), string="'type string start end line'", start=(23, 52), end=(23, 80), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=8 (RPAR), string=')', start=(23, 80), end=(23, 81), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=8 (RPAR), string=')', start=(23, 81), end=(23, 82), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=13 (COLON), string=':', start=(23, 82), end=(23, 83), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(23, 83), end=(23, 84), line="class TokenNode(collections.namedtuple('TokenNode', 'type string start end line')):\n")
TokenNode(type=5 (INDENT), string='    ', start=(24, 0), end=(24, 4), line='    def __repr__(self):\n')
TokenNode(type=33 (DEF), string='def', start=(24, 4), end=(24, 7), line='    def __repr__(self):\n')
TokenNode(type=1 (NAME), string='__repr__', start=(24, 8), end=(24, 16), line='    def __repr__(self):\n')
TokenNode(type=7 (LPAR), string='(', start=(24, 16), end=(24, 17), line='    def __repr__(self):\n')
TokenNode(type=1 (NAME), string='self', start=(24, 17), end=(24, 21), line='    def __repr__(self):\n')
TokenNode(type=8 (RPAR), string=')', start=(24, 21), end=(24, 22), line='    def __repr__(self):\n')
TokenNode(type=13 (COLON), string=':', start=(24, 22), end=(24, 23), line='    def __repr__(self):\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(24, 23), end=(24, 24), line='    def __repr__(self):\n')
TokenNode(type=5 (INDENT), string='        ', start=(25, 0), end=(25, 8), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=1 (NAME), string='annotated_type', start=(25, 8), end=(25, 22), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=17 (ASSIGN), string='=', start=(25, 23), end=(25, 24), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=3 (STRING), string="'%d (%s)'", start=(25, 25), end=(25, 34), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=18 (OP), string='%', start=(25, 35), end=(25, 36), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=7 (LPAR), string='(', start=(25, 37), end=(25, 38), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=1 (NAME), string='self', start=(25, 38), end=(25, 42), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=15 (DOT), string='.', start=(25, 42), end=(25, 43), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=1 (NAME), string='type', start=(25, 43), end=(25, 47), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=16 (COMMA), string=',', start=(25, 47), end=(25, 48), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=1 (NAME), string='names', start=(25, 49), end=(25, 54), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=9 (LSQB), string='[', start=(25, 54), end=(25, 55), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=1 (NAME), string='self', start=(25, 55), end=(25, 59), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=15 (DOT), string='.', start=(25, 59), end=(25, 60), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=1 (NAME), string='type', start=(25, 60), end=(25, 64), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=10 (RSQB), string=']', start=(25, 64), end=(25, 65), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=8 (RPAR), string=')', start=(25, 65), end=(25, 66), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(25, 66), end=(25, 67), line="        annotated_type = '%d (%s)' % (self.type, names[self.type])\n")
TokenNode(type=24 (RETURN), string='return', start=(26, 8), end=(26, 14), line="        return ('TokenNode(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n")
TokenNode(type=7 (LPAR), string='(', start=(26, 15), end=(26, 16), line="        return ('TokenNode(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n")
TokenNode(type=3 (STRING), string="'TokenNode(type=%s, string=%r, start=%r, end=%r, line=%r)'", start=(26, 16), end=(26, 74), line="        return ('TokenNode(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n")
TokenNode(type=18 (OP), string='%', start=(26, 75), end=(26, 76), line="        return ('TokenNode(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n")
TokenNode(type=54 (NL), string='\n', start=(26, 76), end=(26, 77), line="        return ('TokenNode(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n")
TokenNode(type=1 (NAME), string='self', start=(27, 16), end=(27, 20), line='                self._replace(type=annotated_type))\n')
TokenNode(type=15 (DOT), string='.', start=(27, 20), end=(27, 21), line='                self._replace(type=annotated_type))\n')
TokenNode(type=1 (NAME), string='_replace', start=(27, 21), end=(27, 29), line='                self._replace(type=annotated_type))\n')
TokenNode(type=7 (LPAR), string='(', start=(27, 29), end=(27, 30), line='                self._replace(type=annotated_type))\n')
TokenNode(type=1 (NAME), string='type', start=(27, 30), end=(27, 34), line='                self._replace(type=annotated_type))\n')
TokenNode(type=17 (ASSIGN), string='=', start=(27, 34), end=(27, 35), line='                self._replace(type=annotated_type))\n')
TokenNode(type=1 (NAME), string='annotated_type', start=(27, 35), end=(27, 49), line='                self._replace(type=annotated_type))\n')
TokenNode(type=8 (RPAR), string=')', start=(27, 49), end=(27, 50), line='                self._replace(type=annotated_type))\n')
TokenNode(type=8 (RPAR), string=')', start=(27, 50), end=(27, 51), line='                self._replace(type=annotated_type))\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(27, 51), end=(27, 52), line='                self._replace(type=annotated_type))\n')
TokenNode(type=54 (NL), string='\n', start=(28, 0), end=(28, 1), line='\n')
TokenNode(type=53 (COMMENT), string='# regex group functions (grouping with or)', start=(29, 0), end=(29, 42), line='# regex group functions (grouping with or)\n')
TokenNode(type=54 (NL), string='\n', start=(29, 42), end=(29, 43), line='# regex group functions (grouping with or)\n')
TokenNode(type=6 (DEDENT), string='', start=(30, 0), end=(30, 0), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=6 (DEDENT), string='', start=(30, 0), end=(30, 0), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=33 (DEF), string='def', start=(30, 0), end=(30, 3), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=1 (NAME), string='group', start=(30, 4), end=(30, 9), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=7 (LPAR), string='(', start=(30, 9), end=(30, 10), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=18 (OP), string='*', start=(30, 10), end=(30, 11), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=1 (NAME), string='choices', start=(30, 11), end=(30, 18), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=8 (RPAR), string=')', start=(30, 18), end=(30, 19), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=13 (COLON), string=':', start=(30, 19), end=(30, 20), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=24 (RETURN), string='return', start=(30, 21), end=(30, 27), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=3 (STRING), string="'('", start=(30, 28), end=(30, 31), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=18 (OP), string='+', start=(30, 32), end=(30, 33), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=3 (STRING), string="'|'", start=(30, 34), end=(30, 37), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=15 (DOT), string='.', start=(30, 37), end=(30, 38), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=1 (NAME), string='join', start=(30, 38), end=(30, 42), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=7 (LPAR), string='(', start=(30, 42), end=(30, 43), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=1 (NAME), string='choices', start=(30, 43), end=(30, 50), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=8 (RPAR), string=')', start=(30, 50), end=(30, 51), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=18 (OP), string='+', start=(30, 52), end=(30, 53), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=3 (STRING), string="')'", start=(30, 54), end=(30, 57), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(30, 57), end=(30, 58), line="def group(*choices): return '(' + '|'.join(choices) + ')'\n")
TokenNode(type=33 (DEF), string='def', start=(31, 0), end=(31, 3), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=1 (NAME), string='any', start=(31, 4), end=(31, 7), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=7 (LPAR), string='(', start=(31, 7), end=(31, 8), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=18 (OP), string='*', start=(31, 8), end=(31, 9), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=1 (NAME), string='choices', start=(31, 9), end=(31, 16), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=8 (RPAR), string=')', start=(31, 16), end=(31, 17), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=13 (COLON), string=':', start=(31, 17), end=(31, 18), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=24 (RETURN), string='return', start=(31, 19), end=(31, 25), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=1 (NAME), string='group', start=(31, 26), end=(31, 31), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=7 (LPAR), string='(', start=(31, 31), end=(31, 32), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=18 (OP), string='*', start=(31, 32), end=(31, 33), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=1 (NAME), string='choices', start=(31, 33), end=(31, 40), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=8 (RPAR), string=')', start=(31, 40), end=(31, 41), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=18 (OP), string='+', start=(31, 42), end=(31, 43), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=3 (STRING), string="'*'", start=(31, 44), end=(31, 47), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(31, 47), end=(31, 48), line="def any(*choices): return group(*choices) + '*'\n")
TokenNode(type=33 (DEF), string='def', start=(32, 0), end=(32, 3), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=1 (NAME), string='maybe', start=(32, 4), end=(32, 9), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=7 (LPAR), string='(', start=(32, 9), end=(32, 10), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=18 (OP), string='*', start=(32, 10), end=(32, 11), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=1 (NAME), string='choices', start=(32, 11), end=(32, 18), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=8 (RPAR), string=')', start=(32, 18), end=(32, 19), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=13 (COLON), string=':', start=(32, 19), end=(32, 20), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=24 (RETURN), string='return', start=(32, 21), end=(32, 27), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=1 (NAME), string='group', start=(32, 28), end=(32, 33), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=7 (LPAR), string='(', start=(32, 33), end=(32, 34), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=18 (OP), string='*', start=(32, 34), end=(32, 35), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=1 (NAME), string='choices', start=(32, 35), end=(32, 42), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=8 (RPAR), string=')', start=(32, 42), end=(32, 43), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=18 (OP), string='+', start=(32, 44), end=(32, 45), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=3 (STRING), string="'?'", start=(32, 46), end=(32, 49), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(32, 49), end=(32, 50), line="def maybe(*choices): return group(*choices) + '?'\n")
TokenNode(type=54 (NL), string='\n', start=(33, 0), end=(33, 1), line='\n')
TokenNode(type=53 (COMMENT), string='# basic regexes', start=(34, 0), end=(34, 15), line='# basic regexes\n')
TokenNode(type=54 (NL), string='\n', start=(34, 15), end=(34, 16), line='# basic regexes\n')
TokenNode(type=1 (NAME), string='Whitespace', start=(35, 0), end=(35, 10), line="Whitespace = r'[ \\f\\t]*'\n")
TokenNode(type=17 (ASSIGN), string='=', start=(35, 11), end=(35, 12), line="Whitespace = r'[ \\f\\t]*'\n")
TokenNode(type=3 (STRING), string="r'[ \\f\\t]*'", start=(35, 13), end=(35, 24), line="Whitespace = r'[ \\f\\t]*'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(35, 24), end=(35, 25), line="Whitespace = r'[ \\f\\t]*'\n")
TokenNode(type=1 (NAME), string='Comment', start=(36, 0), end=(36, 7), line="Comment = r'#[^\\r\\n]*'\n")
TokenNode(type=17 (ASSIGN), string='=', start=(36, 8), end=(36, 9), line="Comment = r'#[^\\r\\n]*'\n")
TokenNode(type=3 (STRING), string="r'#[^\\r\\n]*'", start=(36, 10), end=(36, 22), line="Comment = r'#[^\\r\\n]*'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(36, 22), end=(36, 23), line="Comment = r'#[^\\r\\n]*'\n")
TokenNode(type=1 (NAME), string='Name', start=(37, 0), end=(37, 4), line="Name = r'\\w+'\n")
TokenNode(type=17 (ASSIGN), string='=', start=(37, 5), end=(37, 6), line="Name = r'\\w+'\n")
TokenNode(type=3 (STRING), string="r'\\w+'", start=(37, 7), end=(37, 13), line="Name = r'\\w+'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(37, 13), end=(37, 14), line="Name = r'\\w+'\n")
TokenNode(type=54 (NL), string='\n', start=(38, 0), end=(38, 1), line='\n')
TokenNode(type=53 (COMMENT), string='# making regex for every number literal', start=(39, 0), end=(39, 39), line='# making regex for every number literal\n')
TokenNode(type=54 (NL), string='\n', start=(39, 39), end=(39, 40), line='# making regex for every number literal\n')
TokenNode(type=1 (NAME), string='Hexnumber', start=(40, 0), end=(40, 9), line="Hexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\n")
TokenNode(type=17 (ASSIGN), string='=', start=(40, 10), end=(40, 11), line="Hexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\n")
TokenNode(type=3 (STRING), string="r'0[xX](?:_?[0-9a-fA-F])+'", start=(40, 12), end=(40, 38), line="Hexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(40, 38), end=(40, 39), line="Hexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\n")
TokenNode(type=1 (NAME), string='Binnumber', start=(41, 0), end=(41, 9), line="Binnumber = r'0[bB](?:_?[01])+'\n")
TokenNode(type=17 (ASSIGN), string='=', start=(41, 10), end=(41, 11), line="Binnumber = r'0[bB](?:_?[01])+'\n")
TokenNode(type=3 (STRING), string="r'0[bB](?:_?[01])+'", start=(41, 12), end=(41, 31), line="Binnumber = r'0[bB](?:_?[01])+'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(41, 31), end=(41, 32), line="Binnumber = r'0[bB](?:_?[01])+'\n")
TokenNode(type=1 (NAME), string='Octnumber', start=(42, 0), end=(42, 9), line="Octnumber = r'0[oO](?:_?[0-7])+'\n")
TokenNode(type=17 (ASSIGN), string='=', start=(42, 10), end=(42, 11), line="Octnumber = r'0[oO](?:_?[0-7])+'\n")
TokenNode(type=3 (STRING), string="r'0[oO](?:_?[0-7])+'", start=(42, 12), end=(42, 32), line="Octnumber = r'0[oO](?:_?[0-7])+'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(42, 32), end=(42, 33), line="Octnumber = r'0[oO](?:_?[0-7])+'\n")
TokenNode(type=1 (NAME), string='Decnumber', start=(43, 0), end=(43, 9), line="Decnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\n")
TokenNode(type=17 (ASSIGN), string='=', start=(43, 10), end=(43, 11), line="Decnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\n")
TokenNode(type=3 (STRING), string="r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'", start=(43, 12), end=(43, 46), line="Decnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(43, 46), end=(43, 47), line="Decnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\n")
TokenNode(type=1 (NAME), string='Intnumber', start=(44, 0), end=(44, 9), line='Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(44, 10), end=(44, 11), line='Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n')
TokenNode(type=1 (NAME), string='group', start=(44, 12), end=(44, 17), line='Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n')
TokenNode(type=7 (LPAR), string='(', start=(44, 17), end=(44, 18), line='Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n')
TokenNode(type=1 (NAME), string='Hexnumber', start=(44, 18), end=(44, 27), line='Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n')
TokenNode(type=16 (COMMA), string=',', start=(44, 27), end=(44, 28), line='Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n')
TokenNode(type=1 (NAME), string='Binnumber', start=(44, 29), end=(44, 38), line='Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n')
TokenNode(type=16 (COMMA), string=',', start=(44, 38), end=(44, 39), line='Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n')
TokenNode(type=1 (NAME), string='Octnumber', start=(44, 40), end=(44, 49), line='Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n')
TokenNode(type=16 (COMMA), string=',', start=(44, 49), end=(44, 50), line='Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n')
TokenNode(type=1 (NAME), string='Decnumber', start=(44, 51), end=(44, 60), line='Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n')
TokenNode(type=8 (RPAR), string=')', start=(44, 60), end=(44, 61), line='Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(44, 61), end=(44, 62), line='Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n')
TokenNode(type=1 (NAME), string='Exponent', start=(45, 0), end=(45, 8), line="Exponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\n")
TokenNode(type=17 (ASSIGN), string='=', start=(45, 9), end=(45, 10), line="Exponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\n")
TokenNode(type=3 (STRING), string="r'[eE][-+]?[0-9](?:_?[0-9])*'", start=(45, 11), end=(45, 40), line="Exponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(45, 40), end=(45, 41), line="Exponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\n")
TokenNode(type=1 (NAME), string='Pointfloat', start=(46, 0), end=(46, 10), line="Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?', r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n")
TokenNode(type=17 (ASSIGN), string='=', start=(46, 11), end=(46, 12), line="Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?', r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n")
TokenNode(type=1 (NAME), string='group', start=(46, 13), end=(46, 18), line="Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?', r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n")
TokenNode(type=7 (LPAR), string='(', start=(46, 18), end=(46, 19), line="Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?', r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n")
TokenNode(type=3 (STRING), string="r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?'", start=(46, 19), end=(46, 63), line="Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?', r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n")
TokenNode(type=16 (COMMA), string=',', start=(46, 63), end=(46, 64), line="Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?', r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n")
TokenNode(type=3 (STRING), string="r'\\.[0-9](?:_?[0-9])*'", start=(46, 65), end=(46, 87), line="Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?', r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n")
TokenNode(type=8 (RPAR), string=')', start=(46, 87), end=(46, 88), line="Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?', r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n")
TokenNode(type=18 (OP), string='+', start=(46, 89), end=(46, 90), line="Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?', r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n")
TokenNode(type=1 (NAME), string='maybe', start=(46, 91), end=(46, 96), line="Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?', r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n")
TokenNode(type=7 (LPAR), string='(', start=(46, 96), end=(46, 97), line="Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?', r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n")
TokenNode(type=1 (NAME), string='Exponent', start=(46, 97), end=(46, 105), line="Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?', r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n")
TokenNode(type=8 (RPAR), string=')', start=(46, 105), end=(46, 106), line="Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?', r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(46, 106), end=(46, 107), line="Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?', r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n")
TokenNode(type=1 (NAME), string='Expfloat', start=(47, 0), end=(47, 8), line="Expfloat = r'[0-9](?:_?[0-9])*' + Exponent\n")
TokenNode(type=17 (ASSIGN), string='=', start=(47, 9), end=(47, 10), line="Expfloat = r'[0-9](?:_?[0-9])*' + Exponent\n")
TokenNode(type=3 (STRING), string="r'[0-9](?:_?[0-9])*'", start=(47, 11), end=(47, 31), line="Expfloat = r'[0-9](?:_?[0-9])*' + Exponent\n")
TokenNode(type=18 (OP), string='+', start=(47, 32), end=(47, 33), line="Expfloat = r'[0-9](?:_?[0-9])*' + Exponent\n")
TokenNode(type=1 (NAME), string='Exponent', start=(47, 34), end=(47, 42), line="Expfloat = r'[0-9](?:_?[0-9])*' + Exponent\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(47, 42), end=(47, 43), line="Expfloat = r'[0-9](?:_?[0-9])*' + Exponent\n")
TokenNode(type=1 (NAME), string='Floatnumber', start=(48, 0), end=(48, 11), line='Floatnumber = group(Pointfloat, Expfloat)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(48, 12), end=(48, 13), line='Floatnumber = group(Pointfloat, Expfloat)\n')
TokenNode(type=1 (NAME), string='group', start=(48, 14), end=(48, 19), line='Floatnumber = group(Pointfloat, Expfloat)\n')
TokenNode(type=7 (LPAR), string='(', start=(48, 19), end=(48, 20), line='Floatnumber = group(Pointfloat, Expfloat)\n')
TokenNode(type=1 (NAME), string='Pointfloat', start=(48, 20), end=(48, 30), line='Floatnumber = group(Pointfloat, Expfloat)\n')
TokenNode(type=16 (COMMA), string=',', start=(48, 30), end=(48, 31), line='Floatnumber = group(Pointfloat, Expfloat)\n')
TokenNode(type=1 (NAME), string='Expfloat', start=(48, 32), end=(48, 40), line='Floatnumber = group(Pointfloat, Expfloat)\n')
TokenNode(type=8 (RPAR), string=')', start=(48, 40), end=(48, 41), line='Floatnumber = group(Pointfloat, Expfloat)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(48, 41), end=(48, 42), line='Floatnumber = group(Pointfloat, Expfloat)\n')
TokenNode(type=1 (NAME), string='Imagnumber', start=(49, 0), end=(49, 10), line="Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n")
TokenNode(type=17 (ASSIGN), string='=', start=(49, 11), end=(49, 12), line="Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n")
TokenNode(type=1 (NAME), string='group', start=(49, 13), end=(49, 18), line="Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n")
TokenNode(type=7 (LPAR), string='(', start=(49, 18), end=(49, 19), line="Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n")
TokenNode(type=3 (STRING), string="r'[0-9](?:_?[0-9])*[jJ]'", start=(49, 19), end=(49, 43), line="Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n")
TokenNode(type=16 (COMMA), string=',', start=(49, 43), end=(49, 44), line="Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n")
TokenNode(type=1 (NAME), string='Floatnumber', start=(49, 45), end=(49, 56), line="Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n")
TokenNode(type=18 (OP), string='+', start=(49, 57), end=(49, 58), line="Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n")
TokenNode(type=3 (STRING), string="r'[jJ]'", start=(49, 59), end=(49, 66), line="Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n")
TokenNode(type=8 (RPAR), string=')', start=(49, 66), end=(49, 67), line="Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(49, 67), end=(49, 68), line="Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n")
TokenNode(type=53 (COMMENT), string='# combine all number regexes into single regex', start=(50, 0), end=(50, 46), line='# combine all number regexes into single regex\n')
TokenNode(type=54 (NL), string='\n', start=(50, 46), end=(50, 47), line='# combine all number regexes into single regex\n')
TokenNode(type=1 (NAME), string='Number', start=(51, 0), end=(51, 6), line='Number = group(Imagnumber, Floatnumber, Intnumber)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(51, 7), end=(51, 8), line='Number = group(Imagnumber, Floatnumber, Intnumber)\n')
TokenNode(type=1 (NAME), string='group', start=(51, 9), end=(51, 14), line='Number = group(Imagnumber, Floatnumber, Intnumber)\n')
TokenNode(type=7 (LPAR), string='(', start=(51, 14), end=(51, 15), line='Number = group(Imagnumber, Floatnumber, Intnumber)\n')
TokenNode(type=1 (NAME), string='Imagnumber', start=(51, 15), end=(51, 25), line='Number = group(Imagnumber, Floatnumber, Intnumber)\n')
TokenNode(type=16 (COMMA), string=',', start=(51, 25), end=(51, 26), line='Number = group(Imagnumber, Floatnumber, Intnumber)\n')
TokenNode(type=1 (NAME), string='Floatnumber', start=(51, 27), end=(51, 38), line='Number = group(Imagnumber, Floatnumber, Intnumber)\n')
TokenNode(type=16 (COMMA), string=',', start=(51, 38), end=(51, 39), line='Number = group(Imagnumber, Floatnumber, Intnumber)\n')
TokenNode(type=1 (NAME), string='Intnumber', start=(51, 40), end=(51, 49), line='Number = group(Imagnumber, Floatnumber, Intnumber)\n')
TokenNode(type=8 (RPAR), string=')', start=(51, 49), end=(51, 50), line='Number = group(Imagnumber, Floatnumber, Intnumber)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(51, 50), end=(51, 51), line='Number = group(Imagnumber, Floatnumber, Intnumber)\n')
TokenNode(type=54 (NL), string='\n', start=(52, 0), end=(52, 1), line='\n')
TokenNode(type=53 (COMMENT), string='# special symbols regex', start=(53, 0), end=(53, 23), line='# special symbols regex\n')
TokenNode(type=54 (NL), string='\n', start=(53, 23), end=(53, 24), line='# special symbols regex\n')
TokenNode(type=53 (COMMENT), string="# reverse to ensure shorter symbols don't come before longer ones, ending search", start=(54, 0), end=(54, 80), line="# reverse to ensure shorter symbols don't come before longer ones, ending search\n")
TokenNode(type=54 (NL), string='\n', start=(54, 80), end=(54, 81), line="# reverse to ensure shorter symbols don't come before longer ones, ending search\n")
TokenNode(type=1 (NAME), string='Special', start=(55, 0), end=(55, 7), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=17 (ASSIGN), string='=', start=(55, 8), end=(55, 9), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=1 (NAME), string='group', start=(55, 10), end=(55, 15), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=7 (LPAR), string='(', start=(55, 15), end=(55, 16), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=18 (OP), string='*', start=(55, 16), end=(55, 17), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=1 (NAME), string='map', start=(55, 17), end=(55, 20), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=7 (LPAR), string='(', start=(55, 20), end=(55, 21), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=1 (NAME), string='re', start=(55, 21), end=(55, 23), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=15 (DOT), string='.', start=(55, 23), end=(55, 24), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=1 (NAME), string='escape', start=(55, 24), end=(55, 30), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=16 (COMMA), string=',', start=(55, 30), end=(55, 31), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=1 (NAME), string='sorted', start=(55, 32), end=(55, 38), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=7 (LPAR), string='(', start=(55, 38), end=(55, 39), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=1 (NAME), string='symbols', start=(55, 39), end=(55, 46), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=16 (COMMA), string=',', start=(55, 46), end=(55, 47), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=1 (NAME), string='reverse', start=(55, 48), end=(55, 55), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=17 (ASSIGN), string='=', start=(55, 55), end=(55, 56), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=37 (TRUE), string='True', start=(55, 56), end=(55, 60), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=8 (RPAR), string=')', start=(55, 60), end=(55, 61), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=8 (RPAR), string=')', start=(55, 61), end=(55, 62), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=8 (RPAR), string=')', start=(55, 62), end=(55, 63), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(55, 63), end=(55, 64), line='Special = group(*map(re.escape, sorted(symbols, reverse=True)))\n')
TokenNode(type=53 (COMMENT), string='# group them with withspaces', start=(56, 0), end=(56, 28), line='# group them with withspaces\n')
TokenNode(type=54 (NL), string='\n', start=(56, 28), end=(56, 29), line='# group them with withspaces\n')
TokenNode(type=1 (NAME), string='Special', start=(57, 0), end=(57, 7), line="Special = group(r'\\r?\\n', Special)\n")
TokenNode(type=17 (ASSIGN), string='=', start=(57, 8), end=(57, 9), line="Special = group(r'\\r?\\n', Special)\n")
TokenNode(type=1 (NAME), string='group', start=(57, 10), end=(57, 15), line="Special = group(r'\\r?\\n', Special)\n")
TokenNode(type=7 (LPAR), string='(', start=(57, 15), end=(57, 16), line="Special = group(r'\\r?\\n', Special)\n")
TokenNode(type=3 (STRING), string="r'\\r?\\n'", start=(57, 16), end=(57, 24), line="Special = group(r'\\r?\\n', Special)\n")
TokenNode(type=16 (COMMA), string=',', start=(57, 24), end=(57, 25), line="Special = group(r'\\r?\\n', Special)\n")
TokenNode(type=1 (NAME), string='Special', start=(57, 26), end=(57, 33), line="Special = group(r'\\r?\\n', Special)\n")
TokenNode(type=8 (RPAR), string=')', start=(57, 33), end=(57, 34), line="Special = group(r'\\r?\\n', Special)\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(57, 34), end=(57, 35), line="Special = group(r'\\r?\\n', Special)\n")
TokenNode(type=54 (NL), string='\n', start=(58, 0), end=(58, 1), line='\n')
TokenNode(type=53 (COMMENT), string='# generate prefixes used in python', start=(59, 0), end=(59, 34), line='# generate prefixes used in python\n')
TokenNode(type=54 (NL), string='\n', start=(59, 34), end=(59, 35), line='# generate prefixes used in python\n')
TokenNode(type=33 (DEF), string='def', start=(60, 0), end=(60, 3), line='def _all_string_prefixes():\n')
TokenNode(type=1 (NAME), string='_all_string_prefixes', start=(60, 4), end=(60, 24), line='def _all_string_prefixes():\n')
TokenNode(type=7 (LPAR), string='(', start=(60, 24), end=(60, 25), line='def _all_string_prefixes():\n')
TokenNode(type=8 (RPAR), string=')', start=(60, 25), end=(60, 26), line='def _all_string_prefixes():\n')
TokenNode(type=13 (COLON), string=':', start=(60, 26), end=(60, 27), line='def _all_string_prefixes():\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(60, 27), end=(60, 28), line='def _all_string_prefixes():\n')
TokenNode(type=5 (INDENT), string='    ', start=(61, 0), end=(61, 4), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=1 (NAME), string='_valid_string_prefixes', start=(61, 4), end=(61, 26), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=17 (ASSIGN), string='=', start=(61, 27), end=(61, 28), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=9 (LSQB), string='[', start=(61, 29), end=(61, 30), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=3 (STRING), string="'b'", start=(61, 30), end=(61, 33), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=16 (COMMA), string=',', start=(61, 33), end=(61, 34), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=3 (STRING), string="'r'", start=(61, 35), end=(61, 38), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=16 (COMMA), string=',', start=(61, 38), end=(61, 39), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=3 (STRING), string="'u'", start=(61, 40), end=(61, 43), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=16 (COMMA), string=',', start=(61, 43), end=(61, 44), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=3 (STRING), string="'f'", start=(61, 45), end=(61, 48), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=16 (COMMA), string=',', start=(61, 48), end=(61, 49), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=3 (STRING), string="'br'", start=(61, 50), end=(61, 54), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=16 (COMMA), string=',', start=(61, 54), end=(61, 55), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=3 (STRING), string="'fr'", start=(61, 56), end=(61, 60), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=10 (RSQB), string=']', start=(61, 60), end=(61, 61), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(61, 61), end=(61, 62), line="    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n")
TokenNode(type=1 (NAME), string='result', start=(62, 4), end=(62, 10), line="    result = {''}\n")
TokenNode(type=17 (ASSIGN), string='=', start=(62, 11), end=(62, 12), line="    result = {''}\n")
TokenNode(type=11 (LBR), string='{', start=(62, 13), end=(62, 14), line="    result = {''}\n")
TokenNode(type=3 (STRING), string="''", start=(62, 14), end=(62, 16), line="    result = {''}\n")
TokenNode(type=12 (RBR), string='}', start=(62, 16), end=(62, 17), line="    result = {''}\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(62, 17), end=(62, 18), line="    result = {''}\n")
TokenNode(type=22 (LOOP), string='for', start=(63, 4), end=(63, 7), line='    for prefix in _valid_string_prefixes:\n')
TokenNode(type=1 (NAME), string='prefix', start=(63, 8), end=(63, 14), line='    for prefix in _valid_string_prefixes:\n')
TokenNode(type=1 (NAME), string='in', start=(63, 15), end=(63, 17), line='    for prefix in _valid_string_prefixes:\n')
TokenNode(type=1 (NAME), string='_valid_string_prefixes', start=(63, 18), end=(63, 40), line='    for prefix in _valid_string_prefixes:\n')
TokenNode(type=13 (COLON), string=':', start=(63, 40), end=(63, 41), line='    for prefix in _valid_string_prefixes:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(63, 41), end=(63, 42), line='    for prefix in _valid_string_prefixes:\n')
TokenNode(type=5 (INDENT), string='        ', start=(64, 0), end=(64, 8), line='        for perm in itertools.permutations(prefix):\n')
TokenNode(type=22 (LOOP), string='for', start=(64, 8), end=(64, 11), line='        for perm in itertools.permutations(prefix):\n')
TokenNode(type=1 (NAME), string='perm', start=(64, 12), end=(64, 16), line='        for perm in itertools.permutations(prefix):\n')
TokenNode(type=1 (NAME), string='in', start=(64, 17), end=(64, 19), line='        for perm in itertools.permutations(prefix):\n')
TokenNode(type=1 (NAME), string='itertools', start=(64, 20), end=(64, 29), line='        for perm in itertools.permutations(prefix):\n')
TokenNode(type=15 (DOT), string='.', start=(64, 29), end=(64, 30), line='        for perm in itertools.permutations(prefix):\n')
TokenNode(type=1 (NAME), string='permutations', start=(64, 30), end=(64, 42), line='        for perm in itertools.permutations(prefix):\n')
TokenNode(type=7 (LPAR), string='(', start=(64, 42), end=(64, 43), line='        for perm in itertools.permutations(prefix):\n')
TokenNode(type=1 (NAME), string='prefix', start=(64, 43), end=(64, 49), line='        for perm in itertools.permutations(prefix):\n')
TokenNode(type=8 (RPAR), string=')', start=(64, 49), end=(64, 50), line='        for perm in itertools.permutations(prefix):\n')
TokenNode(type=13 (COLON), string=':', start=(64, 50), end=(64, 51), line='        for perm in itertools.permutations(prefix):\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(64, 51), end=(64, 52), line='        for perm in itertools.permutations(prefix):\n')
TokenNode(type=5 (INDENT), string='            ', start=(65, 0), end=(65, 12), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=22 (LOOP), string='for', start=(65, 12), end=(65, 15), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=1 (NAME), string='prod', start=(65, 16), end=(65, 20), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=1 (NAME), string='in', start=(65, 21), end=(65, 23), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=1 (NAME), string='itertools', start=(65, 24), end=(65, 33), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=15 (DOT), string='.', start=(65, 33), end=(65, 34), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=1 (NAME), string='product', start=(65, 34), end=(65, 41), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=7 (LPAR), string='(', start=(65, 41), end=(65, 42), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=18 (OP), string='*', start=(65, 42), end=(65, 43), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=9 (LSQB), string='[', start=(65, 43), end=(65, 44), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=7 (LPAR), string='(', start=(65, 44), end=(65, 45), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=1 (NAME), string='pref', start=(65, 45), end=(65, 49), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=16 (COMMA), string=',', start=(65, 49), end=(65, 50), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=1 (NAME), string='pref', start=(65, 51), end=(65, 55), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=15 (DOT), string='.', start=(65, 55), end=(65, 56), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=1 (NAME), string='upper', start=(65, 56), end=(65, 61), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=7 (LPAR), string='(', start=(65, 61), end=(65, 62), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=8 (RPAR), string=')', start=(65, 62), end=(65, 63), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=8 (RPAR), string=')', start=(65, 63), end=(65, 64), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=22 (LOOP), string='for', start=(65, 65), end=(65, 68), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=1 (NAME), string='pref', start=(65, 69), end=(65, 73), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=1 (NAME), string='in', start=(65, 74), end=(65, 76), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=1 (NAME), string='perm', start=(65, 77), end=(65, 81), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=10 (RSQB), string=']', start=(65, 81), end=(65, 82), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=8 (RPAR), string=')', start=(65, 82), end=(65, 83), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=13 (COLON), string=':', start=(65, 83), end=(65, 84), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(65, 84), end=(65, 85), line='            for prod in itertools.product(*[(pref, pref.upper()) for pref in perm]):\n')
TokenNode(type=5 (INDENT), string='                ', start=(66, 0), end=(66, 16), line="                result.add(''.join(prod))\n")
TokenNode(type=1 (NAME), string='result', start=(66, 16), end=(66, 22), line="                result.add(''.join(prod))\n")
TokenNode(type=15 (DOT), string='.', start=(66, 22), end=(66, 23), line="                result.add(''.join(prod))\n")
TokenNode(type=1 (NAME), string='add', start=(66, 23), end=(66, 26), line="                result.add(''.join(prod))\n")
TokenNode(type=7 (LPAR), string='(', start=(66, 26), end=(66, 27), line="                result.add(''.join(prod))\n")
TokenNode(type=3 (STRING), string="''", start=(66, 27), end=(66, 29), line="                result.add(''.join(prod))\n")
TokenNode(type=15 (DOT), string='.', start=(66, 29), end=(66, 30), line="                result.add(''.join(prod))\n")
TokenNode(type=1 (NAME), string='join', start=(66, 30), end=(66, 34), line="                result.add(''.join(prod))\n")
TokenNode(type=7 (LPAR), string='(', start=(66, 34), end=(66, 35), line="                result.add(''.join(prod))\n")
TokenNode(type=1 (NAME), string='prod', start=(66, 35), end=(66, 39), line="                result.add(''.join(prod))\n")
TokenNode(type=8 (RPAR), string=')', start=(66, 39), end=(66, 40), line="                result.add(''.join(prod))\n")
TokenNode(type=8 (RPAR), string=')', start=(66, 40), end=(66, 41), line="                result.add(''.join(prod))\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(66, 41), end=(66, 42), line="                result.add(''.join(prod))\n")
TokenNode(type=6 (DEDENT), string='', start=(67, 4), end=(67, 4), line='    return result\n')
TokenNode(type=6 (DEDENT), string='', start=(67, 4), end=(67, 4), line='    return result\n')
TokenNode(type=6 (DEDENT), string='', start=(67, 4), end=(67, 4), line='    return result\n')
TokenNode(type=24 (RETURN), string='return', start=(67, 4), end=(67, 10), line='    return result\n')
TokenNode(type=1 (NAME), string='result', start=(67, 11), end=(67, 17), line='    return result\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(67, 17), end=(67, 18), line='    return result\n')
TokenNode(type=54 (NL), string='\n', start=(68, 0), end=(68, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(69, 0), end=(69, 0), line='StringPrefixRegex = group(*_all_string_prefixes())\n')
TokenNode(type=1 (NAME), string='StringPrefixRegex', start=(69, 0), end=(69, 17), line='StringPrefixRegex = group(*_all_string_prefixes())\n')
TokenNode(type=17 (ASSIGN), string='=', start=(69, 18), end=(69, 19), line='StringPrefixRegex = group(*_all_string_prefixes())\n')
TokenNode(type=1 (NAME), string='group', start=(69, 20), end=(69, 25), line='StringPrefixRegex = group(*_all_string_prefixes())\n')
TokenNode(type=7 (LPAR), string='(', start=(69, 25), end=(69, 26), line='StringPrefixRegex = group(*_all_string_prefixes())\n')
TokenNode(type=18 (OP), string='*', start=(69, 26), end=(69, 27), line='StringPrefixRegex = group(*_all_string_prefixes())\n')
TokenNode(type=1 (NAME), string='_all_string_prefixes', start=(69, 27), end=(69, 47), line='StringPrefixRegex = group(*_all_string_prefixes())\n')
TokenNode(type=7 (LPAR), string='(', start=(69, 47), end=(69, 48), line='StringPrefixRegex = group(*_all_string_prefixes())\n')
TokenNode(type=8 (RPAR), string=')', start=(69, 48), end=(69, 49), line='StringPrefixRegex = group(*_all_string_prefixes())\n')
TokenNode(type=8 (RPAR), string=')', start=(69, 49), end=(69, 50), line='StringPrefixRegex = group(*_all_string_prefixes())\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(69, 50), end=(69, 51), line='StringPrefixRegex = group(*_all_string_prefixes())\n')
TokenNode(type=54 (NL), string='\n', start=(70, 0), end=(70, 1), line='\n')
TokenNode(type=53 (COMMENT), string="# Tail end of ' string.", start=(71, 0), end=(71, 23), line="# Tail end of ' string.\n")
TokenNode(type=54 (NL), string='\n', start=(71, 23), end=(71, 24), line="# Tail end of ' string.\n")
TokenNode(type=1 (NAME), string='Single', start=(72, 0), end=(72, 6), line='Single = r"[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'"\n')
TokenNode(type=17 (ASSIGN), string='=', start=(72, 7), end=(72, 8), line='Single = r"[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'"\n')
TokenNode(type=3 (STRING), string='r"[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'"', start=(72, 9), end=(72, 35), line='Single = r"[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'"\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(72, 35), end=(72, 36), line='Single = r"[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'"\n')
TokenNode(type=53 (COMMENT), string='# Tail end of " string.', start=(73, 0), end=(73, 23), line='# Tail end of " string.\n')
TokenNode(type=54 (NL), string='\n', start=(73, 23), end=(73, 24), line='# Tail end of " string.\n')
TokenNode(type=1 (NAME), string='Double', start=(74, 0), end=(74, 6), line='Double = r\'[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\'\n')
TokenNode(type=17 (ASSIGN), string='=', start=(74, 7), end=(74, 8), line='Double = r\'[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\'\n')
TokenNode(type=3 (STRING), string='r\'[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\'', start=(74, 9), end=(74, 35), line='Double = r\'[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\'\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(74, 35), end=(74, 36), line='Double = r\'[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\'\n')
TokenNode(type=53 (COMMENT), string="# Tail end of ''' string.", start=(75, 0), end=(75, 25), line="# Tail end of ''' string.\n")
TokenNode(type=54 (NL), string='\n', start=(75, 25), end=(75, 26), line="# Tail end of ''' string.\n")
TokenNode(type=1 (NAME), string='Single3', start=(76, 0), end=(76, 7), line='Single3 = r"[^\'\\\\]*(?:(?:\\\\.|\'(?!\'\'))[^\'\\\\]*)*\'\'\'"\n')
TokenNode(type=17 (ASSIGN), string='=', start=(76, 8), end=(76, 9), line='Single3 = r"[^\'\\\\]*(?:(?:\\\\.|\'(?!\'\'))[^\'\\\\]*)*\'\'\'"\n')
TokenNode(type=3 (STRING), string='r"[^\'\\\\]*(?:(?:\\\\.|\'(?!\'\'))[^\'\\\\]*)*\'\'\'"', start=(76, 10), end=(76, 50), line='Single3 = r"[^\'\\\\]*(?:(?:\\\\.|\'(?!\'\'))[^\'\\\\]*)*\'\'\'"\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(76, 50), end=(76, 51), line='Single3 = r"[^\'\\\\]*(?:(?:\\\\.|\'(?!\'\'))[^\'\\\\]*)*\'\'\'"\n')
TokenNode(type=53 (COMMENT), string='# Tail end of """ string.', start=(77, 0), end=(77, 25), line='# Tail end of """ string.\n')
TokenNode(type=54 (NL), string='\n', start=(77, 25), end=(77, 26), line='# Tail end of """ string.\n')
TokenNode(type=1 (NAME), string='Double3', start=(78, 0), end=(78, 7), line='Double3 = r\'[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""\'\n')
TokenNode(type=17 (ASSIGN), string='=', start=(78, 8), end=(78, 9), line='Double3 = r\'[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""\'\n')
TokenNode(type=3 (STRING), string='r\'[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""\'', start=(78, 10), end=(78, 50), line='Double3 = r\'[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""\'\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(78, 50), end=(78, 51), line='Double3 = r\'[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""\'\n')
TokenNode(type=53 (COMMENT), string='# Beginning of \'\'\' or """ string', start=(79, 0), end=(79, 32), line='# Beginning of \'\'\' or """ string\n')
TokenNode(type=54 (NL), string='\n', start=(79, 32), end=(79, 33), line='# Beginning of \'\'\' or """ string\n')
TokenNode(type=1 (NAME), string='Triple', start=(80, 0), end=(80, 6), line='Triple = group(StringPrefixRegex + "\'\'\'", StringPrefixRegex + \'"""\')\n')
TokenNode(type=17 (ASSIGN), string='=', start=(80, 7), end=(80, 8), line='Triple = group(StringPrefixRegex + "\'\'\'", StringPrefixRegex + \'"""\')\n')
TokenNode(type=1 (NAME), string='group', start=(80, 9), end=(80, 14), line='Triple = group(StringPrefixRegex + "\'\'\'", StringPrefixRegex + \'"""\')\n')
TokenNode(type=7 (LPAR), string='(', start=(80, 14), end=(80, 15), line='Triple = group(StringPrefixRegex + "\'\'\'", StringPrefixRegex + \'"""\')\n')
TokenNode(type=1 (NAME), string='StringPrefixRegex', start=(80, 15), end=(80, 32), line='Triple = group(StringPrefixRegex + "\'\'\'", StringPrefixRegex + \'"""\')\n')
TokenNode(type=18 (OP), string='+', start=(80, 33), end=(80, 34), line='Triple = group(StringPrefixRegex + "\'\'\'", StringPrefixRegex + \'"""\')\n')
TokenNode(type=3 (STRING), string='"\'\'\'"', start=(80, 35), end=(80, 40), line='Triple = group(StringPrefixRegex + "\'\'\'", StringPrefixRegex + \'"""\')\n')
TokenNode(type=16 (COMMA), string=',', start=(80, 40), end=(80, 41), line='Triple = group(StringPrefixRegex + "\'\'\'", StringPrefixRegex + \'"""\')\n')
TokenNode(type=1 (NAME), string='StringPrefixRegex', start=(80, 42), end=(80, 59), line='Triple = group(StringPrefixRegex + "\'\'\'", StringPrefixRegex + \'"""\')\n')
TokenNode(type=18 (OP), string='+', start=(80, 60), end=(80, 61), line='Triple = group(StringPrefixRegex + "\'\'\'", StringPrefixRegex + \'"""\')\n')
TokenNode(type=3 (STRING), string='\'"""\'', start=(80, 62), end=(80, 67), line='Triple = group(StringPrefixRegex + "\'\'\'", StringPrefixRegex + \'"""\')\n')
TokenNode(type=8 (RPAR), string=')', start=(80, 67), end=(80, 68), line='Triple = group(StringPrefixRegex + "\'\'\'", StringPrefixRegex + \'"""\')\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(80, 68), end=(80, 69), line='Triple = group(StringPrefixRegex + "\'\'\'", StringPrefixRegex + \'"""\')\n')
TokenNode(type=54 (NL), string='\n', start=(81, 0), end=(81, 1), line='\n')
TokenNode(type=1 (NAME), string='String', start=(82, 0), end=(82, 6), line='String = group(StringPrefixRegex + r"\'[^\\n\'\\\\]*(?:\\\\.[^\\n\'\\\\]*)*" +\n')
TokenNode(type=17 (ASSIGN), string='=', start=(82, 7), end=(82, 8), line='String = group(StringPrefixRegex + r"\'[^\\n\'\\\\]*(?:\\\\.[^\\n\'\\\\]*)*" +\n')
TokenNode(type=1 (NAME), string='group', start=(82, 9), end=(82, 14), line='String = group(StringPrefixRegex + r"\'[^\\n\'\\\\]*(?:\\\\.[^\\n\'\\\\]*)*" +\n')
TokenNode(type=7 (LPAR), string='(', start=(82, 14), end=(82, 15), line='String = group(StringPrefixRegex + r"\'[^\\n\'\\\\]*(?:\\\\.[^\\n\'\\\\]*)*" +\n')
TokenNode(type=1 (NAME), string='StringPrefixRegex', start=(82, 15), end=(82, 32), line='String = group(StringPrefixRegex + r"\'[^\\n\'\\\\]*(?:\\\\.[^\\n\'\\\\]*)*" +\n')
TokenNode(type=18 (OP), string='+', start=(82, 33), end=(82, 34), line='String = group(StringPrefixRegex + r"\'[^\\n\'\\\\]*(?:\\\\.[^\\n\'\\\\]*)*" +\n')
TokenNode(type=3 (STRING), string='r"\'[^\\n\'\\\\]*(?:\\\\.[^\\n\'\\\\]*)*"', start=(82, 35), end=(82, 65), line='String = group(StringPrefixRegex + r"\'[^\\n\'\\\\]*(?:\\\\.[^\\n\'\\\\]*)*" +\n')
TokenNode(type=18 (OP), string='+', start=(82, 66), end=(82, 67), line='String = group(StringPrefixRegex + r"\'[^\\n\'\\\\]*(?:\\\\.[^\\n\'\\\\]*)*" +\n')
TokenNode(type=54 (NL), string='\n', start=(82, 67), end=(82, 68), line='String = group(StringPrefixRegex + r"\'[^\\n\'\\\\]*(?:\\\\.[^\\n\'\\\\]*)*" +\n')
TokenNode(type=1 (NAME), string='group', start=(83, 16), end=(83, 21), line='                group("\'", r\'\\\\\\r?\\n\'),\n')
TokenNode(type=7 (LPAR), string='(', start=(83, 21), end=(83, 22), line='                group("\'", r\'\\\\\\r?\\n\'),\n')
TokenNode(type=3 (STRING), string='"\'"', start=(83, 22), end=(83, 25), line='                group("\'", r\'\\\\\\r?\\n\'),\n')
TokenNode(type=16 (COMMA), string=',', start=(83, 25), end=(83, 26), line='                group("\'", r\'\\\\\\r?\\n\'),\n')
TokenNode(type=3 (STRING), string="r'\\\\\\r?\\n'", start=(83, 27), end=(83, 37), line='                group("\'", r\'\\\\\\r?\\n\'),\n')
TokenNode(type=8 (RPAR), string=')', start=(83, 37), end=(83, 38), line='                group("\'", r\'\\\\\\r?\\n\'),\n')
TokenNode(type=16 (COMMA), string=',', start=(83, 38), end=(83, 39), line='                group("\'", r\'\\\\\\r?\\n\'),\n')
TokenNode(type=54 (NL), string='\n', start=(83, 39), end=(83, 40), line='                group("\'", r\'\\\\\\r?\\n\'),\n')
TokenNode(type=1 (NAME), string='StringPrefixRegex', start=(84, 16), end=(84, 33), line='                StringPrefixRegex + r\'"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*\' +\n')
TokenNode(type=18 (OP), string='+', start=(84, 34), end=(84, 35), line='                StringPrefixRegex + r\'"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*\' +\n')
TokenNode(type=3 (STRING), string='r\'"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*\'', start=(84, 36), end=(84, 66), line='                StringPrefixRegex + r\'"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*\' +\n')
TokenNode(type=18 (OP), string='+', start=(84, 67), end=(84, 68), line='                StringPrefixRegex + r\'"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*\' +\n')
TokenNode(type=54 (NL), string='\n', start=(84, 68), end=(84, 69), line='                StringPrefixRegex + r\'"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*\' +\n')
TokenNode(type=1 (NAME), string='group', start=(85, 16), end=(85, 21), line='                group(\'"\', r\'\\\\\\r?\\n\'))\n')
TokenNode(type=7 (LPAR), string='(', start=(85, 21), end=(85, 22), line='                group(\'"\', r\'\\\\\\r?\\n\'))\n')
TokenNode(type=3 (STRING), string='\'"\'', start=(85, 22), end=(85, 25), line='                group(\'"\', r\'\\\\\\r?\\n\'))\n')
TokenNode(type=16 (COMMA), string=',', start=(85, 25), end=(85, 26), line='                group(\'"\', r\'\\\\\\r?\\n\'))\n')
TokenNode(type=3 (STRING), string="r'\\\\\\r?\\n'", start=(85, 27), end=(85, 37), line='                group(\'"\', r\'\\\\\\r?\\n\'))\n')
TokenNode(type=8 (RPAR), string=')', start=(85, 37), end=(85, 38), line='                group(\'"\', r\'\\\\\\r?\\n\'))\n')
TokenNode(type=8 (RPAR), string=')', start=(85, 38), end=(85, 39), line='                group(\'"\', r\'\\\\\\r?\\n\'))\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(85, 39), end=(85, 40), line='                group(\'"\', r\'\\\\\\r?\\n\'))\n')
TokenNode(type=1 (NAME), string='Extras', start=(86, 0), end=(86, 6), line="Extras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n")
TokenNode(type=17 (ASSIGN), string='=', start=(86, 7), end=(86, 8), line="Extras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n")
TokenNode(type=1 (NAME), string='group', start=(86, 9), end=(86, 14), line="Extras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n")
TokenNode(type=7 (LPAR), string='(', start=(86, 14), end=(86, 15), line="Extras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n")
TokenNode(type=3 (STRING), string="r'\\\\\\r?\\n|\\Z'", start=(86, 15), end=(86, 28), line="Extras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n")
TokenNode(type=16 (COMMA), string=',', start=(86, 28), end=(86, 29), line="Extras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n")
TokenNode(type=1 (NAME), string='Comment', start=(86, 30), end=(86, 37), line="Extras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n")
TokenNode(type=16 (COMMA), string=',', start=(86, 37), end=(86, 38), line="Extras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n")
TokenNode(type=1 (NAME), string='Triple', start=(86, 39), end=(86, 45), line="Extras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n")
TokenNode(type=8 (RPAR), string=')', start=(86, 45), end=(86, 46), line="Extras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(86, 46), end=(86, 47), line="Extras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n")
TokenNode(type=1 (NAME), string='PseudoToken', start=(87, 0), end=(87, 11), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(87, 12), end=(87, 13), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=1 (NAME), string='Whitespace', start=(87, 14), end=(87, 24), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=18 (OP), string='+', start=(87, 25), end=(87, 26), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=1 (NAME), string='group', start=(87, 27), end=(87, 32), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=7 (LPAR), string='(', start=(87, 32), end=(87, 33), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=1 (NAME), string='Extras', start=(87, 33), end=(87, 39), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=16 (COMMA), string=',', start=(87, 39), end=(87, 40), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=1 (NAME), string='Number', start=(87, 41), end=(87, 47), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=16 (COMMA), string=',', start=(87, 47), end=(87, 48), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=1 (NAME), string='Special', start=(87, 49), end=(87, 56), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=16 (COMMA), string=',', start=(87, 56), end=(87, 57), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=1 (NAME), string='String', start=(87, 58), end=(87, 64), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=16 (COMMA), string=',', start=(87, 64), end=(87, 65), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=1 (NAME), string='Name', start=(87, 66), end=(87, 70), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=8 (RPAR), string=')', start=(87, 70), end=(87, 71), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(87, 71), end=(87, 72), line='PseudoToken = Whitespace + group(Extras, Number, Special, String, Name)\n')
TokenNode(type=54 (NL), string='\n', start=(88, 0), end=(88, 1), line='\n')
TokenNode(type=31 (CLASS), string='class', start=(89, 0), end=(89, 5), line='class TokenError(Exception): pass\n')
TokenNode(type=1 (NAME), string='TokenError', start=(89, 6), end=(89, 16), line='class TokenError(Exception): pass\n')
TokenNode(type=7 (LPAR), string='(', start=(89, 16), end=(89, 17), line='class TokenError(Exception): pass\n')
TokenNode(type=1 (NAME), string='Exception', start=(89, 17), end=(89, 26), line='class TokenError(Exception): pass\n')
TokenNode(type=8 (RPAR), string=')', start=(89, 26), end=(89, 27), line='class TokenError(Exception): pass\n')
TokenNode(type=13 (COLON), string=':', start=(89, 27), end=(89, 28), line='class TokenError(Exception): pass\n')
TokenNode(type=44 (PASS), string='pass', start=(89, 29), end=(89, 33), line='class TokenError(Exception): pass\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(89, 33), end=(89, 34), line='class TokenError(Exception): pass\n')
TokenNode(type=31 (CLASS), string='class', start=(90, 0), end=(90, 5), line='class StopTokenizing(Exception): pass\n')
TokenNode(type=1 (NAME), string='StopTokenizing', start=(90, 6), end=(90, 20), line='class StopTokenizing(Exception): pass\n')
TokenNode(type=7 (LPAR), string='(', start=(90, 20), end=(90, 21), line='class StopTokenizing(Exception): pass\n')
TokenNode(type=1 (NAME), string='Exception', start=(90, 21), end=(90, 30), line='class StopTokenizing(Exception): pass\n')
TokenNode(type=8 (RPAR), string=')', start=(90, 30), end=(90, 31), line='class StopTokenizing(Exception): pass\n')
TokenNode(type=13 (COLON), string=':', start=(90, 31), end=(90, 32), line='class StopTokenizing(Exception): pass\n')
TokenNode(type=44 (PASS), string='pass', start=(90, 33), end=(90, 37), line='class StopTokenizing(Exception): pass\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(90, 37), end=(90, 38), line='class StopTokenizing(Exception): pass\n')
TokenNode(type=54 (NL), string='\n', start=(91, 0), end=(91, 1), line='\n')
TokenNode(type=54 (NL), string='\n', start=(92, 0), end=(92, 1), line='\n')
TokenNode(type=1 (NAME), string='endpats', start=(93, 0), end=(93, 7), line='endpats = {}\n')
TokenNode(type=17 (ASSIGN), string='=', start=(93, 8), end=(93, 9), line='endpats = {}\n')
TokenNode(type=11 (LBR), string='{', start=(93, 10), end=(93, 11), line='endpats = {}\n')
TokenNode(type=12 (RBR), string='}', start=(93, 11), end=(93, 12), line='endpats = {}\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(93, 12), end=(93, 13), line='endpats = {}\n')
TokenNode(type=22 (LOOP), string='for', start=(94, 0), end=(94, 3), line='for _prefix in _all_string_prefixes():\n')
TokenNode(type=1 (NAME), string='_prefix', start=(94, 4), end=(94, 11), line='for _prefix in _all_string_prefixes():\n')
TokenNode(type=1 (NAME), string='in', start=(94, 12), end=(94, 14), line='for _prefix in _all_string_prefixes():\n')
TokenNode(type=1 (NAME), string='_all_string_prefixes', start=(94, 15), end=(94, 35), line='for _prefix in _all_string_prefixes():\n')
TokenNode(type=7 (LPAR), string='(', start=(94, 35), end=(94, 36), line='for _prefix in _all_string_prefixes():\n')
TokenNode(type=8 (RPAR), string=')', start=(94, 36), end=(94, 37), line='for _prefix in _all_string_prefixes():\n')
TokenNode(type=13 (COLON), string=':', start=(94, 37), end=(94, 38), line='for _prefix in _all_string_prefixes():\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(94, 38), end=(94, 39), line='for _prefix in _all_string_prefixes():\n')
TokenNode(type=5 (INDENT), string='    ', start=(95, 0), end=(95, 4), line='    endpats[_prefix + "\'"] = Single\n')
TokenNode(type=1 (NAME), string='endpats', start=(95, 4), end=(95, 11), line='    endpats[_prefix + "\'"] = Single\n')
TokenNode(type=9 (LSQB), string='[', start=(95, 11), end=(95, 12), line='    endpats[_prefix + "\'"] = Single\n')
TokenNode(type=1 (NAME), string='_prefix', start=(95, 12), end=(95, 19), line='    endpats[_prefix + "\'"] = Single\n')
TokenNode(type=18 (OP), string='+', start=(95, 20), end=(95, 21), line='    endpats[_prefix + "\'"] = Single\n')
TokenNode(type=3 (STRING), string='"\'"', start=(95, 22), end=(95, 25), line='    endpats[_prefix + "\'"] = Single\n')
TokenNode(type=10 (RSQB), string=']', start=(95, 25), end=(95, 26), line='    endpats[_prefix + "\'"] = Single\n')
TokenNode(type=17 (ASSIGN), string='=', start=(95, 27), end=(95, 28), line='    endpats[_prefix + "\'"] = Single\n')
TokenNode(type=1 (NAME), string='Single', start=(95, 29), end=(95, 35), line='    endpats[_prefix + "\'"] = Single\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(95, 35), end=(95, 36), line='    endpats[_prefix + "\'"] = Single\n')
TokenNode(type=1 (NAME), string='endpats', start=(96, 4), end=(96, 11), line='    endpats[_prefix + \'"\'] = Double\n')
TokenNode(type=9 (LSQB), string='[', start=(96, 11), end=(96, 12), line='    endpats[_prefix + \'"\'] = Double\n')
TokenNode(type=1 (NAME), string='_prefix', start=(96, 12), end=(96, 19), line='    endpats[_prefix + \'"\'] = Double\n')
TokenNode(type=18 (OP), string='+', start=(96, 20), end=(96, 21), line='    endpats[_prefix + \'"\'] = Double\n')
TokenNode(type=3 (STRING), string='\'"\'', start=(96, 22), end=(96, 25), line='    endpats[_prefix + \'"\'] = Double\n')
TokenNode(type=10 (RSQB), string=']', start=(96, 25), end=(96, 26), line='    endpats[_prefix + \'"\'] = Double\n')
TokenNode(type=17 (ASSIGN), string='=', start=(96, 27), end=(96, 28), line='    endpats[_prefix + \'"\'] = Double\n')
TokenNode(type=1 (NAME), string='Double', start=(96, 29), end=(96, 35), line='    endpats[_prefix + \'"\'] = Double\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(96, 35), end=(96, 36), line='    endpats[_prefix + \'"\'] = Double\n')
TokenNode(type=1 (NAME), string='endpats', start=(97, 4), end=(97, 11), line='    endpats[_prefix + "\'\'\'"] = Single3\n')
TokenNode(type=9 (LSQB), string='[', start=(97, 11), end=(97, 12), line='    endpats[_prefix + "\'\'\'"] = Single3\n')
TokenNode(type=1 (NAME), string='_prefix', start=(97, 12), end=(97, 19), line='    endpats[_prefix + "\'\'\'"] = Single3\n')
TokenNode(type=18 (OP), string='+', start=(97, 20), end=(97, 21), line='    endpats[_prefix + "\'\'\'"] = Single3\n')
TokenNode(type=3 (STRING), string='"\'\'\'"', start=(97, 22), end=(97, 27), line='    endpats[_prefix + "\'\'\'"] = Single3\n')
TokenNode(type=10 (RSQB), string=']', start=(97, 27), end=(97, 28), line='    endpats[_prefix + "\'\'\'"] = Single3\n')
TokenNode(type=17 (ASSIGN), string='=', start=(97, 29), end=(97, 30), line='    endpats[_prefix + "\'\'\'"] = Single3\n')
TokenNode(type=1 (NAME), string='Single3', start=(97, 31), end=(97, 38), line='    endpats[_prefix + "\'\'\'"] = Single3\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(97, 38), end=(97, 39), line='    endpats[_prefix + "\'\'\'"] = Single3\n')
TokenNode(type=1 (NAME), string='endpats', start=(98, 4), end=(98, 11), line='    endpats[_prefix + \'"""\'] = Double3\n')
TokenNode(type=9 (LSQB), string='[', start=(98, 11), end=(98, 12), line='    endpats[_prefix + \'"""\'] = Double3\n')
TokenNode(type=1 (NAME), string='_prefix', start=(98, 12), end=(98, 19), line='    endpats[_prefix + \'"""\'] = Double3\n')
TokenNode(type=18 (OP), string='+', start=(98, 20), end=(98, 21), line='    endpats[_prefix + \'"""\'] = Double3\n')
TokenNode(type=3 (STRING), string='\'"""\'', start=(98, 22), end=(98, 27), line='    endpats[_prefix + \'"""\'] = Double3\n')
TokenNode(type=10 (RSQB), string=']', start=(98, 27), end=(98, 28), line='    endpats[_prefix + \'"""\'] = Double3\n')
TokenNode(type=17 (ASSIGN), string='=', start=(98, 29), end=(98, 30), line='    endpats[_prefix + \'"""\'] = Double3\n')
TokenNode(type=1 (NAME), string='Double3', start=(98, 31), end=(98, 38), line='    endpats[_prefix + \'"""\'] = Double3\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(98, 38), end=(98, 39), line='    endpats[_prefix + \'"""\'] = Double3\n')
TokenNode(type=54 (NL), string='\n', start=(99, 0), end=(99, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(100, 0), end=(100, 0), line='single_quoted = set()\n')
TokenNode(type=1 (NAME), string='single_quoted', start=(100, 0), end=(100, 13), line='single_quoted = set()\n')
TokenNode(type=17 (ASSIGN), string='=', start=(100, 14), end=(100, 15), line='single_quoted = set()\n')
TokenNode(type=1 (NAME), string='set', start=(100, 16), end=(100, 19), line='single_quoted = set()\n')
TokenNode(type=7 (LPAR), string='(', start=(100, 19), end=(100, 20), line='single_quoted = set()\n')
TokenNode(type=8 (RPAR), string=')', start=(100, 20), end=(100, 21), line='single_quoted = set()\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(100, 21), end=(100, 22), line='single_quoted = set()\n')
TokenNode(type=1 (NAME), string='triple_quoted', start=(101, 0), end=(101, 13), line='triple_quoted = set()\n')
TokenNode(type=17 (ASSIGN), string='=', start=(101, 14), end=(101, 15), line='triple_quoted = set()\n')
TokenNode(type=1 (NAME), string='set', start=(101, 16), end=(101, 19), line='triple_quoted = set()\n')
TokenNode(type=7 (LPAR), string='(', start=(101, 19), end=(101, 20), line='triple_quoted = set()\n')
TokenNode(type=8 (RPAR), string=')', start=(101, 20), end=(101, 21), line='triple_quoted = set()\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(101, 21), end=(101, 22), line='triple_quoted = set()\n')
TokenNode(type=22 (LOOP), string='for', start=(102, 0), end=(102, 3), line='for t in _all_string_prefixes():\n')
TokenNode(type=1 (NAME), string='t', start=(102, 4), end=(102, 5), line='for t in _all_string_prefixes():\n')
TokenNode(type=1 (NAME), string='in', start=(102, 6), end=(102, 8), line='for t in _all_string_prefixes():\n')
TokenNode(type=1 (NAME), string='_all_string_prefixes', start=(102, 9), end=(102, 29), line='for t in _all_string_prefixes():\n')
TokenNode(type=7 (LPAR), string='(', start=(102, 29), end=(102, 30), line='for t in _all_string_prefixes():\n')
TokenNode(type=8 (RPAR), string=')', start=(102, 30), end=(102, 31), line='for t in _all_string_prefixes():\n')
TokenNode(type=13 (COLON), string=':', start=(102, 31), end=(102, 32), line='for t in _all_string_prefixes():\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(102, 32), end=(102, 33), line='for t in _all_string_prefixes():\n')
TokenNode(type=5 (INDENT), string='    ', start=(103, 0), end=(103, 4), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=22 (LOOP), string='for', start=(103, 4), end=(103, 7), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=1 (NAME), string='u', start=(103, 8), end=(103, 9), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=1 (NAME), string='in', start=(103, 10), end=(103, 12), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=7 (LPAR), string='(', start=(103, 13), end=(103, 14), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=1 (NAME), string='t', start=(103, 14), end=(103, 15), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=18 (OP), string='+', start=(103, 16), end=(103, 17), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=3 (STRING), string='\'"\'', start=(103, 18), end=(103, 21), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=16 (COMMA), string=',', start=(103, 21), end=(103, 22), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=1 (NAME), string='t', start=(103, 23), end=(103, 24), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=18 (OP), string='+', start=(103, 25), end=(103, 26), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=3 (STRING), string='"\'"', start=(103, 27), end=(103, 30), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=8 (RPAR), string=')', start=(103, 30), end=(103, 31), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=13 (COLON), string=':', start=(103, 31), end=(103, 32), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(103, 32), end=(103, 33), line='    for u in (t + \'"\', t + "\'"):\n')
TokenNode(type=5 (INDENT), string='        ', start=(104, 0), end=(104, 8), line='        single_quoted.add(u)\n')
TokenNode(type=1 (NAME), string='single_quoted', start=(104, 8), end=(104, 21), line='        single_quoted.add(u)\n')
TokenNode(type=15 (DOT), string='.', start=(104, 21), end=(104, 22), line='        single_quoted.add(u)\n')
TokenNode(type=1 (NAME), string='add', start=(104, 22), end=(104, 25), line='        single_quoted.add(u)\n')
TokenNode(type=7 (LPAR), string='(', start=(104, 25), end=(104, 26), line='        single_quoted.add(u)\n')
TokenNode(type=1 (NAME), string='u', start=(104, 26), end=(104, 27), line='        single_quoted.add(u)\n')
TokenNode(type=8 (RPAR), string=')', start=(104, 27), end=(104, 28), line='        single_quoted.add(u)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(104, 28), end=(104, 29), line='        single_quoted.add(u)\n')
TokenNode(type=6 (DEDENT), string='', start=(105, 4), end=(105, 4), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=22 (LOOP), string='for', start=(105, 4), end=(105, 7), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=1 (NAME), string='u', start=(105, 8), end=(105, 9), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=1 (NAME), string='in', start=(105, 10), end=(105, 12), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=7 (LPAR), string='(', start=(105, 13), end=(105, 14), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=1 (NAME), string='t', start=(105, 14), end=(105, 15), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=18 (OP), string='+', start=(105, 16), end=(105, 17), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=3 (STRING), string='\'"""\'', start=(105, 18), end=(105, 23), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=16 (COMMA), string=',', start=(105, 23), end=(105, 24), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=1 (NAME), string='t', start=(105, 25), end=(105, 26), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=18 (OP), string='+', start=(105, 27), end=(105, 28), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=3 (STRING), string='"\'\'\'"', start=(105, 29), end=(105, 34), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=8 (RPAR), string=')', start=(105, 34), end=(105, 35), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=13 (COLON), string=':', start=(105, 35), end=(105, 36), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(105, 36), end=(105, 37), line='    for u in (t + \'"""\', t + "\'\'\'"):\n')
TokenNode(type=5 (INDENT), string='        ', start=(106, 0), end=(106, 8), line='        triple_quoted.add(u)\n')
TokenNode(type=1 (NAME), string='triple_quoted', start=(106, 8), end=(106, 21), line='        triple_quoted.add(u)\n')
TokenNode(type=15 (DOT), string='.', start=(106, 21), end=(106, 22), line='        triple_quoted.add(u)\n')
TokenNode(type=1 (NAME), string='add', start=(106, 22), end=(106, 25), line='        triple_quoted.add(u)\n')
TokenNode(type=7 (LPAR), string='(', start=(106, 25), end=(106, 26), line='        triple_quoted.add(u)\n')
TokenNode(type=1 (NAME), string='u', start=(106, 26), end=(106, 27), line='        triple_quoted.add(u)\n')
TokenNode(type=8 (RPAR), string=')', start=(106, 27), end=(106, 28), line='        triple_quoted.add(u)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(106, 28), end=(106, 29), line='        triple_quoted.add(u)\n')
TokenNode(type=54 (NL), string='\n', start=(107, 0), end=(107, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(108, 0), end=(108, 0), line='tabsize = 8\n')
TokenNode(type=6 (DEDENT), string='', start=(108, 0), end=(108, 0), line='tabsize = 8\n')
TokenNode(type=1 (NAME), string='tabsize', start=(108, 0), end=(108, 7), line='tabsize = 8\n')
TokenNode(type=17 (ASSIGN), string='=', start=(108, 8), end=(108, 9), line='tabsize = 8\n')
TokenNode(type=2 (NUMBER), string='8', start=(108, 10), end=(108, 11), line='tabsize = 8\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(108, 11), end=(108, 12), line='tabsize = 8\n')
TokenNode(type=54 (NL), string='\n', start=(109, 0), end=(109, 1), line='\n')
TokenNode(type=33 (DEF), string='def', start=(110, 0), end=(110, 3), line='def token_generator(readline):\n')
TokenNode(type=1 (NAME), string='token_generator', start=(110, 4), end=(110, 19), line='def token_generator(readline):\n')
TokenNode(type=7 (LPAR), string='(', start=(110, 19), end=(110, 20), line='def token_generator(readline):\n')
TokenNode(type=1 (NAME), string='readline', start=(110, 20), end=(110, 28), line='def token_generator(readline):\n')
TokenNode(type=8 (RPAR), string=')', start=(110, 28), end=(110, 29), line='def token_generator(readline):\n')
TokenNode(type=13 (COLON), string=':', start=(110, 29), end=(110, 30), line='def token_generator(readline):\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(110, 30), end=(110, 31), line='def token_generator(readline):\n')
TokenNode(type=5 (INDENT), string='    ', start=(111, 0), end=(111, 4), line='    lnum = parenlev = continued = 0\n')
TokenNode(type=1 (NAME), string='lnum', start=(111, 4), end=(111, 8), line='    lnum = parenlev = continued = 0\n')
TokenNode(type=17 (ASSIGN), string='=', start=(111, 9), end=(111, 10), line='    lnum = parenlev = continued = 0\n')
TokenNode(type=1 (NAME), string='parenlev', start=(111, 11), end=(111, 19), line='    lnum = parenlev = continued = 0\n')
TokenNode(type=17 (ASSIGN), string='=', start=(111, 20), end=(111, 21), line='    lnum = parenlev = continued = 0\n')
TokenNode(type=1 (NAME), string='continued', start=(111, 22), end=(111, 31), line='    lnum = parenlev = continued = 0\n')
TokenNode(type=17 (ASSIGN), string='=', start=(111, 32), end=(111, 33), line='    lnum = parenlev = continued = 0\n')
TokenNode(type=2 (NUMBER), string='0', start=(111, 34), end=(111, 35), line='    lnum = parenlev = continued = 0\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(111, 35), end=(111, 36), line='    lnum = parenlev = continued = 0\n')
TokenNode(type=1 (NAME), string='numchars', start=(112, 4), end=(112, 12), line="    numchars = '0123456789'\n")
TokenNode(type=17 (ASSIGN), string='=', start=(112, 13), end=(112, 14), line="    numchars = '0123456789'\n")
TokenNode(type=3 (STRING), string="'0123456789'", start=(112, 15), end=(112, 27), line="    numchars = '0123456789'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(112, 27), end=(112, 28), line="    numchars = '0123456789'\n")
TokenNode(type=1 (NAME), string='contstr', start=(113, 4), end=(113, 11), line="    contstr, needcont = '', 0\n")
TokenNode(type=16 (COMMA), string=',', start=(113, 11), end=(113, 12), line="    contstr, needcont = '', 0\n")
TokenNode(type=1 (NAME), string='needcont', start=(113, 13), end=(113, 21), line="    contstr, needcont = '', 0\n")
TokenNode(type=17 (ASSIGN), string='=', start=(113, 22), end=(113, 23), line="    contstr, needcont = '', 0\n")
TokenNode(type=3 (STRING), string="''", start=(113, 24), end=(113, 26), line="    contstr, needcont = '', 0\n")
TokenNode(type=16 (COMMA), string=',', start=(113, 26), end=(113, 27), line="    contstr, needcont = '', 0\n")
TokenNode(type=2 (NUMBER), string='0', start=(113, 28), end=(113, 29), line="    contstr, needcont = '', 0\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(113, 29), end=(113, 30), line="    contstr, needcont = '', 0\n")
TokenNode(type=1 (NAME), string='contline', start=(114, 4), end=(114, 12), line='    contline = None\n')
TokenNode(type=17 (ASSIGN), string='=', start=(114, 13), end=(114, 14), line='    contline = None\n')
TokenNode(type=38 (NONE), string='None', start=(114, 15), end=(114, 19), line='    contline = None\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(114, 19), end=(114, 20), line='    contline = None\n')
TokenNode(type=1 (NAME), string='indents', start=(115, 4), end=(115, 11), line='    indents = [0]\n')
TokenNode(type=17 (ASSIGN), string='=', start=(115, 12), end=(115, 13), line='    indents = [0]\n')
TokenNode(type=9 (LSQB), string='[', start=(115, 14), end=(115, 15), line='    indents = [0]\n')
TokenNode(type=2 (NUMBER), string='0', start=(115, 15), end=(115, 16), line='    indents = [0]\n')
TokenNode(type=10 (RSQB), string=']', start=(115, 16), end=(115, 17), line='    indents = [0]\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(115, 17), end=(115, 18), line='    indents = [0]\n')
TokenNode(type=54 (NL), string='\n', start=(116, 0), end=(116, 1), line='\n')
TokenNode(type=1 (NAME), string='last_line', start=(117, 4), end=(117, 13), line="    last_line = b''\n")
TokenNode(type=17 (ASSIGN), string='=', start=(117, 14), end=(117, 15), line="    last_line = b''\n")
TokenNode(type=3 (STRING), string="b''", start=(117, 16), end=(117, 19), line="    last_line = b''\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(117, 19), end=(117, 20), line="    last_line = b''\n")
TokenNode(type=1 (NAME), string='line', start=(118, 4), end=(118, 8), line="    line = b''\n")
TokenNode(type=17 (ASSIGN), string='=', start=(118, 9), end=(118, 10), line="    line = b''\n")
TokenNode(type=3 (STRING), string="b''", start=(118, 11), end=(118, 14), line="    line = b''\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(118, 14), end=(118, 15), line="    line = b''\n")
TokenNode(type=22 (LOOP), string='while', start=(119, 4), end=(119, 9), line='    while True:\n')
TokenNode(type=37 (TRUE), string='True', start=(119, 10), end=(119, 14), line='    while True:\n')
TokenNode(type=13 (COLON), string=':', start=(119, 14), end=(119, 15), line='    while True:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(119, 15), end=(119, 16), line='    while True:\n')
TokenNode(type=5 (INDENT), string='        ', start=(120, 0), end=(120, 8), line='        try:\n')
TokenNode(type=46 (TRY), string='try', start=(120, 8), end=(120, 11), line='        try:\n')
TokenNode(type=13 (COLON), string=':', start=(120, 11), end=(120, 12), line='        try:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(120, 12), end=(120, 13), line='        try:\n')
TokenNode(type=53 (COMMENT), string='# We capture the value of the line variable here because', start=(121, 12), end=(121, 68), line='            # We capture the value of the line variable here because\n')
TokenNode(type=54 (NL), string='\n', start=(121, 68), end=(121, 69), line='            # We capture the value of the line variable here because\n')
TokenNode(type=53 (COMMENT), string="# readline uses the empty string '' to signal end of input,", start=(122, 12), end=(122, 71), line="            # readline uses the empty string '' to signal end of input,\n")
TokenNode(type=54 (NL), string='\n', start=(122, 71), end=(122, 72), line="            # readline uses the empty string '' to signal end of input,\n")
TokenNode(type=5 (INDENT), string='            ', start=(123, 0), end=(123, 12), line='            last_line = line\n')
TokenNode(type=1 (NAME), string='last_line', start=(123, 12), end=(123, 21), line='            last_line = line\n')
TokenNode(type=17 (ASSIGN), string='=', start=(123, 22), end=(123, 23), line='            last_line = line\n')
TokenNode(type=1 (NAME), string='line', start=(123, 24), end=(123, 28), line='            last_line = line\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(123, 28), end=(123, 29), line='            last_line = line\n')
TokenNode(type=1 (NAME), string='line', start=(124, 12), end=(124, 16), line='            line = readline()\n')
TokenNode(type=17 (ASSIGN), string='=', start=(124, 17), end=(124, 18), line='            line = readline()\n')
TokenNode(type=1 (NAME), string='readline', start=(124, 19), end=(124, 27), line='            line = readline()\n')
TokenNode(type=7 (LPAR), string='(', start=(124, 27), end=(124, 28), line='            line = readline()\n')
TokenNode(type=8 (RPAR), string=')', start=(124, 28), end=(124, 29), line='            line = readline()\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(124, 29), end=(124, 30), line='            line = readline()\n')
TokenNode(type=6 (DEDENT), string='', start=(125, 8), end=(125, 8), line='        except StopIteration:\n')
TokenNode(type=35 (EXCEPT), string='except', start=(125, 8), end=(125, 14), line='        except StopIteration:\n')
TokenNode(type=1 (NAME), string='StopIteration', start=(125, 15), end=(125, 28), line='        except StopIteration:\n')
TokenNode(type=13 (COLON), string=':', start=(125, 28), end=(125, 29), line='        except StopIteration:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(125, 29), end=(125, 30), line='        except StopIteration:\n')
TokenNode(type=5 (INDENT), string='            ', start=(126, 0), end=(126, 12), line="            line = b''\n")
TokenNode(type=1 (NAME), string='line', start=(126, 12), end=(126, 16), line="            line = b''\n")
TokenNode(type=17 (ASSIGN), string='=', start=(126, 17), end=(126, 18), line="            line = b''\n")
TokenNode(type=3 (STRING), string="b''", start=(126, 19), end=(126, 22), line="            line = b''\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(126, 22), end=(126, 23), line="            line = b''\n")
TokenNode(type=54 (NL), string='\n', start=(127, 0), end=(127, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(128, 8), end=(128, 8), line='        lnum += 1\n')
TokenNode(type=1 (NAME), string='lnum', start=(128, 8), end=(128, 12), line='        lnum += 1\n')
TokenNode(type=18 (OP), string='+=', start=(128, 13), end=(128, 15), line='        lnum += 1\n')
TokenNode(type=2 (NUMBER), string='1', start=(128, 16), end=(128, 17), line='        lnum += 1\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(128, 17), end=(128, 18), line='        lnum += 1\n')
TokenNode(type=1 (NAME), string='pos', start=(129, 8), end=(129, 11), line='        pos, max = 0, len(line)\n')
TokenNode(type=16 (COMMA), string=',', start=(129, 11), end=(129, 12), line='        pos, max = 0, len(line)\n')
TokenNode(type=1 (NAME), string='max', start=(129, 13), end=(129, 16), line='        pos, max = 0, len(line)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(129, 17), end=(129, 18), line='        pos, max = 0, len(line)\n')
TokenNode(type=2 (NUMBER), string='0', start=(129, 19), end=(129, 20), line='        pos, max = 0, len(line)\n')
TokenNode(type=16 (COMMA), string=',', start=(129, 20), end=(129, 21), line='        pos, max = 0, len(line)\n')
TokenNode(type=1 (NAME), string='len', start=(129, 22), end=(129, 25), line='        pos, max = 0, len(line)\n')
TokenNode(type=7 (LPAR), string='(', start=(129, 25), end=(129, 26), line='        pos, max = 0, len(line)\n')
TokenNode(type=1 (NAME), string='line', start=(129, 26), end=(129, 30), line='        pos, max = 0, len(line)\n')
TokenNode(type=8 (RPAR), string=')', start=(129, 30), end=(129, 31), line='        pos, max = 0, len(line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(129, 31), end=(129, 32), line='        pos, max = 0, len(line)\n')
TokenNode(type=54 (NL), string='\n', start=(130, 0), end=(130, 1), line='\n')
TokenNode(type=53 (COMMENT), string='# continued string', start=(131, 8), end=(131, 26), line='        # continued string\n')
TokenNode(type=54 (NL), string='\n', start=(131, 26), end=(131, 27), line='        # continued string\n')
TokenNode(type=23 (COMP), string='if', start=(132, 8), end=(132, 10), line='        if contstr:\n')
TokenNode(type=1 (NAME), string='contstr', start=(132, 11), end=(132, 18), line='        if contstr:\n')
TokenNode(type=13 (COLON), string=':', start=(132, 18), end=(132, 19), line='        if contstr:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(132, 19), end=(132, 20), line='        if contstr:\n')
TokenNode(type=5 (INDENT), string='            ', start=(133, 0), end=(133, 12), line='            if not line:\n')
TokenNode(type=23 (COMP), string='if', start=(133, 12), end=(133, 14), line='            if not line:\n')
TokenNode(type=42 (NOT), string='not', start=(133, 15), end=(133, 18), line='            if not line:\n')
TokenNode(type=1 (NAME), string='line', start=(133, 19), end=(133, 23), line='            if not line:\n')
TokenNode(type=13 (COLON), string=':', start=(133, 23), end=(133, 24), line='            if not line:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(133, 24), end=(133, 25), line='            if not line:\n')
TokenNode(type=5 (INDENT), string='                ', start=(134, 0), end=(134, 16), line='                raise TokenError("EOF in multi-line string", strstart)\n')
TokenNode(type=45 (RAISE), string='raise', start=(134, 16), end=(134, 21), line='                raise TokenError("EOF in multi-line string", strstart)\n')
TokenNode(type=1 (NAME), string='TokenError', start=(134, 22), end=(134, 32), line='                raise TokenError("EOF in multi-line string", strstart)\n')
TokenNode(type=7 (LPAR), string='(', start=(134, 32), end=(134, 33), line='                raise TokenError("EOF in multi-line string", strstart)\n')
TokenNode(type=3 (STRING), string='"EOF in multi-line string"', start=(134, 33), end=(134, 59), line='                raise TokenError("EOF in multi-line string", strstart)\n')
TokenNode(type=16 (COMMA), string=',', start=(134, 59), end=(134, 60), line='                raise TokenError("EOF in multi-line string", strstart)\n')
TokenNode(type=1 (NAME), string='strstart', start=(134, 61), end=(134, 69), line='                raise TokenError("EOF in multi-line string", strstart)\n')
TokenNode(type=8 (RPAR), string=')', start=(134, 69), end=(134, 70), line='                raise TokenError("EOF in multi-line string", strstart)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(134, 70), end=(134, 71), line='                raise TokenError("EOF in multi-line string", strstart)\n')
TokenNode(type=6 (DEDENT), string='', start=(135, 12), end=(135, 12), line='            endmatch = endprog.match(line)\n')
TokenNode(type=1 (NAME), string='endmatch', start=(135, 12), end=(135, 20), line='            endmatch = endprog.match(line)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(135, 21), end=(135, 22), line='            endmatch = endprog.match(line)\n')
TokenNode(type=1 (NAME), string='endprog', start=(135, 23), end=(135, 30), line='            endmatch = endprog.match(line)\n')
TokenNode(type=15 (DOT), string='.', start=(135, 30), end=(135, 31), line='            endmatch = endprog.match(line)\n')
TokenNode(type=49 (MATCH), string='match', start=(135, 31), end=(135, 36), line='            endmatch = endprog.match(line)\n')
TokenNode(type=7 (LPAR), string='(', start=(135, 36), end=(135, 37), line='            endmatch = endprog.match(line)\n')
TokenNode(type=1 (NAME), string='line', start=(135, 37), end=(135, 41), line='            endmatch = endprog.match(line)\n')
TokenNode(type=8 (RPAR), string=')', start=(135, 41), end=(135, 42), line='            endmatch = endprog.match(line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(135, 42), end=(135, 43), line='            endmatch = endprog.match(line)\n')
TokenNode(type=23 (COMP), string='if', start=(136, 12), end=(136, 14), line='            if endmatch:\n')
TokenNode(type=1 (NAME), string='endmatch', start=(136, 15), end=(136, 23), line='            if endmatch:\n')
TokenNode(type=13 (COLON), string=':', start=(136, 23), end=(136, 24), line='            if endmatch:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(136, 24), end=(136, 25), line='            if endmatch:\n')
TokenNode(type=5 (INDENT), string='                ', start=(137, 0), end=(137, 16), line='                pos = end = endmatch.end(0)\n')
TokenNode(type=1 (NAME), string='pos', start=(137, 16), end=(137, 19), line='                pos = end = endmatch.end(0)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(137, 20), end=(137, 21), line='                pos = end = endmatch.end(0)\n')
TokenNode(type=1 (NAME), string='end', start=(137, 22), end=(137, 25), line='                pos = end = endmatch.end(0)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(137, 26), end=(137, 27), line='                pos = end = endmatch.end(0)\n')
TokenNode(type=1 (NAME), string='endmatch', start=(137, 28), end=(137, 36), line='                pos = end = endmatch.end(0)\n')
TokenNode(type=15 (DOT), string='.', start=(137, 36), end=(137, 37), line='                pos = end = endmatch.end(0)\n')
TokenNode(type=1 (NAME), string='end', start=(137, 37), end=(137, 40), line='                pos = end = endmatch.end(0)\n')
TokenNode(type=7 (LPAR), string='(', start=(137, 40), end=(137, 41), line='                pos = end = endmatch.end(0)\n')
TokenNode(type=2 (NUMBER), string='0', start=(137, 41), end=(137, 42), line='                pos = end = endmatch.end(0)\n')
TokenNode(type=8 (RPAR), string=')', start=(137, 42), end=(137, 43), line='                pos = end = endmatch.end(0)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(137, 43), end=(137, 44), line='                pos = end = endmatch.end(0)\n')
TokenNode(type=24 (RETURN), string='yield', start=(138, 16), end=(138, 21), line='                yield TokenNode(STRING, contstr + line[:end],\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(138, 22), end=(138, 31), line='                yield TokenNode(STRING, contstr + line[:end],\n')
TokenNode(type=7 (LPAR), string='(', start=(138, 31), end=(138, 32), line='                yield TokenNode(STRING, contstr + line[:end],\n')
TokenNode(type=1 (NAME), string='STRING', start=(138, 32), end=(138, 38), line='                yield TokenNode(STRING, contstr + line[:end],\n')
TokenNode(type=16 (COMMA), string=',', start=(138, 38), end=(138, 39), line='                yield TokenNode(STRING, contstr + line[:end],\n')
TokenNode(type=1 (NAME), string='contstr', start=(138, 40), end=(138, 47), line='                yield TokenNode(STRING, contstr + line[:end],\n')
TokenNode(type=18 (OP), string='+', start=(138, 48), end=(138, 49), line='                yield TokenNode(STRING, contstr + line[:end],\n')
TokenNode(type=1 (NAME), string='line', start=(138, 50), end=(138, 54), line='                yield TokenNode(STRING, contstr + line[:end],\n')
TokenNode(type=9 (LSQB), string='[', start=(138, 54), end=(138, 55), line='                yield TokenNode(STRING, contstr + line[:end],\n')
TokenNode(type=13 (COLON), string=':', start=(138, 55), end=(138, 56), line='                yield TokenNode(STRING, contstr + line[:end],\n')
TokenNode(type=1 (NAME), string='end', start=(138, 56), end=(138, 59), line='                yield TokenNode(STRING, contstr + line[:end],\n')
TokenNode(type=10 (RSQB), string=']', start=(138, 59), end=(138, 60), line='                yield TokenNode(STRING, contstr + line[:end],\n')
TokenNode(type=16 (COMMA), string=',', start=(138, 60), end=(138, 61), line='                yield TokenNode(STRING, contstr + line[:end],\n')
TokenNode(type=54 (NL), string='\n', start=(138, 61), end=(138, 62), line='                yield TokenNode(STRING, contstr + line[:end],\n')
TokenNode(type=1 (NAME), string='strstart', start=(139, 20), end=(139, 28), line='                    strstart, (lnum, end), contline + line)\n')
TokenNode(type=16 (COMMA), string=',', start=(139, 28), end=(139, 29), line='                    strstart, (lnum, end), contline + line)\n')
TokenNode(type=7 (LPAR), string='(', start=(139, 30), end=(139, 31), line='                    strstart, (lnum, end), contline + line)\n')
TokenNode(type=1 (NAME), string='lnum', start=(139, 31), end=(139, 35), line='                    strstart, (lnum, end), contline + line)\n')
TokenNode(type=16 (COMMA), string=',', start=(139, 35), end=(139, 36), line='                    strstart, (lnum, end), contline + line)\n')
TokenNode(type=1 (NAME), string='end', start=(139, 37), end=(139, 40), line='                    strstart, (lnum, end), contline + line)\n')
TokenNode(type=8 (RPAR), string=')', start=(139, 40), end=(139, 41), line='                    strstart, (lnum, end), contline + line)\n')
TokenNode(type=16 (COMMA), string=',', start=(139, 41), end=(139, 42), line='                    strstart, (lnum, end), contline + line)\n')
TokenNode(type=1 (NAME), string='contline', start=(139, 43), end=(139, 51), line='                    strstart, (lnum, end), contline + line)\n')
TokenNode(type=18 (OP), string='+', start=(139, 52), end=(139, 53), line='                    strstart, (lnum, end), contline + line)\n')
TokenNode(type=1 (NAME), string='line', start=(139, 54), end=(139, 58), line='                    strstart, (lnum, end), contline + line)\n')
TokenNode(type=8 (RPAR), string=')', start=(139, 58), end=(139, 59), line='                    strstart, (lnum, end), contline + line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(139, 59), end=(139, 60), line='                    strstart, (lnum, end), contline + line)\n')
TokenNode(type=1 (NAME), string='contstr', start=(140, 16), end=(140, 23), line="                contstr, needcont = '', 0\n")
TokenNode(type=16 (COMMA), string=',', start=(140, 23), end=(140, 24), line="                contstr, needcont = '', 0\n")
TokenNode(type=1 (NAME), string='needcont', start=(140, 25), end=(140, 33), line="                contstr, needcont = '', 0\n")
TokenNode(type=17 (ASSIGN), string='=', start=(140, 34), end=(140, 35), line="                contstr, needcont = '', 0\n")
TokenNode(type=3 (STRING), string="''", start=(140, 36), end=(140, 38), line="                contstr, needcont = '', 0\n")
TokenNode(type=16 (COMMA), string=',', start=(140, 38), end=(140, 39), line="                contstr, needcont = '', 0\n")
TokenNode(type=2 (NUMBER), string='0', start=(140, 40), end=(140, 41), line="                contstr, needcont = '', 0\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(140, 41), end=(140, 42), line="                contstr, needcont = '', 0\n")
TokenNode(type=1 (NAME), string='contline', start=(141, 16), end=(141, 24), line='                contline = None\n')
TokenNode(type=17 (ASSIGN), string='=', start=(141, 25), end=(141, 26), line='                contline = None\n')
TokenNode(type=38 (NONE), string='None', start=(141, 27), end=(141, 31), line='                contline = None\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(141, 31), end=(141, 32), line='                contline = None\n')
TokenNode(type=6 (DEDENT), string='', start=(142, 12), end=(142, 12), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=23 (COMP), string='elif', start=(142, 12), end=(142, 16), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=1 (NAME), string='needcont', start=(142, 17), end=(142, 25), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=25 (AND), string='and', start=(142, 26), end=(142, 29), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=1 (NAME), string='line', start=(142, 30), end=(142, 34), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=9 (LSQB), string='[', start=(142, 34), end=(142, 35), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=18 (OP), string='-', start=(142, 35), end=(142, 36), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=2 (NUMBER), string='2', start=(142, 36), end=(142, 37), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=13 (COLON), string=':', start=(142, 37), end=(142, 38), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=10 (RSQB), string=']', start=(142, 38), end=(142, 39), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=18 (OP), string='!=', start=(142, 40), end=(142, 42), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=3 (STRING), string="'\\\\\\n'", start=(142, 43), end=(142, 49), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=25 (AND), string='and', start=(142, 50), end=(142, 53), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=1 (NAME), string='line', start=(142, 54), end=(142, 58), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=9 (LSQB), string='[', start=(142, 58), end=(142, 59), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=18 (OP), string='-', start=(142, 59), end=(142, 60), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=2 (NUMBER), string='3', start=(142, 60), end=(142, 61), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=13 (COLON), string=':', start=(142, 61), end=(142, 62), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=10 (RSQB), string=']', start=(142, 62), end=(142, 63), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=18 (OP), string='!=', start=(142, 64), end=(142, 66), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=3 (STRING), string="'\\\\\\r\\n'", start=(142, 67), end=(142, 75), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=13 (COLON), string=':', start=(142, 75), end=(142, 76), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(142, 76), end=(142, 77), line="            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n")
TokenNode(type=5 (INDENT), string='                ', start=(143, 0), end=(143, 16), line='                yield TokenNode(ERRORTOKEN, contstr + line,\n')
TokenNode(type=24 (RETURN), string='yield', start=(143, 16), end=(143, 21), line='                yield TokenNode(ERRORTOKEN, contstr + line,\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(143, 22), end=(143, 31), line='                yield TokenNode(ERRORTOKEN, contstr + line,\n')
TokenNode(type=7 (LPAR), string='(', start=(143, 31), end=(143, 32), line='                yield TokenNode(ERRORTOKEN, contstr + line,\n')
TokenNode(type=1 (NAME), string='ERRORTOKEN', start=(143, 32), end=(143, 42), line='                yield TokenNode(ERRORTOKEN, contstr + line,\n')
TokenNode(type=16 (COMMA), string=',', start=(143, 42), end=(143, 43), line='                yield TokenNode(ERRORTOKEN, contstr + line,\n')
TokenNode(type=1 (NAME), string='contstr', start=(143, 44), end=(143, 51), line='                yield TokenNode(ERRORTOKEN, contstr + line,\n')
TokenNode(type=18 (OP), string='+', start=(143, 52), end=(143, 53), line='                yield TokenNode(ERRORTOKEN, contstr + line,\n')
TokenNode(type=1 (NAME), string='line', start=(143, 54), end=(143, 58), line='                yield TokenNode(ERRORTOKEN, contstr + line,\n')
TokenNode(type=16 (COMMA), string=',', start=(143, 58), end=(143, 59), line='                yield TokenNode(ERRORTOKEN, contstr + line,\n')
TokenNode(type=54 (NL), string='\n', start=(143, 59), end=(143, 60), line='                yield TokenNode(ERRORTOKEN, contstr + line,\n')
TokenNode(type=1 (NAME), string='strstart', start=(144, 24), end=(144, 32), line='                        strstart, (lnum, len(line)), contline)\n')
TokenNode(type=16 (COMMA), string=',', start=(144, 32), end=(144, 33), line='                        strstart, (lnum, len(line)), contline)\n')
TokenNode(type=7 (LPAR), string='(', start=(144, 34), end=(144, 35), line='                        strstart, (lnum, len(line)), contline)\n')
TokenNode(type=1 (NAME), string='lnum', start=(144, 35), end=(144, 39), line='                        strstart, (lnum, len(line)), contline)\n')
TokenNode(type=16 (COMMA), string=',', start=(144, 39), end=(144, 40), line='                        strstart, (lnum, len(line)), contline)\n')
TokenNode(type=1 (NAME), string='len', start=(144, 41), end=(144, 44), line='                        strstart, (lnum, len(line)), contline)\n')
TokenNode(type=7 (LPAR), string='(', start=(144, 44), end=(144, 45), line='                        strstart, (lnum, len(line)), contline)\n')
TokenNode(type=1 (NAME), string='line', start=(144, 45), end=(144, 49), line='                        strstart, (lnum, len(line)), contline)\n')
TokenNode(type=8 (RPAR), string=')', start=(144, 49), end=(144, 50), line='                        strstart, (lnum, len(line)), contline)\n')
TokenNode(type=8 (RPAR), string=')', start=(144, 50), end=(144, 51), line='                        strstart, (lnum, len(line)), contline)\n')
TokenNode(type=16 (COMMA), string=',', start=(144, 51), end=(144, 52), line='                        strstart, (lnum, len(line)), contline)\n')
TokenNode(type=1 (NAME), string='contline', start=(144, 53), end=(144, 61), line='                        strstart, (lnum, len(line)), contline)\n')
TokenNode(type=8 (RPAR), string=')', start=(144, 61), end=(144, 62), line='                        strstart, (lnum, len(line)), contline)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(144, 62), end=(144, 63), line='                        strstart, (lnum, len(line)), contline)\n')
TokenNode(type=1 (NAME), string='contstr', start=(145, 16), end=(145, 23), line="                contstr = ''\n")
TokenNode(type=17 (ASSIGN), string='=', start=(145, 24), end=(145, 25), line="                contstr = ''\n")
TokenNode(type=3 (STRING), string="''", start=(145, 26), end=(145, 28), line="                contstr = ''\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(145, 28), end=(145, 29), line="                contstr = ''\n")
TokenNode(type=1 (NAME), string='contline', start=(146, 16), end=(146, 24), line='                contline = None\n')
TokenNode(type=17 (ASSIGN), string='=', start=(146, 25), end=(146, 26), line='                contline = None\n')
TokenNode(type=38 (NONE), string='None', start=(146, 27), end=(146, 31), line='                contline = None\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(146, 31), end=(146, 32), line='                contline = None\n')
TokenNode(type=32 (CONTINUE), string='continue', start=(147, 16), end=(147, 24), line='                continue\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(147, 24), end=(147, 25), line='                continue\n')
TokenNode(type=6 (DEDENT), string='', start=(148, 12), end=(148, 12), line='            else:\n')
TokenNode(type=23 (COMP), string='else', start=(148, 12), end=(148, 16), line='            else:\n')
TokenNode(type=13 (COLON), string=':', start=(148, 16), end=(148, 17), line='            else:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(148, 17), end=(148, 18), line='            else:\n')
TokenNode(type=5 (INDENT), string='                ', start=(149, 0), end=(149, 16), line='                contstr = contstr + line\n')
TokenNode(type=1 (NAME), string='contstr', start=(149, 16), end=(149, 23), line='                contstr = contstr + line\n')
TokenNode(type=17 (ASSIGN), string='=', start=(149, 24), end=(149, 25), line='                contstr = contstr + line\n')
TokenNode(type=1 (NAME), string='contstr', start=(149, 26), end=(149, 33), line='                contstr = contstr + line\n')
TokenNode(type=18 (OP), string='+', start=(149, 34), end=(149, 35), line='                contstr = contstr + line\n')
TokenNode(type=1 (NAME), string='line', start=(149, 36), end=(149, 40), line='                contstr = contstr + line\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(149, 40), end=(149, 41), line='                contstr = contstr + line\n')
TokenNode(type=1 (NAME), string='contline', start=(150, 16), end=(150, 24), line='                contline = contline + line\n')
TokenNode(type=17 (ASSIGN), string='=', start=(150, 25), end=(150, 26), line='                contline = contline + line\n')
TokenNode(type=1 (NAME), string='contline', start=(150, 27), end=(150, 35), line='                contline = contline + line\n')
TokenNode(type=18 (OP), string='+', start=(150, 36), end=(150, 37), line='                contline = contline + line\n')
TokenNode(type=1 (NAME), string='line', start=(150, 38), end=(150, 42), line='                contline = contline + line\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(150, 42), end=(150, 43), line='                contline = contline + line\n')
TokenNode(type=32 (CONTINUE), string='continue', start=(151, 16), end=(151, 24), line='                continue\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(151, 24), end=(151, 25), line='                continue\n')
TokenNode(type=54 (NL), string='\n', start=(152, 0), end=(152, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(153, 8), end=(153, 8), line='        elif parenlev == 0 and not continued:\n')
TokenNode(type=6 (DEDENT), string='', start=(153, 8), end=(153, 8), line='        elif parenlev == 0 and not continued:\n')
TokenNode(type=23 (COMP), string='elif', start=(153, 8), end=(153, 12), line='        elif parenlev == 0 and not continued:\n')
TokenNode(type=1 (NAME), string='parenlev', start=(153, 13), end=(153, 21), line='        elif parenlev == 0 and not continued:\n')
TokenNode(type=17 (ASSIGN), string='==', start=(153, 22), end=(153, 24), line='        elif parenlev == 0 and not continued:\n')
TokenNode(type=2 (NUMBER), string='0', start=(153, 25), end=(153, 26), line='        elif parenlev == 0 and not continued:\n')
TokenNode(type=25 (AND), string='and', start=(153, 27), end=(153, 30), line='        elif parenlev == 0 and not continued:\n')
TokenNode(type=42 (NOT), string='not', start=(153, 31), end=(153, 34), line='        elif parenlev == 0 and not continued:\n')
TokenNode(type=1 (NAME), string='continued', start=(153, 35), end=(153, 44), line='        elif parenlev == 0 and not continued:\n')
TokenNode(type=13 (COLON), string=':', start=(153, 44), end=(153, 45), line='        elif parenlev == 0 and not continued:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(153, 45), end=(153, 46), line='        elif parenlev == 0 and not continued:\n')
TokenNode(type=5 (INDENT), string='            ', start=(154, 0), end=(154, 12), line='            if not line: break\n')
TokenNode(type=23 (COMP), string='if', start=(154, 12), end=(154, 14), line='            if not line: break\n')
TokenNode(type=42 (NOT), string='not', start=(154, 15), end=(154, 18), line='            if not line: break\n')
TokenNode(type=1 (NAME), string='line', start=(154, 19), end=(154, 23), line='            if not line: break\n')
TokenNode(type=13 (COLON), string=':', start=(154, 23), end=(154, 24), line='            if not line: break\n')
TokenNode(type=30 (BREAK), string='break', start=(154, 25), end=(154, 30), line='            if not line: break\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(154, 30), end=(154, 31), line='            if not line: break\n')
TokenNode(type=1 (NAME), string='column', start=(155, 12), end=(155, 18), line='            column = 0\n')
TokenNode(type=17 (ASSIGN), string='=', start=(155, 19), end=(155, 20), line='            column = 0\n')
TokenNode(type=2 (NUMBER), string='0', start=(155, 21), end=(155, 22), line='            column = 0\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(155, 22), end=(155, 23), line='            column = 0\n')
TokenNode(type=22 (LOOP), string='while', start=(156, 12), end=(156, 17), line='            while pos < max:\n')
TokenNode(type=1 (NAME), string='pos', start=(156, 18), end=(156, 21), line='            while pos < max:\n')
TokenNode(type=19 (LOP), string='<', start=(156, 22), end=(156, 23), line='            while pos < max:\n')
TokenNode(type=1 (NAME), string='max', start=(156, 24), end=(156, 27), line='            while pos < max:\n')
TokenNode(type=13 (COLON), string=':', start=(156, 27), end=(156, 28), line='            while pos < max:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(156, 28), end=(156, 29), line='            while pos < max:\n')
TokenNode(type=5 (INDENT), string='                ', start=(157, 0), end=(157, 16), line="                if line[pos] == ' ':\n")
TokenNode(type=23 (COMP), string='if', start=(157, 16), end=(157, 18), line="                if line[pos] == ' ':\n")
TokenNode(type=1 (NAME), string='line', start=(157, 19), end=(157, 23), line="                if line[pos] == ' ':\n")
TokenNode(type=9 (LSQB), string='[', start=(157, 23), end=(157, 24), line="                if line[pos] == ' ':\n")
TokenNode(type=1 (NAME), string='pos', start=(157, 24), end=(157, 27), line="                if line[pos] == ' ':\n")
TokenNode(type=10 (RSQB), string=']', start=(157, 27), end=(157, 28), line="                if line[pos] == ' ':\n")
TokenNode(type=17 (ASSIGN), string='==', start=(157, 29), end=(157, 31), line="                if line[pos] == ' ':\n")
TokenNode(type=3 (STRING), string="' '", start=(157, 32), end=(157, 35), line="                if line[pos] == ' ':\n")
TokenNode(type=13 (COLON), string=':', start=(157, 35), end=(157, 36), line="                if line[pos] == ' ':\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(157, 36), end=(157, 37), line="                if line[pos] == ' ':\n")
TokenNode(type=5 (INDENT), string='                    ', start=(158, 0), end=(158, 20), line='                    column += 1\n')
TokenNode(type=1 (NAME), string='column', start=(158, 20), end=(158, 26), line='                    column += 1\n')
TokenNode(type=18 (OP), string='+=', start=(158, 27), end=(158, 29), line='                    column += 1\n')
TokenNode(type=2 (NUMBER), string='1', start=(158, 30), end=(158, 31), line='                    column += 1\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(158, 31), end=(158, 32), line='                    column += 1\n')
TokenNode(type=6 (DEDENT), string='', start=(159, 16), end=(159, 16), line="                elif line[pos] == '\\t':\n")
TokenNode(type=23 (COMP), string='elif', start=(159, 16), end=(159, 20), line="                elif line[pos] == '\\t':\n")
TokenNode(type=1 (NAME), string='line', start=(159, 21), end=(159, 25), line="                elif line[pos] == '\\t':\n")
TokenNode(type=9 (LSQB), string='[', start=(159, 25), end=(159, 26), line="                elif line[pos] == '\\t':\n")
TokenNode(type=1 (NAME), string='pos', start=(159, 26), end=(159, 29), line="                elif line[pos] == '\\t':\n")
TokenNode(type=10 (RSQB), string=']', start=(159, 29), end=(159, 30), line="                elif line[pos] == '\\t':\n")
TokenNode(type=17 (ASSIGN), string='==', start=(159, 31), end=(159, 33), line="                elif line[pos] == '\\t':\n")
TokenNode(type=3 (STRING), string="'\\t'", start=(159, 34), end=(159, 38), line="                elif line[pos] == '\\t':\n")
TokenNode(type=13 (COLON), string=':', start=(159, 38), end=(159, 39), line="                elif line[pos] == '\\t':\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(159, 39), end=(159, 40), line="                elif line[pos] == '\\t':\n")
TokenNode(type=5 (INDENT), string='                    ', start=(160, 0), end=(160, 20), line='                    column = (column//tabsize + 1)*tabsize\n')
TokenNode(type=1 (NAME), string='column', start=(160, 20), end=(160, 26), line='                    column = (column//tabsize + 1)*tabsize\n')
TokenNode(type=17 (ASSIGN), string='=', start=(160, 27), end=(160, 28), line='                    column = (column//tabsize + 1)*tabsize\n')
TokenNode(type=7 (LPAR), string='(', start=(160, 29), end=(160, 30), line='                    column = (column//tabsize + 1)*tabsize\n')
TokenNode(type=1 (NAME), string='column', start=(160, 30), end=(160, 36), line='                    column = (column//tabsize + 1)*tabsize\n')
TokenNode(type=18 (OP), string='//', start=(160, 36), end=(160, 38), line='                    column = (column//tabsize + 1)*tabsize\n')
TokenNode(type=1 (NAME), string='tabsize', start=(160, 38), end=(160, 45), line='                    column = (column//tabsize + 1)*tabsize\n')
TokenNode(type=18 (OP), string='+', start=(160, 46), end=(160, 47), line='                    column = (column//tabsize + 1)*tabsize\n')
TokenNode(type=2 (NUMBER), string='1', start=(160, 48), end=(160, 49), line='                    column = (column//tabsize + 1)*tabsize\n')
TokenNode(type=8 (RPAR), string=')', start=(160, 49), end=(160, 50), line='                    column = (column//tabsize + 1)*tabsize\n')
TokenNode(type=18 (OP), string='*', start=(160, 50), end=(160, 51), line='                    column = (column//tabsize + 1)*tabsize\n')
TokenNode(type=1 (NAME), string='tabsize', start=(160, 51), end=(160, 58), line='                    column = (column//tabsize + 1)*tabsize\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(160, 58), end=(160, 59), line='                    column = (column//tabsize + 1)*tabsize\n')
TokenNode(type=6 (DEDENT), string='', start=(161, 16), end=(161, 16), line="                elif line[pos] == '\\f':\n")
TokenNode(type=23 (COMP), string='elif', start=(161, 16), end=(161, 20), line="                elif line[pos] == '\\f':\n")
TokenNode(type=1 (NAME), string='line', start=(161, 21), end=(161, 25), line="                elif line[pos] == '\\f':\n")
TokenNode(type=9 (LSQB), string='[', start=(161, 25), end=(161, 26), line="                elif line[pos] == '\\f':\n")
TokenNode(type=1 (NAME), string='pos', start=(161, 26), end=(161, 29), line="                elif line[pos] == '\\f':\n")
TokenNode(type=10 (RSQB), string=']', start=(161, 29), end=(161, 30), line="                elif line[pos] == '\\f':\n")
TokenNode(type=17 (ASSIGN), string='==', start=(161, 31), end=(161, 33), line="                elif line[pos] == '\\f':\n")
TokenNode(type=3 (STRING), string="'\\f'", start=(161, 34), end=(161, 38), line="                elif line[pos] == '\\f':\n")
TokenNode(type=13 (COLON), string=':', start=(161, 38), end=(161, 39), line="                elif line[pos] == '\\f':\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(161, 39), end=(161, 40), line="                elif line[pos] == '\\f':\n")
TokenNode(type=5 (INDENT), string='                    ', start=(162, 0), end=(162, 20), line='                    column = 0\n')
TokenNode(type=1 (NAME), string='column', start=(162, 20), end=(162, 26), line='                    column = 0\n')
TokenNode(type=17 (ASSIGN), string='=', start=(162, 27), end=(162, 28), line='                    column = 0\n')
TokenNode(type=2 (NUMBER), string='0', start=(162, 29), end=(162, 30), line='                    column = 0\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(162, 30), end=(162, 31), line='                    column = 0\n')
TokenNode(type=6 (DEDENT), string='', start=(163, 16), end=(163, 16), line='                else:\n')
TokenNode(type=23 (COMP), string='else', start=(163, 16), end=(163, 20), line='                else:\n')
TokenNode(type=13 (COLON), string=':', start=(163, 20), end=(163, 21), line='                else:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(163, 21), end=(163, 22), line='                else:\n')
TokenNode(type=5 (INDENT), string='                    ', start=(164, 0), end=(164, 20), line='                    break\n')
TokenNode(type=30 (BREAK), string='break', start=(164, 20), end=(164, 25), line='                    break\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(164, 25), end=(164, 26), line='                    break\n')
TokenNode(type=6 (DEDENT), string='', start=(165, 16), end=(165, 16), line='                pos += 1\n')
TokenNode(type=1 (NAME), string='pos', start=(165, 16), end=(165, 19), line='                pos += 1\n')
TokenNode(type=18 (OP), string='+=', start=(165, 20), end=(165, 22), line='                pos += 1\n')
TokenNode(type=2 (NUMBER), string='1', start=(165, 23), end=(165, 24), line='                pos += 1\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(165, 24), end=(165, 25), line='                pos += 1\n')
TokenNode(type=6 (DEDENT), string='', start=(166, 12), end=(166, 12), line='            if pos == max:\n')
TokenNode(type=23 (COMP), string='if', start=(166, 12), end=(166, 14), line='            if pos == max:\n')
TokenNode(type=1 (NAME), string='pos', start=(166, 15), end=(166, 18), line='            if pos == max:\n')
TokenNode(type=17 (ASSIGN), string='==', start=(166, 19), end=(166, 21), line='            if pos == max:\n')
TokenNode(type=1 (NAME), string='max', start=(166, 22), end=(166, 25), line='            if pos == max:\n')
TokenNode(type=13 (COLON), string=':', start=(166, 25), end=(166, 26), line='            if pos == max:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(166, 26), end=(166, 27), line='            if pos == max:\n')
TokenNode(type=5 (INDENT), string='                ', start=(167, 0), end=(167, 16), line='                break\n')
TokenNode(type=30 (BREAK), string='break', start=(167, 16), end=(167, 21), line='                break\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(167, 21), end=(167, 22), line='                break\n')
TokenNode(type=54 (NL), string='\n', start=(168, 0), end=(168, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(169, 12), end=(169, 12), line="            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n")
TokenNode(type=23 (COMP), string='if', start=(169, 12), end=(169, 14), line="            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n")
TokenNode(type=1 (NAME), string='line', start=(169, 15), end=(169, 19), line="            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n")
TokenNode(type=9 (LSQB), string='[', start=(169, 19), end=(169, 20), line="            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n")
TokenNode(type=1 (NAME), string='pos', start=(169, 20), end=(169, 23), line="            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n")
TokenNode(type=10 (RSQB), string=']', start=(169, 23), end=(169, 24), line="            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n")
TokenNode(type=1 (NAME), string='in', start=(169, 25), end=(169, 27), line="            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n")
TokenNode(type=3 (STRING), string="'#\\r\\n'", start=(169, 28), end=(169, 35), line="            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n")
TokenNode(type=13 (COLON), string=':', start=(169, 35), end=(169, 36), line="            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n")
TokenNode(type=53 (COMMENT), string='# skip comments or blank lines', start=(169, 47), end=(169, 77), line="            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(169, 77), end=(169, 78), line="            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n")
TokenNode(type=5 (INDENT), string='                ', start=(170, 0), end=(170, 16), line="                if line[pos] == '#':\n")
TokenNode(type=23 (COMP), string='if', start=(170, 16), end=(170, 18), line="                if line[pos] == '#':\n")
TokenNode(type=1 (NAME), string='line', start=(170, 19), end=(170, 23), line="                if line[pos] == '#':\n")
TokenNode(type=9 (LSQB), string='[', start=(170, 23), end=(170, 24), line="                if line[pos] == '#':\n")
TokenNode(type=1 (NAME), string='pos', start=(170, 24), end=(170, 27), line="                if line[pos] == '#':\n")
TokenNode(type=10 (RSQB), string=']', start=(170, 27), end=(170, 28), line="                if line[pos] == '#':\n")
TokenNode(type=17 (ASSIGN), string='==', start=(170, 29), end=(170, 31), line="                if line[pos] == '#':\n")
TokenNode(type=3 (STRING), string="'#'", start=(170, 32), end=(170, 35), line="                if line[pos] == '#':\n")
TokenNode(type=13 (COLON), string=':', start=(170, 35), end=(170, 36), line="                if line[pos] == '#':\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(170, 36), end=(170, 37), line="                if line[pos] == '#':\n")
TokenNode(type=5 (INDENT), string='                    ', start=(171, 0), end=(171, 20), line="                    comment_token = line[pos:].rstrip('\\r\\n')\n")
TokenNode(type=1 (NAME), string='comment_token', start=(171, 20), end=(171, 33), line="                    comment_token = line[pos:].rstrip('\\r\\n')\n")
TokenNode(type=17 (ASSIGN), string='=', start=(171, 34), end=(171, 35), line="                    comment_token = line[pos:].rstrip('\\r\\n')\n")
TokenNode(type=1 (NAME), string='line', start=(171, 36), end=(171, 40), line="                    comment_token = line[pos:].rstrip('\\r\\n')\n")
TokenNode(type=9 (LSQB), string='[', start=(171, 40), end=(171, 41), line="                    comment_token = line[pos:].rstrip('\\r\\n')\n")
TokenNode(type=1 (NAME), string='pos', start=(171, 41), end=(171, 44), line="                    comment_token = line[pos:].rstrip('\\r\\n')\n")
TokenNode(type=13 (COLON), string=':', start=(171, 44), end=(171, 45), line="                    comment_token = line[pos:].rstrip('\\r\\n')\n")
TokenNode(type=10 (RSQB), string=']', start=(171, 45), end=(171, 46), line="                    comment_token = line[pos:].rstrip('\\r\\n')\n")
TokenNode(type=15 (DOT), string='.', start=(171, 46), end=(171, 47), line="                    comment_token = line[pos:].rstrip('\\r\\n')\n")
TokenNode(type=1 (NAME), string='rstrip', start=(171, 47), end=(171, 53), line="                    comment_token = line[pos:].rstrip('\\r\\n')\n")
TokenNode(type=7 (LPAR), string='(', start=(171, 53), end=(171, 54), line="                    comment_token = line[pos:].rstrip('\\r\\n')\n")
TokenNode(type=3 (STRING), string="'\\r\\n'", start=(171, 54), end=(171, 60), line="                    comment_token = line[pos:].rstrip('\\r\\n')\n")
TokenNode(type=8 (RPAR), string=')', start=(171, 60), end=(171, 61), line="                    comment_token = line[pos:].rstrip('\\r\\n')\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(171, 61), end=(171, 62), line="                    comment_token = line[pos:].rstrip('\\r\\n')\n")
TokenNode(type=24 (RETURN), string='yield', start=(172, 20), end=(172, 25), line='                    yield TokenNode(COMMENT, comment_token,\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(172, 26), end=(172, 35), line='                    yield TokenNode(COMMENT, comment_token,\n')
TokenNode(type=7 (LPAR), string='(', start=(172, 35), end=(172, 36), line='                    yield TokenNode(COMMENT, comment_token,\n')
TokenNode(type=1 (NAME), string='COMMENT', start=(172, 36), end=(172, 43), line='                    yield TokenNode(COMMENT, comment_token,\n')
TokenNode(type=16 (COMMA), string=',', start=(172, 43), end=(172, 44), line='                    yield TokenNode(COMMENT, comment_token,\n')
TokenNode(type=1 (NAME), string='comment_token', start=(172, 45), end=(172, 58), line='                    yield TokenNode(COMMENT, comment_token,\n')
TokenNode(type=16 (COMMA), string=',', start=(172, 58), end=(172, 59), line='                    yield TokenNode(COMMENT, comment_token,\n')
TokenNode(type=54 (NL), string='\n', start=(172, 59), end=(172, 60), line='                    yield TokenNode(COMMENT, comment_token,\n')
TokenNode(type=7 (LPAR), string='(', start=(173, 24), end=(173, 25), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=1 (NAME), string='lnum', start=(173, 25), end=(173, 29), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(173, 29), end=(173, 30), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=1 (NAME), string='pos', start=(173, 31), end=(173, 34), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(173, 34), end=(173, 35), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(173, 35), end=(173, 36), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=7 (LPAR), string='(', start=(173, 37), end=(173, 38), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=1 (NAME), string='lnum', start=(173, 38), end=(173, 42), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(173, 42), end=(173, 43), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=1 (NAME), string='pos', start=(173, 44), end=(173, 47), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=18 (OP), string='+', start=(173, 48), end=(173, 49), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=1 (NAME), string='len', start=(173, 50), end=(173, 53), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=7 (LPAR), string='(', start=(173, 53), end=(173, 54), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=1 (NAME), string='comment_token', start=(173, 54), end=(173, 67), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(173, 67), end=(173, 68), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(173, 68), end=(173, 69), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(173, 69), end=(173, 70), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=1 (NAME), string='line', start=(173, 71), end=(173, 75), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(173, 75), end=(173, 76), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(173, 76), end=(173, 77), line='                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n')
TokenNode(type=1 (NAME), string='pos', start=(174, 20), end=(174, 23), line='                    pos += len(comment_token)\n')
TokenNode(type=18 (OP), string='+=', start=(174, 24), end=(174, 26), line='                    pos += len(comment_token)\n')
TokenNode(type=1 (NAME), string='len', start=(174, 27), end=(174, 30), line='                    pos += len(comment_token)\n')
TokenNode(type=7 (LPAR), string='(', start=(174, 30), end=(174, 31), line='                    pos += len(comment_token)\n')
TokenNode(type=1 (NAME), string='comment_token', start=(174, 31), end=(174, 44), line='                    pos += len(comment_token)\n')
TokenNode(type=8 (RPAR), string=')', start=(174, 44), end=(174, 45), line='                    pos += len(comment_token)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(174, 45), end=(174, 46), line='                    pos += len(comment_token)\n')
TokenNode(type=54 (NL), string='\n', start=(175, 0), end=(175, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(176, 16), end=(176, 16), line='                yield TokenNode(NL, line[pos:],\n')
TokenNode(type=24 (RETURN), string='yield', start=(176, 16), end=(176, 21), line='                yield TokenNode(NL, line[pos:],\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(176, 22), end=(176, 31), line='                yield TokenNode(NL, line[pos:],\n')
TokenNode(type=7 (LPAR), string='(', start=(176, 31), end=(176, 32), line='                yield TokenNode(NL, line[pos:],\n')
TokenNode(type=1 (NAME), string='NL', start=(176, 32), end=(176, 34), line='                yield TokenNode(NL, line[pos:],\n')
TokenNode(type=16 (COMMA), string=',', start=(176, 34), end=(176, 35), line='                yield TokenNode(NL, line[pos:],\n')
TokenNode(type=1 (NAME), string='line', start=(176, 36), end=(176, 40), line='                yield TokenNode(NL, line[pos:],\n')
TokenNode(type=9 (LSQB), string='[', start=(176, 40), end=(176, 41), line='                yield TokenNode(NL, line[pos:],\n')
TokenNode(type=1 (NAME), string='pos', start=(176, 41), end=(176, 44), line='                yield TokenNode(NL, line[pos:],\n')
TokenNode(type=13 (COLON), string=':', start=(176, 44), end=(176, 45), line='                yield TokenNode(NL, line[pos:],\n')
TokenNode(type=10 (RSQB), string=']', start=(176, 45), end=(176, 46), line='                yield TokenNode(NL, line[pos:],\n')
TokenNode(type=16 (COMMA), string=',', start=(176, 46), end=(176, 47), line='                yield TokenNode(NL, line[pos:],\n')
TokenNode(type=54 (NL), string='\n', start=(176, 47), end=(176, 48), line='                yield TokenNode(NL, line[pos:],\n')
TokenNode(type=7 (LPAR), string='(', start=(177, 24), end=(177, 25), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=1 (NAME), string='lnum', start=(177, 25), end=(177, 29), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(177, 29), end=(177, 30), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=1 (NAME), string='pos', start=(177, 31), end=(177, 34), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(177, 34), end=(177, 35), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(177, 35), end=(177, 36), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=7 (LPAR), string='(', start=(177, 37), end=(177, 38), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=1 (NAME), string='lnum', start=(177, 38), end=(177, 42), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(177, 42), end=(177, 43), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=1 (NAME), string='len', start=(177, 44), end=(177, 47), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=7 (LPAR), string='(', start=(177, 47), end=(177, 48), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=1 (NAME), string='line', start=(177, 48), end=(177, 52), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(177, 52), end=(177, 53), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(177, 53), end=(177, 54), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(177, 54), end=(177, 55), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=1 (NAME), string='line', start=(177, 56), end=(177, 60), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(177, 60), end=(177, 61), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(177, 61), end=(177, 62), line='                        (lnum, pos), (lnum, len(line)), line)\n')
TokenNode(type=32 (CONTINUE), string='continue', start=(178, 16), end=(178, 24), line='                continue\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(178, 24), end=(178, 25), line='                continue\n')
TokenNode(type=54 (NL), string='\n', start=(179, 0), end=(179, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(180, 12), end=(180, 12), line='            if column > indents[-1]:           # count indents or dedents\n')
TokenNode(type=23 (COMP), string='if', start=(180, 12), end=(180, 14), line='            if column > indents[-1]:           # count indents or dedents\n')
TokenNode(type=1 (NAME), string='column', start=(180, 15), end=(180, 21), line='            if column > indents[-1]:           # count indents or dedents\n')
TokenNode(type=19 (LOP), string='>', start=(180, 22), end=(180, 23), line='            if column > indents[-1]:           # count indents or dedents\n')
TokenNode(type=1 (NAME), string='indents', start=(180, 24), end=(180, 31), line='            if column > indents[-1]:           # count indents or dedents\n')
TokenNode(type=9 (LSQB), string='[', start=(180, 31), end=(180, 32), line='            if column > indents[-1]:           # count indents or dedents\n')
TokenNode(type=18 (OP), string='-', start=(180, 32), end=(180, 33), line='            if column > indents[-1]:           # count indents or dedents\n')
TokenNode(type=2 (NUMBER), string='1', start=(180, 33), end=(180, 34), line='            if column > indents[-1]:           # count indents or dedents\n')
TokenNode(type=10 (RSQB), string=']', start=(180, 34), end=(180, 35), line='            if column > indents[-1]:           # count indents or dedents\n')
TokenNode(type=13 (COLON), string=':', start=(180, 35), end=(180, 36), line='            if column > indents[-1]:           # count indents or dedents\n')
TokenNode(type=53 (COMMENT), string='# count indents or dedents', start=(180, 47), end=(180, 73), line='            if column > indents[-1]:           # count indents or dedents\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(180, 73), end=(180, 74), line='            if column > indents[-1]:           # count indents or dedents\n')
TokenNode(type=5 (INDENT), string='                ', start=(181, 0), end=(181, 16), line='                indents.append(column)\n')
TokenNode(type=1 (NAME), string='indents', start=(181, 16), end=(181, 23), line='                indents.append(column)\n')
TokenNode(type=15 (DOT), string='.', start=(181, 23), end=(181, 24), line='                indents.append(column)\n')
TokenNode(type=1 (NAME), string='append', start=(181, 24), end=(181, 30), line='                indents.append(column)\n')
TokenNode(type=7 (LPAR), string='(', start=(181, 30), end=(181, 31), line='                indents.append(column)\n')
TokenNode(type=1 (NAME), string='column', start=(181, 31), end=(181, 37), line='                indents.append(column)\n')
TokenNode(type=8 (RPAR), string=')', start=(181, 37), end=(181, 38), line='                indents.append(column)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(181, 38), end=(181, 39), line='                indents.append(column)\n')
TokenNode(type=24 (RETURN), string='yield', start=(182, 16), end=(182, 21), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(182, 22), end=(182, 31), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=7 (LPAR), string='(', start=(182, 31), end=(182, 32), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='INDENT', start=(182, 32), end=(182, 38), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(182, 38), end=(182, 39), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='line', start=(182, 40), end=(182, 44), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=9 (LSQB), string='[', start=(182, 44), end=(182, 45), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=13 (COLON), string=':', start=(182, 45), end=(182, 46), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='pos', start=(182, 46), end=(182, 49), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=10 (RSQB), string=']', start=(182, 49), end=(182, 50), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(182, 50), end=(182, 51), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=7 (LPAR), string='(', start=(182, 52), end=(182, 53), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='lnum', start=(182, 53), end=(182, 57), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(182, 57), end=(182, 58), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=2 (NUMBER), string='0', start=(182, 59), end=(182, 60), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(182, 60), end=(182, 61), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(182, 61), end=(182, 62), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=7 (LPAR), string='(', start=(182, 63), end=(182, 64), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='lnum', start=(182, 64), end=(182, 68), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(182, 68), end=(182, 69), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='pos', start=(182, 70), end=(182, 73), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(182, 73), end=(182, 74), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(182, 74), end=(182, 75), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='line', start=(182, 76), end=(182, 80), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(182, 80), end=(182, 81), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(182, 81), end=(182, 82), line='                yield TokenNode(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n')
TokenNode(type=6 (DEDENT), string='', start=(183, 12), end=(183, 12), line='            while column < indents[-1]:\n')
TokenNode(type=22 (LOOP), string='while', start=(183, 12), end=(183, 17), line='            while column < indents[-1]:\n')
TokenNode(type=1 (NAME), string='column', start=(183, 18), end=(183, 24), line='            while column < indents[-1]:\n')
TokenNode(type=19 (LOP), string='<', start=(183, 25), end=(183, 26), line='            while column < indents[-1]:\n')
TokenNode(type=1 (NAME), string='indents', start=(183, 27), end=(183, 34), line='            while column < indents[-1]:\n')
TokenNode(type=9 (LSQB), string='[', start=(183, 34), end=(183, 35), line='            while column < indents[-1]:\n')
TokenNode(type=18 (OP), string='-', start=(183, 35), end=(183, 36), line='            while column < indents[-1]:\n')
TokenNode(type=2 (NUMBER), string='1', start=(183, 36), end=(183, 37), line='            while column < indents[-1]:\n')
TokenNode(type=10 (RSQB), string=']', start=(183, 37), end=(183, 38), line='            while column < indents[-1]:\n')
TokenNode(type=13 (COLON), string=':', start=(183, 38), end=(183, 39), line='            while column < indents[-1]:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(183, 39), end=(183, 40), line='            while column < indents[-1]:\n')
TokenNode(type=5 (INDENT), string='                ', start=(184, 0), end=(184, 16), line='                if column not in indents:\n')
TokenNode(type=23 (COMP), string='if', start=(184, 16), end=(184, 18), line='                if column not in indents:\n')
TokenNode(type=1 (NAME), string='column', start=(184, 19), end=(184, 25), line='                if column not in indents:\n')
TokenNode(type=42 (NOT), string='not', start=(184, 26), end=(184, 29), line='                if column not in indents:\n')
TokenNode(type=1 (NAME), string='in', start=(184, 30), end=(184, 32), line='                if column not in indents:\n')
TokenNode(type=1 (NAME), string='indents', start=(184, 33), end=(184, 40), line='                if column not in indents:\n')
TokenNode(type=13 (COLON), string=':', start=(184, 40), end=(184, 41), line='                if column not in indents:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(184, 41), end=(184, 42), line='                if column not in indents:\n')
TokenNode(type=5 (INDENT), string='                    ', start=(185, 0), end=(185, 20), line='                    raise IndentationError(\n')
TokenNode(type=45 (RAISE), string='raise', start=(185, 20), end=(185, 25), line='                    raise IndentationError(\n')
TokenNode(type=1 (NAME), string='IndentationError', start=(185, 26), end=(185, 42), line='                    raise IndentationError(\n')
TokenNode(type=7 (LPAR), string='(', start=(185, 42), end=(185, 43), line='                    raise IndentationError(\n')
TokenNode(type=54 (NL), string='\n', start=(185, 43), end=(185, 44), line='                    raise IndentationError(\n')
TokenNode(type=3 (STRING), string='"unindent does not match any outer indentation level"', start=(186, 24), end=(186, 77), line='                        "unindent does not match any outer indentation level",\n')
TokenNode(type=16 (COMMA), string=',', start=(186, 77), end=(186, 78), line='                        "unindent does not match any outer indentation level",\n')
TokenNode(type=54 (NL), string='\n', start=(186, 78), end=(186, 79), line='                        "unindent does not match any outer indentation level",\n')
TokenNode(type=7 (LPAR), string='(', start=(187, 24), end=(187, 25), line='                        ("<tokenize>", lnum, pos, line))\n')
TokenNode(type=3 (STRING), string='"<tokenize>"', start=(187, 25), end=(187, 37), line='                        ("<tokenize>", lnum, pos, line))\n')
TokenNode(type=16 (COMMA), string=',', start=(187, 37), end=(187, 38), line='                        ("<tokenize>", lnum, pos, line))\n')
TokenNode(type=1 (NAME), string='lnum', start=(187, 39), end=(187, 43), line='                        ("<tokenize>", lnum, pos, line))\n')
TokenNode(type=16 (COMMA), string=',', start=(187, 43), end=(187, 44), line='                        ("<tokenize>", lnum, pos, line))\n')
TokenNode(type=1 (NAME), string='pos', start=(187, 45), end=(187, 48), line='                        ("<tokenize>", lnum, pos, line))\n')
TokenNode(type=16 (COMMA), string=',', start=(187, 48), end=(187, 49), line='                        ("<tokenize>", lnum, pos, line))\n')
TokenNode(type=1 (NAME), string='line', start=(187, 50), end=(187, 54), line='                        ("<tokenize>", lnum, pos, line))\n')
TokenNode(type=8 (RPAR), string=')', start=(187, 54), end=(187, 55), line='                        ("<tokenize>", lnum, pos, line))\n')
TokenNode(type=8 (RPAR), string=')', start=(187, 55), end=(187, 56), line='                        ("<tokenize>", lnum, pos, line))\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(187, 56), end=(187, 57), line='                        ("<tokenize>", lnum, pos, line))\n')
TokenNode(type=6 (DEDENT), string='', start=(188, 16), end=(188, 16), line='                indents = indents[:-1]\n')
TokenNode(type=1 (NAME), string='indents', start=(188, 16), end=(188, 23), line='                indents = indents[:-1]\n')
TokenNode(type=17 (ASSIGN), string='=', start=(188, 24), end=(188, 25), line='                indents = indents[:-1]\n')
TokenNode(type=1 (NAME), string='indents', start=(188, 26), end=(188, 33), line='                indents = indents[:-1]\n')
TokenNode(type=9 (LSQB), string='[', start=(188, 33), end=(188, 34), line='                indents = indents[:-1]\n')
TokenNode(type=13 (COLON), string=':', start=(188, 34), end=(188, 35), line='                indents = indents[:-1]\n')
TokenNode(type=18 (OP), string='-', start=(188, 35), end=(188, 36), line='                indents = indents[:-1]\n')
TokenNode(type=2 (NUMBER), string='1', start=(188, 36), end=(188, 37), line='                indents = indents[:-1]\n')
TokenNode(type=10 (RSQB), string=']', start=(188, 37), end=(188, 38), line='                indents = indents[:-1]\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(188, 38), end=(188, 39), line='                indents = indents[:-1]\n')
TokenNode(type=54 (NL), string='\n', start=(189, 0), end=(189, 1), line='\n')
TokenNode(type=24 (RETURN), string='yield', start=(190, 16), end=(190, 21), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=1 (NAME), string='TokenNode', start=(190, 22), end=(190, 31), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=7 (LPAR), string='(', start=(190, 31), end=(190, 32), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=1 (NAME), string='DEDENT', start=(190, 32), end=(190, 38), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=16 (COMMA), string=',', start=(190, 38), end=(190, 39), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=3 (STRING), string="''", start=(190, 40), end=(190, 42), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=16 (COMMA), string=',', start=(190, 42), end=(190, 43), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=7 (LPAR), string='(', start=(190, 44), end=(190, 45), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=1 (NAME), string='lnum', start=(190, 45), end=(190, 49), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=16 (COMMA), string=',', start=(190, 49), end=(190, 50), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=1 (NAME), string='pos', start=(190, 51), end=(190, 54), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=8 (RPAR), string=')', start=(190, 54), end=(190, 55), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=16 (COMMA), string=',', start=(190, 55), end=(190, 56), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=7 (LPAR), string='(', start=(190, 57), end=(190, 58), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=1 (NAME), string='lnum', start=(190, 58), end=(190, 62), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=16 (COMMA), string=',', start=(190, 62), end=(190, 63), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=1 (NAME), string='pos', start=(190, 64), end=(190, 67), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=8 (RPAR), string=')', start=(190, 67), end=(190, 68), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=16 (COMMA), string=',', start=(190, 68), end=(190, 69), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=1 (NAME), string='line', start=(190, 70), end=(190, 74), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=8 (RPAR), string=')', start=(190, 74), end=(190, 75), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(190, 75), end=(190, 76), line="                yield TokenNode(DEDENT, '', (lnum, pos), (lnum, pos), line)\n")
TokenNode(type=54 (NL), string='\n', start=(191, 0), end=(191, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(192, 8), end=(192, 8), line='        else:                                  # continued statement\n')
TokenNode(type=6 (DEDENT), string='', start=(192, 8), end=(192, 8), line='        else:                                  # continued statement\n')
TokenNode(type=23 (COMP), string='else', start=(192, 8), end=(192, 12), line='        else:                                  # continued statement\n')
TokenNode(type=13 (COLON), string=':', start=(192, 12), end=(192, 13), line='        else:                                  # continued statement\n')
TokenNode(type=53 (COMMENT), string='# continued statement', start=(192, 47), end=(192, 68), line='        else:                                  # continued statement\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(192, 68), end=(192, 69), line='        else:                                  # continued statement\n')
TokenNode(type=5 (INDENT), string='            ', start=(193, 0), end=(193, 12), line='            if not line:\n')
TokenNode(type=23 (COMP), string='if', start=(193, 12), end=(193, 14), line='            if not line:\n')
TokenNode(type=42 (NOT), string='not', start=(193, 15), end=(193, 18), line='            if not line:\n')
TokenNode(type=1 (NAME), string='line', start=(193, 19), end=(193, 23), line='            if not line:\n')
TokenNode(type=13 (COLON), string=':', start=(193, 23), end=(193, 24), line='            if not line:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(193, 24), end=(193, 25), line='            if not line:\n')
TokenNode(type=5 (INDENT), string='                ', start=(194, 0), end=(194, 16), line='                raise TokenError("EOF in multi-line statement", (lnum, 0))\n')
TokenNode(type=45 (RAISE), string='raise', start=(194, 16), end=(194, 21), line='                raise TokenError("EOF in multi-line statement", (lnum, 0))\n')
TokenNode(type=1 (NAME), string='TokenError', start=(194, 22), end=(194, 32), line='                raise TokenError("EOF in multi-line statement", (lnum, 0))\n')
TokenNode(type=7 (LPAR), string='(', start=(194, 32), end=(194, 33), line='                raise TokenError("EOF in multi-line statement", (lnum, 0))\n')
TokenNode(type=3 (STRING), string='"EOF in multi-line statement"', start=(194, 33), end=(194, 62), line='                raise TokenError("EOF in multi-line statement", (lnum, 0))\n')
TokenNode(type=16 (COMMA), string=',', start=(194, 62), end=(194, 63), line='                raise TokenError("EOF in multi-line statement", (lnum, 0))\n')
TokenNode(type=7 (LPAR), string='(', start=(194, 64), end=(194, 65), line='                raise TokenError("EOF in multi-line statement", (lnum, 0))\n')
TokenNode(type=1 (NAME), string='lnum', start=(194, 65), end=(194, 69), line='                raise TokenError("EOF in multi-line statement", (lnum, 0))\n')
TokenNode(type=16 (COMMA), string=',', start=(194, 69), end=(194, 70), line='                raise TokenError("EOF in multi-line statement", (lnum, 0))\n')
TokenNode(type=2 (NUMBER), string='0', start=(194, 71), end=(194, 72), line='                raise TokenError("EOF in multi-line statement", (lnum, 0))\n')
TokenNode(type=8 (RPAR), string=')', start=(194, 72), end=(194, 73), line='                raise TokenError("EOF in multi-line statement", (lnum, 0))\n')
TokenNode(type=8 (RPAR), string=')', start=(194, 73), end=(194, 74), line='                raise TokenError("EOF in multi-line statement", (lnum, 0))\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(194, 74), end=(194, 75), line='                raise TokenError("EOF in multi-line statement", (lnum, 0))\n')
TokenNode(type=6 (DEDENT), string='', start=(195, 12), end=(195, 12), line='            continued = 0\n')
TokenNode(type=1 (NAME), string='continued', start=(195, 12), end=(195, 21), line='            continued = 0\n')
TokenNode(type=17 (ASSIGN), string='=', start=(195, 22), end=(195, 23), line='            continued = 0\n')
TokenNode(type=2 (NUMBER), string='0', start=(195, 24), end=(195, 25), line='            continued = 0\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(195, 25), end=(195, 26), line='            continued = 0\n')
TokenNode(type=54 (NL), string='\n', start=(196, 0), end=(196, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(197, 8), end=(197, 8), line='        while pos < max:\n')
TokenNode(type=22 (LOOP), string='while', start=(197, 8), end=(197, 13), line='        while pos < max:\n')
TokenNode(type=1 (NAME), string='pos', start=(197, 14), end=(197, 17), line='        while pos < max:\n')
TokenNode(type=19 (LOP), string='<', start=(197, 18), end=(197, 19), line='        while pos < max:\n')
TokenNode(type=1 (NAME), string='max', start=(197, 20), end=(197, 23), line='        while pos < max:\n')
TokenNode(type=13 (COLON), string=':', start=(197, 23), end=(197, 24), line='        while pos < max:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(197, 24), end=(197, 25), line='        while pos < max:\n')
TokenNode(type=5 (INDENT), string='            ', start=(198, 0), end=(198, 12), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=1 (NAME), string='pseudomatch', start=(198, 12), end=(198, 23), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(198, 24), end=(198, 25), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=1 (NAME), string='_compile', start=(198, 26), end=(198, 34), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=7 (LPAR), string='(', start=(198, 34), end=(198, 35), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=1 (NAME), string='PseudoToken', start=(198, 35), end=(198, 46), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=8 (RPAR), string=')', start=(198, 46), end=(198, 47), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=15 (DOT), string='.', start=(198, 47), end=(198, 48), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=49 (MATCH), string='match', start=(198, 48), end=(198, 53), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=7 (LPAR), string='(', start=(198, 53), end=(198, 54), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=1 (NAME), string='line', start=(198, 54), end=(198, 58), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=16 (COMMA), string=',', start=(198, 58), end=(198, 59), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=1 (NAME), string='pos', start=(198, 60), end=(198, 63), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=8 (RPAR), string=')', start=(198, 63), end=(198, 64), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(198, 64), end=(198, 65), line='            pseudomatch = _compile(PseudoToken).match(line, pos)\n')
TokenNode(type=23 (COMP), string='if', start=(199, 12), end=(199, 14), line='            if pseudomatch:                                # scan for tokens\n')
TokenNode(type=1 (NAME), string='pseudomatch', start=(199, 15), end=(199, 26), line='            if pseudomatch:                                # scan for tokens\n')
TokenNode(type=13 (COLON), string=':', start=(199, 26), end=(199, 27), line='            if pseudomatch:                                # scan for tokens\n')
TokenNode(type=53 (COMMENT), string='# scan for tokens', start=(199, 59), end=(199, 76), line='            if pseudomatch:                                # scan for tokens\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(199, 76), end=(199, 77), line='            if pseudomatch:                                # scan for tokens\n')
TokenNode(type=5 (INDENT), string='                ', start=(200, 0), end=(200, 16), line='                start, end = pseudomatch.span(1)\n')
TokenNode(type=1 (NAME), string='start', start=(200, 16), end=(200, 21), line='                start, end = pseudomatch.span(1)\n')
TokenNode(type=16 (COMMA), string=',', start=(200, 21), end=(200, 22), line='                start, end = pseudomatch.span(1)\n')
TokenNode(type=1 (NAME), string='end', start=(200, 23), end=(200, 26), line='                start, end = pseudomatch.span(1)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(200, 27), end=(200, 28), line='                start, end = pseudomatch.span(1)\n')
TokenNode(type=1 (NAME), string='pseudomatch', start=(200, 29), end=(200, 40), line='                start, end = pseudomatch.span(1)\n')
TokenNode(type=15 (DOT), string='.', start=(200, 40), end=(200, 41), line='                start, end = pseudomatch.span(1)\n')
TokenNode(type=1 (NAME), string='span', start=(200, 41), end=(200, 45), line='                start, end = pseudomatch.span(1)\n')
TokenNode(type=7 (LPAR), string='(', start=(200, 45), end=(200, 46), line='                start, end = pseudomatch.span(1)\n')
TokenNode(type=2 (NUMBER), string='1', start=(200, 46), end=(200, 47), line='                start, end = pseudomatch.span(1)\n')
TokenNode(type=8 (RPAR), string=')', start=(200, 47), end=(200, 48), line='                start, end = pseudomatch.span(1)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(200, 48), end=(200, 49), line='                start, end = pseudomatch.span(1)\n')
TokenNode(type=1 (NAME), string='spos', start=(201, 16), end=(201, 20), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=16 (COMMA), string=',', start=(201, 20), end=(201, 21), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=1 (NAME), string='epos', start=(201, 22), end=(201, 26), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=16 (COMMA), string=',', start=(201, 26), end=(201, 27), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=1 (NAME), string='pos', start=(201, 28), end=(201, 31), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=17 (ASSIGN), string='=', start=(201, 32), end=(201, 33), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=7 (LPAR), string='(', start=(201, 34), end=(201, 35), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=1 (NAME), string='lnum', start=(201, 35), end=(201, 39), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=16 (COMMA), string=',', start=(201, 39), end=(201, 40), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=1 (NAME), string='start', start=(201, 41), end=(201, 46), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=8 (RPAR), string=')', start=(201, 46), end=(201, 47), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=16 (COMMA), string=',', start=(201, 47), end=(201, 48), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=7 (LPAR), string='(', start=(201, 49), end=(201, 50), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=1 (NAME), string='lnum', start=(201, 50), end=(201, 54), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=16 (COMMA), string=',', start=(201, 54), end=(201, 55), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=1 (NAME), string='end', start=(201, 56), end=(201, 59), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=8 (RPAR), string=')', start=(201, 59), end=(201, 60), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=16 (COMMA), string=',', start=(201, 60), end=(201, 61), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=1 (NAME), string='end', start=(201, 62), end=(201, 65), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(201, 65), end=(201, 66), line='                spos, epos, pos = (lnum, start), (lnum, end), end\n')
TokenNode(type=23 (COMP), string='if', start=(202, 16), end=(202, 18), line='                if start == end:\n')
TokenNode(type=1 (NAME), string='start', start=(202, 19), end=(202, 24), line='                if start == end:\n')
TokenNode(type=17 (ASSIGN), string='==', start=(202, 25), end=(202, 27), line='                if start == end:\n')
TokenNode(type=1 (NAME), string='end', start=(202, 28), end=(202, 31), line='                if start == end:\n')
TokenNode(type=13 (COLON), string=':', start=(202, 31), end=(202, 32), line='                if start == end:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(202, 32), end=(202, 33), line='                if start == end:\n')
TokenNode(type=5 (INDENT), string='                    ', start=(203, 0), end=(203, 20), line='                    continue\n')
TokenNode(type=32 (CONTINUE), string='continue', start=(203, 20), end=(203, 28), line='                    continue\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(203, 28), end=(203, 29), line='                    continue\n')
TokenNode(type=6 (DEDENT), string='', start=(204, 16), end=(204, 16), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=1 (NAME), string='token', start=(204, 16), end=(204, 21), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=16 (COMMA), string=',', start=(204, 21), end=(204, 22), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=1 (NAME), string='initial', start=(204, 23), end=(204, 30), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=17 (ASSIGN), string='=', start=(204, 31), end=(204, 32), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=1 (NAME), string='line', start=(204, 33), end=(204, 37), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=9 (LSQB), string='[', start=(204, 37), end=(204, 38), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=1 (NAME), string='start', start=(204, 38), end=(204, 43), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=13 (COLON), string=':', start=(204, 43), end=(204, 44), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=1 (NAME), string='end', start=(204, 44), end=(204, 47), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=10 (RSQB), string=']', start=(204, 47), end=(204, 48), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=16 (COMMA), string=',', start=(204, 48), end=(204, 49), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=1 (NAME), string='line', start=(204, 50), end=(204, 54), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=9 (LSQB), string='[', start=(204, 54), end=(204, 55), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=1 (NAME), string='start', start=(204, 55), end=(204, 60), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=10 (RSQB), string=']', start=(204, 60), end=(204, 61), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(204, 61), end=(204, 62), line='                token, initial = line[start:end], line[start]\n')
TokenNode(type=54 (NL), string='\n', start=(205, 0), end=(205, 1), line='\n')
TokenNode(type=23 (COMP), string='if', start=(206, 16), end=(206, 18), line='                if (initial in numchars or                 # ordinary number\n')
TokenNode(type=7 (LPAR), string='(', start=(206, 19), end=(206, 20), line='                if (initial in numchars or                 # ordinary number\n')
TokenNode(type=1 (NAME), string='initial', start=(206, 20), end=(206, 27), line='                if (initial in numchars or                 # ordinary number\n')
TokenNode(type=1 (NAME), string='in', start=(206, 28), end=(206, 30), line='                if (initial in numchars or                 # ordinary number\n')
TokenNode(type=1 (NAME), string='numchars', start=(206, 31), end=(206, 39), line='                if (initial in numchars or                 # ordinary number\n')
TokenNode(type=43 (OR), string='or', start=(206, 40), end=(206, 42), line='                if (initial in numchars or                 # ordinary number\n')
TokenNode(type=53 (COMMENT), string='# ordinary number', start=(206, 59), end=(206, 76), line='                if (initial in numchars or                 # ordinary number\n')
TokenNode(type=54 (NL), string='\n', start=(206, 76), end=(206, 77), line='                if (initial in numchars or                 # ordinary number\n')
TokenNode(type=7 (LPAR), string='(', start=(207, 20), end=(207, 21), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=1 (NAME), string='initial', start=(207, 21), end=(207, 28), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=17 (ASSIGN), string='==', start=(207, 29), end=(207, 31), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=3 (STRING), string="'.'", start=(207, 32), end=(207, 35), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=25 (AND), string='and', start=(207, 36), end=(207, 39), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=1 (NAME), string='token', start=(207, 40), end=(207, 45), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=18 (OP), string='!=', start=(207, 46), end=(207, 48), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=3 (STRING), string="'.'", start=(207, 49), end=(207, 52), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=25 (AND), string='and', start=(207, 53), end=(207, 56), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=1 (NAME), string='token', start=(207, 57), end=(207, 62), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=18 (OP), string='!=', start=(207, 63), end=(207, 65), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=3 (STRING), string="'...'", start=(207, 66), end=(207, 71), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=8 (RPAR), string=')', start=(207, 71), end=(207, 72), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=8 (RPAR), string=')', start=(207, 72), end=(207, 73), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=13 (COLON), string=':', start=(207, 73), end=(207, 74), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(207, 74), end=(207, 75), line="                    (initial == '.' and token != '.' and token != '...')):\n")
TokenNode(type=5 (INDENT), string='                    ', start=(208, 0), end=(208, 20), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=24 (RETURN), string='yield', start=(208, 20), end=(208, 25), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(208, 26), end=(208, 35), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=7 (LPAR), string='(', start=(208, 35), end=(208, 36), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='NUMBER', start=(208, 36), end=(208, 42), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(208, 42), end=(208, 43), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='token', start=(208, 44), end=(208, 49), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(208, 49), end=(208, 50), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='spos', start=(208, 51), end=(208, 55), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(208, 55), end=(208, 56), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='epos', start=(208, 57), end=(208, 61), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(208, 61), end=(208, 62), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='line', start=(208, 63), end=(208, 67), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=8 (RPAR), string=')', start=(208, 67), end=(208, 68), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(208, 68), end=(208, 69), line='                    yield TokenNode(NUMBER, token, spos, epos, line)\n')
TokenNode(type=6 (DEDENT), string='', start=(209, 16), end=(209, 16), line="                elif initial in '\\r\\n':\n")
TokenNode(type=23 (COMP), string='elif', start=(209, 16), end=(209, 20), line="                elif initial in '\\r\\n':\n")
TokenNode(type=1 (NAME), string='initial', start=(209, 21), end=(209, 28), line="                elif initial in '\\r\\n':\n")
TokenNode(type=1 (NAME), string='in', start=(209, 29), end=(209, 31), line="                elif initial in '\\r\\n':\n")
TokenNode(type=3 (STRING), string="'\\r\\n'", start=(209, 32), end=(209, 38), line="                elif initial in '\\r\\n':\n")
TokenNode(type=13 (COLON), string=':', start=(209, 38), end=(209, 39), line="                elif initial in '\\r\\n':\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(209, 39), end=(209, 40), line="                elif initial in '\\r\\n':\n")
TokenNode(type=5 (INDENT), string='                    ', start=(210, 0), end=(210, 20), line='                    if parenlev > 0:\n')
TokenNode(type=23 (COMP), string='if', start=(210, 20), end=(210, 22), line='                    if parenlev > 0:\n')
TokenNode(type=1 (NAME), string='parenlev', start=(210, 23), end=(210, 31), line='                    if parenlev > 0:\n')
TokenNode(type=19 (LOP), string='>', start=(210, 32), end=(210, 33), line='                    if parenlev > 0:\n')
TokenNode(type=2 (NUMBER), string='0', start=(210, 34), end=(210, 35), line='                    if parenlev > 0:\n')
TokenNode(type=13 (COLON), string=':', start=(210, 35), end=(210, 36), line='                    if parenlev > 0:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(210, 36), end=(210, 37), line='                    if parenlev > 0:\n')
TokenNode(type=5 (INDENT), string='                        ', start=(211, 0), end=(211, 24), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=24 (RETURN), string='yield', start=(211, 24), end=(211, 29), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(211, 30), end=(211, 39), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=7 (LPAR), string='(', start=(211, 39), end=(211, 40), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='NL', start=(211, 40), end=(211, 42), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(211, 42), end=(211, 43), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='token', start=(211, 44), end=(211, 49), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(211, 49), end=(211, 50), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='spos', start=(211, 51), end=(211, 55), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(211, 55), end=(211, 56), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='epos', start=(211, 57), end=(211, 61), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(211, 61), end=(211, 62), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='line', start=(211, 63), end=(211, 67), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=8 (RPAR), string=')', start=(211, 67), end=(211, 68), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(211, 68), end=(211, 69), line='                        yield TokenNode(NL, token, spos, epos, line)\n')
TokenNode(type=6 (DEDENT), string='', start=(212, 20), end=(212, 20), line='                    else:\n')
TokenNode(type=23 (COMP), string='else', start=(212, 20), end=(212, 24), line='                    else:\n')
TokenNode(type=13 (COLON), string=':', start=(212, 24), end=(212, 25), line='                    else:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(212, 25), end=(212, 26), line='                    else:\n')
TokenNode(type=5 (INDENT), string='                        ', start=(213, 0), end=(213, 24), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=24 (RETURN), string='yield', start=(213, 24), end=(213, 29), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(213, 30), end=(213, 39), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=7 (LPAR), string='(', start=(213, 39), end=(213, 40), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='NEWLINE', start=(213, 40), end=(213, 47), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(213, 47), end=(213, 48), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='token', start=(213, 49), end=(213, 54), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(213, 54), end=(213, 55), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='spos', start=(213, 56), end=(213, 60), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(213, 60), end=(213, 61), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='epos', start=(213, 62), end=(213, 66), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(213, 66), end=(213, 67), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='line', start=(213, 68), end=(213, 72), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=8 (RPAR), string=')', start=(213, 72), end=(213, 73), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(213, 73), end=(213, 74), line='                        yield TokenNode(NEWLINE, token, spos, epos, line)\n')
TokenNode(type=54 (NL), string='\n', start=(214, 0), end=(214, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(215, 16), end=(215, 16), line="                elif initial == '#':\n")
TokenNode(type=6 (DEDENT), string='', start=(215, 16), end=(215, 16), line="                elif initial == '#':\n")
TokenNode(type=23 (COMP), string='elif', start=(215, 16), end=(215, 20), line="                elif initial == '#':\n")
TokenNode(type=1 (NAME), string='initial', start=(215, 21), end=(215, 28), line="                elif initial == '#':\n")
TokenNode(type=17 (ASSIGN), string='==', start=(215, 29), end=(215, 31), line="                elif initial == '#':\n")
TokenNode(type=3 (STRING), string="'#'", start=(215, 32), end=(215, 35), line="                elif initial == '#':\n")
TokenNode(type=13 (COLON), string=':', start=(215, 35), end=(215, 36), line="                elif initial == '#':\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(215, 36), end=(215, 37), line="                elif initial == '#':\n")
TokenNode(type=5 (INDENT), string='                    ', start=(216, 0), end=(216, 20), line='                    assert not token.endswith("\\n")\n')
TokenNode(type=27 (ASSERT), string='assert', start=(216, 20), end=(216, 26), line='                    assert not token.endswith("\\n")\n')
TokenNode(type=42 (NOT), string='not', start=(216, 27), end=(216, 30), line='                    assert not token.endswith("\\n")\n')
TokenNode(type=1 (NAME), string='token', start=(216, 31), end=(216, 36), line='                    assert not token.endswith("\\n")\n')
TokenNode(type=15 (DOT), string='.', start=(216, 36), end=(216, 37), line='                    assert not token.endswith("\\n")\n')
TokenNode(type=1 (NAME), string='endswith', start=(216, 37), end=(216, 45), line='                    assert not token.endswith("\\n")\n')
TokenNode(type=7 (LPAR), string='(', start=(216, 45), end=(216, 46), line='                    assert not token.endswith("\\n")\n')
TokenNode(type=3 (STRING), string='"\\n"', start=(216, 46), end=(216, 50), line='                    assert not token.endswith("\\n")\n')
TokenNode(type=8 (RPAR), string=')', start=(216, 50), end=(216, 51), line='                    assert not token.endswith("\\n")\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(216, 51), end=(216, 52), line='                    assert not token.endswith("\\n")\n')
TokenNode(type=24 (RETURN), string='yield', start=(217, 20), end=(217, 25), line='                    yield TokenNode(COMMENT, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(217, 26), end=(217, 35), line='                    yield TokenNode(COMMENT, token, spos, epos, line)\n')
TokenNode(type=7 (LPAR), string='(', start=(217, 35), end=(217, 36), line='                    yield TokenNode(COMMENT, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='COMMENT', start=(217, 36), end=(217, 43), line='                    yield TokenNode(COMMENT, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(217, 43), end=(217, 44), line='                    yield TokenNode(COMMENT, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='token', start=(217, 45), end=(217, 50), line='                    yield TokenNode(COMMENT, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(217, 50), end=(217, 51), line='                    yield TokenNode(COMMENT, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='spos', start=(217, 52), end=(217, 56), line='                    yield TokenNode(COMMENT, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(217, 56), end=(217, 57), line='                    yield TokenNode(COMMENT, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='epos', start=(217, 58), end=(217, 62), line='                    yield TokenNode(COMMENT, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(217, 62), end=(217, 63), line='                    yield TokenNode(COMMENT, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='line', start=(217, 64), end=(217, 68), line='                    yield TokenNode(COMMENT, token, spos, epos, line)\n')
TokenNode(type=8 (RPAR), string=')', start=(217, 68), end=(217, 69), line='                    yield TokenNode(COMMENT, token, spos, epos, line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(217, 69), end=(217, 70), line='                    yield TokenNode(COMMENT, token, spos, epos, line)\n')
TokenNode(type=54 (NL), string='\n', start=(218, 0), end=(218, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(219, 16), end=(219, 16), line='                elif token in triple_quoted:\n')
TokenNode(type=23 (COMP), string='elif', start=(219, 16), end=(219, 20), line='                elif token in triple_quoted:\n')
TokenNode(type=1 (NAME), string='token', start=(219, 21), end=(219, 26), line='                elif token in triple_quoted:\n')
TokenNode(type=1 (NAME), string='in', start=(219, 27), end=(219, 29), line='                elif token in triple_quoted:\n')
TokenNode(type=1 (NAME), string='triple_quoted', start=(219, 30), end=(219, 43), line='                elif token in triple_quoted:\n')
TokenNode(type=13 (COLON), string=':', start=(219, 43), end=(219, 44), line='                elif token in triple_quoted:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(219, 44), end=(219, 45), line='                elif token in triple_quoted:\n')
TokenNode(type=5 (INDENT), string='                    ', start=(220, 0), end=(220, 20), line='                    endprog = _compile(endpats[token])\n')
TokenNode(type=1 (NAME), string='endprog', start=(220, 20), end=(220, 27), line='                    endprog = _compile(endpats[token])\n')
TokenNode(type=17 (ASSIGN), string='=', start=(220, 28), end=(220, 29), line='                    endprog = _compile(endpats[token])\n')
TokenNode(type=1 (NAME), string='_compile', start=(220, 30), end=(220, 38), line='                    endprog = _compile(endpats[token])\n')
TokenNode(type=7 (LPAR), string='(', start=(220, 38), end=(220, 39), line='                    endprog = _compile(endpats[token])\n')
TokenNode(type=1 (NAME), string='endpats', start=(220, 39), end=(220, 46), line='                    endprog = _compile(endpats[token])\n')
TokenNode(type=9 (LSQB), string='[', start=(220, 46), end=(220, 47), line='                    endprog = _compile(endpats[token])\n')
TokenNode(type=1 (NAME), string='token', start=(220, 47), end=(220, 52), line='                    endprog = _compile(endpats[token])\n')
TokenNode(type=10 (RSQB), string=']', start=(220, 52), end=(220, 53), line='                    endprog = _compile(endpats[token])\n')
TokenNode(type=8 (RPAR), string=')', start=(220, 53), end=(220, 54), line='                    endprog = _compile(endpats[token])\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(220, 54), end=(220, 55), line='                    endprog = _compile(endpats[token])\n')
TokenNode(type=1 (NAME), string='endmatch', start=(221, 20), end=(221, 28), line='                    endmatch = endprog.match(line, pos)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(221, 29), end=(221, 30), line='                    endmatch = endprog.match(line, pos)\n')
TokenNode(type=1 (NAME), string='endprog', start=(221, 31), end=(221, 38), line='                    endmatch = endprog.match(line, pos)\n')
TokenNode(type=15 (DOT), string='.', start=(221, 38), end=(221, 39), line='                    endmatch = endprog.match(line, pos)\n')
TokenNode(type=49 (MATCH), string='match', start=(221, 39), end=(221, 44), line='                    endmatch = endprog.match(line, pos)\n')
TokenNode(type=7 (LPAR), string='(', start=(221, 44), end=(221, 45), line='                    endmatch = endprog.match(line, pos)\n')
TokenNode(type=1 (NAME), string='line', start=(221, 45), end=(221, 49), line='                    endmatch = endprog.match(line, pos)\n')
TokenNode(type=16 (COMMA), string=',', start=(221, 49), end=(221, 50), line='                    endmatch = endprog.match(line, pos)\n')
TokenNode(type=1 (NAME), string='pos', start=(221, 51), end=(221, 54), line='                    endmatch = endprog.match(line, pos)\n')
TokenNode(type=8 (RPAR), string=')', start=(221, 54), end=(221, 55), line='                    endmatch = endprog.match(line, pos)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(221, 55), end=(221, 56), line='                    endmatch = endprog.match(line, pos)\n')
TokenNode(type=23 (COMP), string='if', start=(222, 20), end=(222, 22), line='                    if endmatch:                           # all on one line\n')
TokenNode(type=1 (NAME), string='endmatch', start=(222, 23), end=(222, 31), line='                    if endmatch:                           # all on one line\n')
TokenNode(type=13 (COLON), string=':', start=(222, 31), end=(222, 32), line='                    if endmatch:                           # all on one line\n')
TokenNode(type=53 (COMMENT), string='# all on one line', start=(222, 59), end=(222, 76), line='                    if endmatch:                           # all on one line\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(222, 76), end=(222, 77), line='                    if endmatch:                           # all on one line\n')
TokenNode(type=5 (INDENT), string='                        ', start=(223, 0), end=(223, 24), line='                        pos = endmatch.end(0)\n')
TokenNode(type=1 (NAME), string='pos', start=(223, 24), end=(223, 27), line='                        pos = endmatch.end(0)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(223, 28), end=(223, 29), line='                        pos = endmatch.end(0)\n')
TokenNode(type=1 (NAME), string='endmatch', start=(223, 30), end=(223, 38), line='                        pos = endmatch.end(0)\n')
TokenNode(type=15 (DOT), string='.', start=(223, 38), end=(223, 39), line='                        pos = endmatch.end(0)\n')
TokenNode(type=1 (NAME), string='end', start=(223, 39), end=(223, 42), line='                        pos = endmatch.end(0)\n')
TokenNode(type=7 (LPAR), string='(', start=(223, 42), end=(223, 43), line='                        pos = endmatch.end(0)\n')
TokenNode(type=2 (NUMBER), string='0', start=(223, 43), end=(223, 44), line='                        pos = endmatch.end(0)\n')
TokenNode(type=8 (RPAR), string=')', start=(223, 44), end=(223, 45), line='                        pos = endmatch.end(0)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(223, 45), end=(223, 46), line='                        pos = endmatch.end(0)\n')
TokenNode(type=1 (NAME), string='token', start=(224, 24), end=(224, 29), line='                        token = line[start:pos]\n')
TokenNode(type=17 (ASSIGN), string='=', start=(224, 30), end=(224, 31), line='                        token = line[start:pos]\n')
TokenNode(type=1 (NAME), string='line', start=(224, 32), end=(224, 36), line='                        token = line[start:pos]\n')
TokenNode(type=9 (LSQB), string='[', start=(224, 36), end=(224, 37), line='                        token = line[start:pos]\n')
TokenNode(type=1 (NAME), string='start', start=(224, 37), end=(224, 42), line='                        token = line[start:pos]\n')
TokenNode(type=13 (COLON), string=':', start=(224, 42), end=(224, 43), line='                        token = line[start:pos]\n')
TokenNode(type=1 (NAME), string='pos', start=(224, 43), end=(224, 46), line='                        token = line[start:pos]\n')
TokenNode(type=10 (RSQB), string=']', start=(224, 46), end=(224, 47), line='                        token = line[start:pos]\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(224, 47), end=(224, 48), line='                        token = line[start:pos]\n')
TokenNode(type=24 (RETURN), string='yield', start=(225, 24), end=(225, 29), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(225, 30), end=(225, 39), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=7 (LPAR), string='(', start=(225, 39), end=(225, 40), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='STRING', start=(225, 40), end=(225, 46), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(225, 46), end=(225, 47), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='token', start=(225, 48), end=(225, 53), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(225, 53), end=(225, 54), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='spos', start=(225, 55), end=(225, 59), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(225, 59), end=(225, 60), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=7 (LPAR), string='(', start=(225, 61), end=(225, 62), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='lnum', start=(225, 62), end=(225, 66), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(225, 66), end=(225, 67), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='pos', start=(225, 68), end=(225, 71), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(225, 71), end=(225, 72), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(225, 72), end=(225, 73), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=1 (NAME), string='line', start=(225, 74), end=(225, 78), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(225, 78), end=(225, 79), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(225, 79), end=(225, 80), line='                        yield TokenNode(STRING, token, spos, (lnum, pos), line)\n')
TokenNode(type=6 (DEDENT), string='', start=(226, 20), end=(226, 20), line='                    else:\n')
TokenNode(type=23 (COMP), string='else', start=(226, 20), end=(226, 24), line='                    else:\n')
TokenNode(type=13 (COLON), string=':', start=(226, 24), end=(226, 25), line='                    else:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(226, 25), end=(226, 26), line='                    else:\n')
TokenNode(type=5 (INDENT), string='                        ', start=(227, 0), end=(227, 24), line='                        strstart = (lnum, start)           # multiple lines\n')
TokenNode(type=1 (NAME), string='strstart', start=(227, 24), end=(227, 32), line='                        strstart = (lnum, start)           # multiple lines\n')
TokenNode(type=17 (ASSIGN), string='=', start=(227, 33), end=(227, 34), line='                        strstart = (lnum, start)           # multiple lines\n')
TokenNode(type=7 (LPAR), string='(', start=(227, 35), end=(227, 36), line='                        strstart = (lnum, start)           # multiple lines\n')
TokenNode(type=1 (NAME), string='lnum', start=(227, 36), end=(227, 40), line='                        strstart = (lnum, start)           # multiple lines\n')
TokenNode(type=16 (COMMA), string=',', start=(227, 40), end=(227, 41), line='                        strstart = (lnum, start)           # multiple lines\n')
TokenNode(type=1 (NAME), string='start', start=(227, 42), end=(227, 47), line='                        strstart = (lnum, start)           # multiple lines\n')
TokenNode(type=8 (RPAR), string=')', start=(227, 47), end=(227, 48), line='                        strstart = (lnum, start)           # multiple lines\n')
TokenNode(type=53 (COMMENT), string='# multiple lines', start=(227, 59), end=(227, 75), line='                        strstart = (lnum, start)           # multiple lines\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(227, 75), end=(227, 76), line='                        strstart = (lnum, start)           # multiple lines\n')
TokenNode(type=1 (NAME), string='contstr', start=(228, 24), end=(228, 31), line='                        contstr = line[start:]\n')
TokenNode(type=17 (ASSIGN), string='=', start=(228, 32), end=(228, 33), line='                        contstr = line[start:]\n')
TokenNode(type=1 (NAME), string='line', start=(228, 34), end=(228, 38), line='                        contstr = line[start:]\n')
TokenNode(type=9 (LSQB), string='[', start=(228, 38), end=(228, 39), line='                        contstr = line[start:]\n')
TokenNode(type=1 (NAME), string='start', start=(228, 39), end=(228, 44), line='                        contstr = line[start:]\n')
TokenNode(type=13 (COLON), string=':', start=(228, 44), end=(228, 45), line='                        contstr = line[start:]\n')
TokenNode(type=10 (RSQB), string=']', start=(228, 45), end=(228, 46), line='                        contstr = line[start:]\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(228, 46), end=(228, 47), line='                        contstr = line[start:]\n')
TokenNode(type=1 (NAME), string='contline', start=(229, 24), end=(229, 32), line='                        contline = line\n')
TokenNode(type=17 (ASSIGN), string='=', start=(229, 33), end=(229, 34), line='                        contline = line\n')
TokenNode(type=1 (NAME), string='line', start=(229, 35), end=(229, 39), line='                        contline = line\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(229, 39), end=(229, 40), line='                        contline = line\n')
TokenNode(type=30 (BREAK), string='break', start=(230, 24), end=(230, 29), line='                        break\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(230, 29), end=(230, 30), line='                        break\n')
TokenNode(type=54 (NL), string='\n', start=(231, 0), end=(231, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(232, 16), end=(232, 16), line='                elif (initial in single_quoted or\n')
TokenNode(type=6 (DEDENT), string='', start=(232, 16), end=(232, 16), line='                elif (initial in single_quoted or\n')
TokenNode(type=23 (COMP), string='elif', start=(232, 16), end=(232, 20), line='                elif (initial in single_quoted or\n')
TokenNode(type=7 (LPAR), string='(', start=(232, 21), end=(232, 22), line='                elif (initial in single_quoted or\n')
TokenNode(type=1 (NAME), string='initial', start=(232, 22), end=(232, 29), line='                elif (initial in single_quoted or\n')
TokenNode(type=1 (NAME), string='in', start=(232, 30), end=(232, 32), line='                elif (initial in single_quoted or\n')
TokenNode(type=1 (NAME), string='single_quoted', start=(232, 33), end=(232, 46), line='                elif (initial in single_quoted or\n')
TokenNode(type=43 (OR), string='or', start=(232, 47), end=(232, 49), line='                elif (initial in single_quoted or\n')
TokenNode(type=54 (NL), string='\n', start=(232, 49), end=(232, 50), line='                elif (initial in single_quoted or\n')
TokenNode(type=1 (NAME), string='token', start=(233, 20), end=(233, 25), line='                    token[:2] in single_quoted or\n')
TokenNode(type=9 (LSQB), string='[', start=(233, 25), end=(233, 26), line='                    token[:2] in single_quoted or\n')
TokenNode(type=13 (COLON), string=':', start=(233, 26), end=(233, 27), line='                    token[:2] in single_quoted or\n')
TokenNode(type=2 (NUMBER), string='2', start=(233, 27), end=(233, 28), line='                    token[:2] in single_quoted or\n')
TokenNode(type=10 (RSQB), string=']', start=(233, 28), end=(233, 29), line='                    token[:2] in single_quoted or\n')
TokenNode(type=1 (NAME), string='in', start=(233, 30), end=(233, 32), line='                    token[:2] in single_quoted or\n')
TokenNode(type=1 (NAME), string='single_quoted', start=(233, 33), end=(233, 46), line='                    token[:2] in single_quoted or\n')
TokenNode(type=43 (OR), string='or', start=(233, 47), end=(233, 49), line='                    token[:2] in single_quoted or\n')
TokenNode(type=54 (NL), string='\n', start=(233, 49), end=(233, 50), line='                    token[:2] in single_quoted or\n')
TokenNode(type=1 (NAME), string='token', start=(234, 20), end=(234, 25), line='                    token[:3] in single_quoted):\n')
TokenNode(type=9 (LSQB), string='[', start=(234, 25), end=(234, 26), line='                    token[:3] in single_quoted):\n')
TokenNode(type=13 (COLON), string=':', start=(234, 26), end=(234, 27), line='                    token[:3] in single_quoted):\n')
TokenNode(type=2 (NUMBER), string='3', start=(234, 27), end=(234, 28), line='                    token[:3] in single_quoted):\n')
TokenNode(type=10 (RSQB), string=']', start=(234, 28), end=(234, 29), line='                    token[:3] in single_quoted):\n')
TokenNode(type=1 (NAME), string='in', start=(234, 30), end=(234, 32), line='                    token[:3] in single_quoted):\n')
TokenNode(type=1 (NAME), string='single_quoted', start=(234, 33), end=(234, 46), line='                    token[:3] in single_quoted):\n')
TokenNode(type=8 (RPAR), string=')', start=(234, 46), end=(234, 47), line='                    token[:3] in single_quoted):\n')
TokenNode(type=13 (COLON), string=':', start=(234, 47), end=(234, 48), line='                    token[:3] in single_quoted):\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(234, 48), end=(234, 49), line='                    token[:3] in single_quoted):\n')
TokenNode(type=5 (INDENT), string='                    ', start=(235, 0), end=(235, 20), line="                    if token[-1] == '\\n':                  # continued string\n")
TokenNode(type=23 (COMP), string='if', start=(235, 20), end=(235, 22), line="                    if token[-1] == '\\n':                  # continued string\n")
TokenNode(type=1 (NAME), string='token', start=(235, 23), end=(235, 28), line="                    if token[-1] == '\\n':                  # continued string\n")
TokenNode(type=9 (LSQB), string='[', start=(235, 28), end=(235, 29), line="                    if token[-1] == '\\n':                  # continued string\n")
TokenNode(type=18 (OP), string='-', start=(235, 29), end=(235, 30), line="                    if token[-1] == '\\n':                  # continued string\n")
TokenNode(type=2 (NUMBER), string='1', start=(235, 30), end=(235, 31), line="                    if token[-1] == '\\n':                  # continued string\n")
TokenNode(type=10 (RSQB), string=']', start=(235, 31), end=(235, 32), line="                    if token[-1] == '\\n':                  # continued string\n")
TokenNode(type=17 (ASSIGN), string='==', start=(235, 33), end=(235, 35), line="                    if token[-1] == '\\n':                  # continued string\n")
TokenNode(type=3 (STRING), string="'\\n'", start=(235, 36), end=(235, 40), line="                    if token[-1] == '\\n':                  # continued string\n")
TokenNode(type=13 (COLON), string=':', start=(235, 40), end=(235, 41), line="                    if token[-1] == '\\n':                  # continued string\n")
TokenNode(type=53 (COMMENT), string='# continued string', start=(235, 59), end=(235, 77), line="                    if token[-1] == '\\n':                  # continued string\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(235, 77), end=(235, 78), line="                    if token[-1] == '\\n':                  # continued string\n")
TokenNode(type=5 (INDENT), string='                        ', start=(236, 0), end=(236, 24), line='                        strstart = (lnum, start)\n')
TokenNode(type=1 (NAME), string='strstart', start=(236, 24), end=(236, 32), line='                        strstart = (lnum, start)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(236, 33), end=(236, 34), line='                        strstart = (lnum, start)\n')
TokenNode(type=7 (LPAR), string='(', start=(236, 35), end=(236, 36), line='                        strstart = (lnum, start)\n')
TokenNode(type=1 (NAME), string='lnum', start=(236, 36), end=(236, 40), line='                        strstart = (lnum, start)\n')
TokenNode(type=16 (COMMA), string=',', start=(236, 40), end=(236, 41), line='                        strstart = (lnum, start)\n')
TokenNode(type=1 (NAME), string='start', start=(236, 42), end=(236, 47), line='                        strstart = (lnum, start)\n')
TokenNode(type=8 (RPAR), string=')', start=(236, 47), end=(236, 48), line='                        strstart = (lnum, start)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(236, 48), end=(236, 49), line='                        strstart = (lnum, start)\n')
TokenNode(type=1 (NAME), string='endprog', start=(237, 24), end=(237, 31), line='                        endprog = _compile(endpats.get(initial) or\n')
TokenNode(type=17 (ASSIGN), string='=', start=(237, 32), end=(237, 33), line='                        endprog = _compile(endpats.get(initial) or\n')
TokenNode(type=1 (NAME), string='_compile', start=(237, 34), end=(237, 42), line='                        endprog = _compile(endpats.get(initial) or\n')
TokenNode(type=7 (LPAR), string='(', start=(237, 42), end=(237, 43), line='                        endprog = _compile(endpats.get(initial) or\n')
TokenNode(type=1 (NAME), string='endpats', start=(237, 43), end=(237, 50), line='                        endprog = _compile(endpats.get(initial) or\n')
TokenNode(type=15 (DOT), string='.', start=(237, 50), end=(237, 51), line='                        endprog = _compile(endpats.get(initial) or\n')
TokenNode(type=1 (NAME), string='get', start=(237, 51), end=(237, 54), line='                        endprog = _compile(endpats.get(initial) or\n')
TokenNode(type=7 (LPAR), string='(', start=(237, 54), end=(237, 55), line='                        endprog = _compile(endpats.get(initial) or\n')
TokenNode(type=1 (NAME), string='initial', start=(237, 55), end=(237, 62), line='                        endprog = _compile(endpats.get(initial) or\n')
TokenNode(type=8 (RPAR), string=')', start=(237, 62), end=(237, 63), line='                        endprog = _compile(endpats.get(initial) or\n')
TokenNode(type=43 (OR), string='or', start=(237, 64), end=(237, 66), line='                        endprog = _compile(endpats.get(initial) or\n')
TokenNode(type=54 (NL), string='\n', start=(237, 66), end=(237, 67), line='                        endprog = _compile(endpats.get(initial) or\n')
TokenNode(type=1 (NAME), string='endpats', start=(238, 40), end=(238, 47), line='                                        endpats.get(token[1]) or\n')
TokenNode(type=15 (DOT), string='.', start=(238, 47), end=(238, 48), line='                                        endpats.get(token[1]) or\n')
TokenNode(type=1 (NAME), string='get', start=(238, 48), end=(238, 51), line='                                        endpats.get(token[1]) or\n')
TokenNode(type=7 (LPAR), string='(', start=(238, 51), end=(238, 52), line='                                        endpats.get(token[1]) or\n')
TokenNode(type=1 (NAME), string='token', start=(238, 52), end=(238, 57), line='                                        endpats.get(token[1]) or\n')
TokenNode(type=9 (LSQB), string='[', start=(238, 57), end=(238, 58), line='                                        endpats.get(token[1]) or\n')
TokenNode(type=2 (NUMBER), string='1', start=(238, 58), end=(238, 59), line='                                        endpats.get(token[1]) or\n')
TokenNode(type=10 (RSQB), string=']', start=(238, 59), end=(238, 60), line='                                        endpats.get(token[1]) or\n')
TokenNode(type=8 (RPAR), string=')', start=(238, 60), end=(238, 61), line='                                        endpats.get(token[1]) or\n')
TokenNode(type=43 (OR), string='or', start=(238, 62), end=(238, 64), line='                                        endpats.get(token[1]) or\n')
TokenNode(type=54 (NL), string='\n', start=(238, 64), end=(238, 65), line='                                        endpats.get(token[1]) or\n')
TokenNode(type=1 (NAME), string='endpats', start=(239, 40), end=(239, 47), line='                                        endpats.get(token[2]))\n')
TokenNode(type=15 (DOT), string='.', start=(239, 47), end=(239, 48), line='                                        endpats.get(token[2]))\n')
TokenNode(type=1 (NAME), string='get', start=(239, 48), end=(239, 51), line='                                        endpats.get(token[2]))\n')
TokenNode(type=7 (LPAR), string='(', start=(239, 51), end=(239, 52), line='                                        endpats.get(token[2]))\n')
TokenNode(type=1 (NAME), string='token', start=(239, 52), end=(239, 57), line='                                        endpats.get(token[2]))\n')
TokenNode(type=9 (LSQB), string='[', start=(239, 57), end=(239, 58), line='                                        endpats.get(token[2]))\n')
TokenNode(type=2 (NUMBER), string='2', start=(239, 58), end=(239, 59), line='                                        endpats.get(token[2]))\n')
TokenNode(type=10 (RSQB), string=']', start=(239, 59), end=(239, 60), line='                                        endpats.get(token[2]))\n')
TokenNode(type=8 (RPAR), string=')', start=(239, 60), end=(239, 61), line='                                        endpats.get(token[2]))\n')
TokenNode(type=8 (RPAR), string=')', start=(239, 61), end=(239, 62), line='                                        endpats.get(token[2]))\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(239, 62), end=(239, 63), line='                                        endpats.get(token[2]))\n')
TokenNode(type=1 (NAME), string='contstr', start=(240, 24), end=(240, 31), line='                        contstr, needcont = line[start:], 1\n')
TokenNode(type=16 (COMMA), string=',', start=(240, 31), end=(240, 32), line='                        contstr, needcont = line[start:], 1\n')
TokenNode(type=1 (NAME), string='needcont', start=(240, 33), end=(240, 41), line='                        contstr, needcont = line[start:], 1\n')
TokenNode(type=17 (ASSIGN), string='=', start=(240, 42), end=(240, 43), line='                        contstr, needcont = line[start:], 1\n')
TokenNode(type=1 (NAME), string='line', start=(240, 44), end=(240, 48), line='                        contstr, needcont = line[start:], 1\n')
TokenNode(type=9 (LSQB), string='[', start=(240, 48), end=(240, 49), line='                        contstr, needcont = line[start:], 1\n')
TokenNode(type=1 (NAME), string='start', start=(240, 49), end=(240, 54), line='                        contstr, needcont = line[start:], 1\n')
TokenNode(type=13 (COLON), string=':', start=(240, 54), end=(240, 55), line='                        contstr, needcont = line[start:], 1\n')
TokenNode(type=10 (RSQB), string=']', start=(240, 55), end=(240, 56), line='                        contstr, needcont = line[start:], 1\n')
TokenNode(type=16 (COMMA), string=',', start=(240, 56), end=(240, 57), line='                        contstr, needcont = line[start:], 1\n')
TokenNode(type=2 (NUMBER), string='1', start=(240, 58), end=(240, 59), line='                        contstr, needcont = line[start:], 1\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(240, 59), end=(240, 60), line='                        contstr, needcont = line[start:], 1\n')
TokenNode(type=1 (NAME), string='contline', start=(241, 24), end=(241, 32), line='                        contline = line\n')
TokenNode(type=17 (ASSIGN), string='=', start=(241, 33), end=(241, 34), line='                        contline = line\n')
TokenNode(type=1 (NAME), string='line', start=(241, 35), end=(241, 39), line='                        contline = line\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(241, 39), end=(241, 40), line='                        contline = line\n')
TokenNode(type=30 (BREAK), string='break', start=(242, 24), end=(242, 29), line='                        break\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(242, 29), end=(242, 30), line='                        break\n')
TokenNode(type=6 (DEDENT), string='', start=(243, 20), end=(243, 20), line='                    else:                                  # ordinary string\n')
TokenNode(type=23 (COMP), string='else', start=(243, 20), end=(243, 24), line='                    else:                                  # ordinary string\n')
TokenNode(type=13 (COLON), string=':', start=(243, 24), end=(243, 25), line='                    else:                                  # ordinary string\n')
TokenNode(type=53 (COMMENT), string='# ordinary string', start=(243, 59), end=(243, 76), line='                    else:                                  # ordinary string\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(243, 76), end=(243, 77), line='                    else:                                  # ordinary string\n')
TokenNode(type=5 (INDENT), string='                        ', start=(244, 0), end=(244, 24), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=24 (RETURN), string='yield', start=(244, 24), end=(244, 29), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(244, 30), end=(244, 39), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=7 (LPAR), string='(', start=(244, 39), end=(244, 40), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='STRING', start=(244, 40), end=(244, 46), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(244, 46), end=(244, 47), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='token', start=(244, 48), end=(244, 53), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(244, 53), end=(244, 54), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='spos', start=(244, 55), end=(244, 59), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(244, 59), end=(244, 60), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='epos', start=(244, 61), end=(244, 65), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(244, 65), end=(244, 66), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='line', start=(244, 67), end=(244, 71), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=8 (RPAR), string=')', start=(244, 71), end=(244, 72), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(244, 72), end=(244, 73), line='                        yield TokenNode(STRING, token, spos, epos, line)\n')
TokenNode(type=54 (NL), string='\n', start=(245, 0), end=(245, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(246, 16), end=(246, 16), line='                elif initial.isidentifier():               # ordinary name\n')
TokenNode(type=6 (DEDENT), string='', start=(246, 16), end=(246, 16), line='                elif initial.isidentifier():               # ordinary name\n')
TokenNode(type=23 (COMP), string='elif', start=(246, 16), end=(246, 20), line='                elif initial.isidentifier():               # ordinary name\n')
TokenNode(type=1 (NAME), string='initial', start=(246, 21), end=(246, 28), line='                elif initial.isidentifier():               # ordinary name\n')
TokenNode(type=15 (DOT), string='.', start=(246, 28), end=(246, 29), line='                elif initial.isidentifier():               # ordinary name\n')
TokenNode(type=1 (NAME), string='isidentifier', start=(246, 29), end=(246, 41), line='                elif initial.isidentifier():               # ordinary name\n')
TokenNode(type=7 (LPAR), string='(', start=(246, 41), end=(246, 42), line='                elif initial.isidentifier():               # ordinary name\n')
TokenNode(type=8 (RPAR), string=')', start=(246, 42), end=(246, 43), line='                elif initial.isidentifier():               # ordinary name\n')
TokenNode(type=13 (COLON), string=':', start=(246, 43), end=(246, 44), line='                elif initial.isidentifier():               # ordinary name\n')
TokenNode(type=53 (COMMENT), string='# ordinary name', start=(246, 59), end=(246, 74), line='                elif initial.isidentifier():               # ordinary name\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(246, 74), end=(246, 75), line='                elif initial.isidentifier():               # ordinary name\n')
TokenNode(type=5 (INDENT), string='                    ', start=(247, 0), end=(247, 20), line='                    if token in syntax:\n')
TokenNode(type=23 (COMP), string='if', start=(247, 20), end=(247, 22), line='                    if token in syntax:\n')
TokenNode(type=1 (NAME), string='token', start=(247, 23), end=(247, 28), line='                    if token in syntax:\n')
TokenNode(type=1 (NAME), string='in', start=(247, 29), end=(247, 31), line='                    if token in syntax:\n')
TokenNode(type=1 (NAME), string='syntax', start=(247, 32), end=(247, 38), line='                    if token in syntax:\n')
TokenNode(type=13 (COLON), string=':', start=(247, 38), end=(247, 39), line='                    if token in syntax:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(247, 39), end=(247, 40), line='                    if token in syntax:\n')
TokenNode(type=5 (INDENT), string='                        ', start=(248, 0), end=(248, 24), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=24 (RETURN), string='yield', start=(248, 24), end=(248, 29), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(248, 30), end=(248, 39), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=7 (LPAR), string='(', start=(248, 39), end=(248, 40), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='syntax', start=(248, 40), end=(248, 46), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=9 (LSQB), string='[', start=(248, 46), end=(248, 47), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='token', start=(248, 47), end=(248, 52), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=10 (RSQB), string=']', start=(248, 52), end=(248, 53), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(248, 53), end=(248, 54), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='token', start=(248, 55), end=(248, 60), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(248, 60), end=(248, 61), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='spos', start=(248, 62), end=(248, 66), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(248, 66), end=(248, 67), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='epos', start=(248, 68), end=(248, 72), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(248, 72), end=(248, 73), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='line', start=(248, 74), end=(248, 78), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=8 (RPAR), string=')', start=(248, 78), end=(248, 79), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(248, 79), end=(248, 80), line='                        yield TokenNode(syntax[token], token, spos, epos, line)\n')
TokenNode(type=6 (DEDENT), string='', start=(249, 20), end=(249, 20), line='                    else:\n')
TokenNode(type=23 (COMP), string='else', start=(249, 20), end=(249, 24), line='                    else:\n')
TokenNode(type=13 (COLON), string=':', start=(249, 24), end=(249, 25), line='                    else:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(249, 25), end=(249, 26), line='                    else:\n')
TokenNode(type=5 (INDENT), string='                        ', start=(250, 0), end=(250, 24), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=24 (RETURN), string='yield', start=(250, 24), end=(250, 29), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(250, 30), end=(250, 39), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=7 (LPAR), string='(', start=(250, 39), end=(250, 40), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='NAME', start=(250, 40), end=(250, 44), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(250, 44), end=(250, 45), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='token', start=(250, 46), end=(250, 51), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(250, 51), end=(250, 52), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='spos', start=(250, 53), end=(250, 57), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(250, 57), end=(250, 58), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='epos', start=(250, 59), end=(250, 63), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(250, 63), end=(250, 64), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='line', start=(250, 65), end=(250, 69), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=8 (RPAR), string=')', start=(250, 69), end=(250, 70), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(250, 70), end=(250, 71), line='                        yield TokenNode(NAME, token, spos, epos, line)\n')
TokenNode(type=6 (DEDENT), string='', start=(251, 16), end=(251, 16), line="                elif initial == '\\\\':                      # continued stmt\n")
TokenNode(type=6 (DEDENT), string='', start=(251, 16), end=(251, 16), line="                elif initial == '\\\\':                      # continued stmt\n")
TokenNode(type=23 (COMP), string='elif', start=(251, 16), end=(251, 20), line="                elif initial == '\\\\':                      # continued stmt\n")
TokenNode(type=1 (NAME), string='initial', start=(251, 21), end=(251, 28), line="                elif initial == '\\\\':                      # continued stmt\n")
TokenNode(type=17 (ASSIGN), string='==', start=(251, 29), end=(251, 31), line="                elif initial == '\\\\':                      # continued stmt\n")
TokenNode(type=3 (STRING), string="'\\\\'", start=(251, 32), end=(251, 36), line="                elif initial == '\\\\':                      # continued stmt\n")
TokenNode(type=13 (COLON), string=':', start=(251, 36), end=(251, 37), line="                elif initial == '\\\\':                      # continued stmt\n")
TokenNode(type=53 (COMMENT), string='# continued stmt', start=(251, 59), end=(251, 75), line="                elif initial == '\\\\':                      # continued stmt\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(251, 75), end=(251, 76), line="                elif initial == '\\\\':                      # continued stmt\n")
TokenNode(type=5 (INDENT), string='                    ', start=(252, 0), end=(252, 20), line='                    continued = 1\n')
TokenNode(type=1 (NAME), string='continued', start=(252, 20), end=(252, 29), line='                    continued = 1\n')
TokenNode(type=17 (ASSIGN), string='=', start=(252, 30), end=(252, 31), line='                    continued = 1\n')
TokenNode(type=2 (NUMBER), string='1', start=(252, 32), end=(252, 33), line='                    continued = 1\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(252, 33), end=(252, 34), line='                    continued = 1\n')
TokenNode(type=6 (DEDENT), string='', start=(253, 16), end=(253, 16), line='                else:\n')
TokenNode(type=23 (COMP), string='else', start=(253, 16), end=(253, 20), line='                else:\n')
TokenNode(type=13 (COLON), string=':', start=(253, 20), end=(253, 21), line='                else:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(253, 21), end=(253, 22), line='                else:\n')
TokenNode(type=5 (INDENT), string='                    ', start=(254, 0), end=(254, 20), line="                    if initial in '([{':\n")
TokenNode(type=23 (COMP), string='if', start=(254, 20), end=(254, 22), line="                    if initial in '([{':\n")
TokenNode(type=1 (NAME), string='initial', start=(254, 23), end=(254, 30), line="                    if initial in '([{':\n")
TokenNode(type=1 (NAME), string='in', start=(254, 31), end=(254, 33), line="                    if initial in '([{':\n")
TokenNode(type=3 (STRING), string="'([{'", start=(254, 34), end=(254, 39), line="                    if initial in '([{':\n")
TokenNode(type=13 (COLON), string=':', start=(254, 39), end=(254, 40), line="                    if initial in '([{':\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(254, 40), end=(254, 41), line="                    if initial in '([{':\n")
TokenNode(type=5 (INDENT), string='                        ', start=(255, 0), end=(255, 24), line='                        parenlev += 1\n')
TokenNode(type=1 (NAME), string='parenlev', start=(255, 24), end=(255, 32), line='                        parenlev += 1\n')
TokenNode(type=18 (OP), string='+=', start=(255, 33), end=(255, 35), line='                        parenlev += 1\n')
TokenNode(type=2 (NUMBER), string='1', start=(255, 36), end=(255, 37), line='                        parenlev += 1\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(255, 37), end=(255, 38), line='                        parenlev += 1\n')
TokenNode(type=6 (DEDENT), string='', start=(256, 20), end=(256, 20), line="                    elif initial in ')]}':\n")
TokenNode(type=23 (COMP), string='elif', start=(256, 20), end=(256, 24), line="                    elif initial in ')]}':\n")
TokenNode(type=1 (NAME), string='initial', start=(256, 25), end=(256, 32), line="                    elif initial in ')]}':\n")
TokenNode(type=1 (NAME), string='in', start=(256, 33), end=(256, 35), line="                    elif initial in ')]}':\n")
TokenNode(type=3 (STRING), string="')]}'", start=(256, 36), end=(256, 41), line="                    elif initial in ')]}':\n")
TokenNode(type=13 (COLON), string=':', start=(256, 41), end=(256, 42), line="                    elif initial in ')]}':\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(256, 42), end=(256, 43), line="                    elif initial in ')]}':\n")
TokenNode(type=5 (INDENT), string='                        ', start=(257, 0), end=(257, 24), line='                        parenlev -= 1\n')
TokenNode(type=1 (NAME), string='parenlev', start=(257, 24), end=(257, 32), line='                        parenlev -= 1\n')
TokenNode(type=18 (OP), string='-=', start=(257, 33), end=(257, 35), line='                        parenlev -= 1\n')
TokenNode(type=2 (NUMBER), string='1', start=(257, 36), end=(257, 37), line='                        parenlev -= 1\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(257, 37), end=(257, 38), line='                        parenlev -= 1\n')
TokenNode(type=6 (DEDENT), string='', start=(258, 20), end=(258, 20), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=24 (RETURN), string='yield', start=(258, 20), end=(258, 25), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(258, 26), end=(258, 35), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=7 (LPAR), string='(', start=(258, 35), end=(258, 36), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='symbols', start=(258, 36), end=(258, 43), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=9 (LSQB), string='[', start=(258, 43), end=(258, 44), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='initial', start=(258, 44), end=(258, 51), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=10 (RSQB), string=']', start=(258, 51), end=(258, 52), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(258, 52), end=(258, 53), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='token', start=(258, 54), end=(258, 59), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(258, 59), end=(258, 60), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='spos', start=(258, 61), end=(258, 65), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(258, 65), end=(258, 66), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='epos', start=(258, 67), end=(258, 71), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=16 (COMMA), string=',', start=(258, 71), end=(258, 72), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=1 (NAME), string='line', start=(258, 73), end=(258, 77), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=8 (RPAR), string=')', start=(258, 77), end=(258, 78), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(258, 78), end=(258, 79), line='                    yield TokenNode(symbols[initial], token, spos, epos, line)\n')
TokenNode(type=6 (DEDENT), string='', start=(259, 12), end=(259, 12), line='            else:\n')
TokenNode(type=6 (DEDENT), string='', start=(259, 12), end=(259, 12), line='            else:\n')
TokenNode(type=23 (COMP), string='else', start=(259, 12), end=(259, 16), line='            else:\n')
TokenNode(type=13 (COLON), string=':', start=(259, 16), end=(259, 17), line='            else:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(259, 17), end=(259, 18), line='            else:\n')
TokenNode(type=5 (INDENT), string='                ', start=(260, 0), end=(260, 16), line='                yield TokenNode(ERRORTOKEN, line[pos],\n')
TokenNode(type=24 (RETURN), string='yield', start=(260, 16), end=(260, 21), line='                yield TokenNode(ERRORTOKEN, line[pos],\n')
TokenNode(type=1 (NAME), string='TokenNode', start=(260, 22), end=(260, 31), line='                yield TokenNode(ERRORTOKEN, line[pos],\n')
TokenNode(type=7 (LPAR), string='(', start=(260, 31), end=(260, 32), line='                yield TokenNode(ERRORTOKEN, line[pos],\n')
TokenNode(type=1 (NAME), string='ERRORTOKEN', start=(260, 32), end=(260, 42), line='                yield TokenNode(ERRORTOKEN, line[pos],\n')
TokenNode(type=16 (COMMA), string=',', start=(260, 42), end=(260, 43), line='                yield TokenNode(ERRORTOKEN, line[pos],\n')
TokenNode(type=1 (NAME), string='line', start=(260, 44), end=(260, 48), line='                yield TokenNode(ERRORTOKEN, line[pos],\n')
TokenNode(type=9 (LSQB), string='[', start=(260, 48), end=(260, 49), line='                yield TokenNode(ERRORTOKEN, line[pos],\n')
TokenNode(type=1 (NAME), string='pos', start=(260, 49), end=(260, 52), line='                yield TokenNode(ERRORTOKEN, line[pos],\n')
TokenNode(type=10 (RSQB), string=']', start=(260, 52), end=(260, 53), line='                yield TokenNode(ERRORTOKEN, line[pos],\n')
TokenNode(type=16 (COMMA), string=',', start=(260, 53), end=(260, 54), line='                yield TokenNode(ERRORTOKEN, line[pos],\n')
TokenNode(type=54 (NL), string='\n', start=(260, 54), end=(260, 55), line='                yield TokenNode(ERRORTOKEN, line[pos],\n')
TokenNode(type=7 (LPAR), string='(', start=(261, 24), end=(261, 25), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=1 (NAME), string='lnum', start=(261, 25), end=(261, 29), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(261, 29), end=(261, 30), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=1 (NAME), string='pos', start=(261, 31), end=(261, 34), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(261, 34), end=(261, 35), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(261, 35), end=(261, 36), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=7 (LPAR), string='(', start=(261, 37), end=(261, 38), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=1 (NAME), string='lnum', start=(261, 38), end=(261, 42), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(261, 42), end=(261, 43), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=1 (NAME), string='pos', start=(261, 44), end=(261, 47), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=18 (OP), string='+', start=(261, 47), end=(261, 48), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=2 (NUMBER), string='1', start=(261, 48), end=(261, 49), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(261, 49), end=(261, 50), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=16 (COMMA), string=',', start=(261, 50), end=(261, 51), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=1 (NAME), string='line', start=(261, 52), end=(261, 56), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=8 (RPAR), string=')', start=(261, 56), end=(261, 57), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(261, 57), end=(261, 58), line='                        (lnum, pos), (lnum, pos+1), line)\n')
TokenNode(type=1 (NAME), string='pos', start=(262, 16), end=(262, 19), line='                pos += 1\n')
TokenNode(type=18 (OP), string='+=', start=(262, 20), end=(262, 22), line='                pos += 1\n')
TokenNode(type=2 (NUMBER), string='1', start=(262, 23), end=(262, 24), line='                pos += 1\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(262, 24), end=(262, 25), line='                pos += 1\n')
TokenNode(type=54 (NL), string='\n', start=(263, 0), end=(263, 1), line='\n')
TokenNode(type=53 (COMMENT), string="# Add an implicit NEWLINE if the input doesn't end in one", start=(264, 4), end=(264, 61), line="    # Add an implicit NEWLINE if the input doesn't end in one\n")
TokenNode(type=54 (NL), string='\n', start=(264, 61), end=(264, 62), line="    # Add an implicit NEWLINE if the input doesn't end in one\n")
TokenNode(type=6 (DEDENT), string='', start=(265, 4), end=(265, 4), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=6 (DEDENT), string='', start=(265, 4), end=(265, 4), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=6 (DEDENT), string='', start=(265, 4), end=(265, 4), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=23 (COMP), string='if', start=(265, 4), end=(265, 6), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=1 (NAME), string='last_line', start=(265, 7), end=(265, 16), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=25 (AND), string='and', start=(265, 17), end=(265, 20), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=1 (NAME), string='last_line', start=(265, 21), end=(265, 30), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=9 (LSQB), string='[', start=(265, 30), end=(265, 31), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=18 (OP), string='-', start=(265, 31), end=(265, 32), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=2 (NUMBER), string='1', start=(265, 32), end=(265, 33), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=10 (RSQB), string=']', start=(265, 33), end=(265, 34), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=42 (NOT), string='not', start=(265, 35), end=(265, 38), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=1 (NAME), string='in', start=(265, 39), end=(265, 41), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=3 (STRING), string="'\\r\\n'", start=(265, 42), end=(265, 48), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=25 (AND), string='and', start=(265, 49), end=(265, 52), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=42 (NOT), string='not', start=(265, 53), end=(265, 56), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=1 (NAME), string='last_line', start=(265, 57), end=(265, 66), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=15 (DOT), string='.', start=(265, 66), end=(265, 67), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=1 (NAME), string='strip', start=(265, 67), end=(265, 72), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=7 (LPAR), string='(', start=(265, 72), end=(265, 73), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=8 (RPAR), string=')', start=(265, 73), end=(265, 74), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=15 (DOT), string='.', start=(265, 74), end=(265, 75), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=1 (NAME), string='startswith', start=(265, 75), end=(265, 85), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=7 (LPAR), string='(', start=(265, 85), end=(265, 86), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=3 (STRING), string='"#"', start=(265, 86), end=(265, 89), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=8 (RPAR), string=')', start=(265, 89), end=(265, 90), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=13 (COLON), string=':', start=(265, 90), end=(265, 91), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(265, 91), end=(265, 92), line='    if last_line and last_line[-1] not in \'\\r\\n\' and not last_line.strip().startswith("#"):\n')
TokenNode(type=5 (INDENT), string='        ', start=(266, 0), end=(266, 8), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=24 (RETURN), string='yield', start=(266, 8), end=(266, 13), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=1 (NAME), string='TokenNode', start=(266, 14), end=(266, 23), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=7 (LPAR), string='(', start=(266, 23), end=(266, 24), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=1 (NAME), string='NEWLINE', start=(266, 24), end=(266, 31), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(266, 31), end=(266, 32), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=3 (STRING), string="''", start=(266, 33), end=(266, 35), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(266, 35), end=(266, 36), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=7 (LPAR), string='(', start=(266, 37), end=(266, 38), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=1 (NAME), string='lnum', start=(266, 38), end=(266, 42), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=18 (OP), string='-', start=(266, 43), end=(266, 44), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=2 (NUMBER), string='1', start=(266, 45), end=(266, 46), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(266, 46), end=(266, 47), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=1 (NAME), string='len', start=(266, 48), end=(266, 51), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=7 (LPAR), string='(', start=(266, 51), end=(266, 52), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=1 (NAME), string='last_line', start=(266, 52), end=(266, 61), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=8 (RPAR), string=')', start=(266, 61), end=(266, 62), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=8 (RPAR), string=')', start=(266, 62), end=(266, 63), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(266, 63), end=(266, 64), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=7 (LPAR), string='(', start=(266, 65), end=(266, 66), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=1 (NAME), string='lnum', start=(266, 66), end=(266, 70), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=18 (OP), string='-', start=(266, 71), end=(266, 72), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=2 (NUMBER), string='1', start=(266, 73), end=(266, 74), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(266, 74), end=(266, 75), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=1 (NAME), string='len', start=(266, 76), end=(266, 79), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=7 (LPAR), string='(', start=(266, 79), end=(266, 80), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=1 (NAME), string='last_line', start=(266, 80), end=(266, 89), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=8 (RPAR), string=')', start=(266, 89), end=(266, 90), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=18 (OP), string='+', start=(266, 91), end=(266, 92), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=2 (NUMBER), string='1', start=(266, 93), end=(266, 94), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=8 (RPAR), string=')', start=(266, 94), end=(266, 95), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(266, 95), end=(266, 96), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=3 (STRING), string="''", start=(266, 97), end=(266, 99), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=8 (RPAR), string=')', start=(266, 99), end=(266, 100), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(266, 100), end=(266, 101), line="        yield TokenNode(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n")
TokenNode(type=6 (DEDENT), string='', start=(267, 4), end=(267, 4), line='    for indent in indents[1:]:                 # pop remaining indent levels\n')
TokenNode(type=22 (LOOP), string='for', start=(267, 4), end=(267, 7), line='    for indent in indents[1:]:                 # pop remaining indent levels\n')
TokenNode(type=1 (NAME), string='indent', start=(267, 8), end=(267, 14), line='    for indent in indents[1:]:                 # pop remaining indent levels\n')
TokenNode(type=1 (NAME), string='in', start=(267, 15), end=(267, 17), line='    for indent in indents[1:]:                 # pop remaining indent levels\n')
TokenNode(type=1 (NAME), string='indents', start=(267, 18), end=(267, 25), line='    for indent in indents[1:]:                 # pop remaining indent levels\n')
TokenNode(type=9 (LSQB), string='[', start=(267, 25), end=(267, 26), line='    for indent in indents[1:]:                 # pop remaining indent levels\n')
TokenNode(type=2 (NUMBER), string='1', start=(267, 26), end=(267, 27), line='    for indent in indents[1:]:                 # pop remaining indent levels\n')
TokenNode(type=13 (COLON), string=':', start=(267, 27), end=(267, 28), line='    for indent in indents[1:]:                 # pop remaining indent levels\n')
TokenNode(type=10 (RSQB), string=']', start=(267, 28), end=(267, 29), line='    for indent in indents[1:]:                 # pop remaining indent levels\n')
TokenNode(type=13 (COLON), string=':', start=(267, 29), end=(267, 30), line='    for indent in indents[1:]:                 # pop remaining indent levels\n')
TokenNode(type=53 (COMMENT), string='# pop remaining indent levels', start=(267, 47), end=(267, 76), line='    for indent in indents[1:]:                 # pop remaining indent levels\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(267, 76), end=(267, 77), line='    for indent in indents[1:]:                 # pop remaining indent levels\n')
TokenNode(type=5 (INDENT), string='        ', start=(268, 0), end=(268, 8), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=24 (RETURN), string='yield', start=(268, 8), end=(268, 13), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=1 (NAME), string='TokenNode', start=(268, 14), end=(268, 23), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=7 (LPAR), string='(', start=(268, 23), end=(268, 24), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=1 (NAME), string='DEDENT', start=(268, 24), end=(268, 30), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(268, 30), end=(268, 31), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=3 (STRING), string="''", start=(268, 32), end=(268, 34), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(268, 34), end=(268, 35), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=7 (LPAR), string='(', start=(268, 36), end=(268, 37), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=1 (NAME), string='lnum', start=(268, 37), end=(268, 41), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(268, 41), end=(268, 42), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=2 (NUMBER), string='0', start=(268, 43), end=(268, 44), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=8 (RPAR), string=')', start=(268, 44), end=(268, 45), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(268, 45), end=(268, 46), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=7 (LPAR), string='(', start=(268, 47), end=(268, 48), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=1 (NAME), string='lnum', start=(268, 48), end=(268, 52), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(268, 52), end=(268, 53), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=2 (NUMBER), string='0', start=(268, 54), end=(268, 55), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=8 (RPAR), string=')', start=(268, 55), end=(268, 56), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(268, 56), end=(268, 57), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=3 (STRING), string="''", start=(268, 58), end=(268, 60), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=8 (RPAR), string=')', start=(268, 60), end=(268, 61), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(268, 61), end=(268, 62), line="        yield TokenNode(DEDENT, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=6 (DEDENT), string='', start=(269, 4), end=(269, 4), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=24 (RETURN), string='yield', start=(269, 4), end=(269, 9), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=1 (NAME), string='TokenNode', start=(269, 10), end=(269, 19), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=7 (LPAR), string='(', start=(269, 19), end=(269, 20), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=1 (NAME), string='ENDMARKER', start=(269, 20), end=(269, 29), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(269, 29), end=(269, 30), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=3 (STRING), string="''", start=(269, 31), end=(269, 33), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(269, 33), end=(269, 34), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=7 (LPAR), string='(', start=(269, 35), end=(269, 36), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=1 (NAME), string='lnum', start=(269, 36), end=(269, 40), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(269, 40), end=(269, 41), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=2 (NUMBER), string='0', start=(269, 42), end=(269, 43), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=8 (RPAR), string=')', start=(269, 43), end=(269, 44), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(269, 44), end=(269, 45), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=7 (LPAR), string='(', start=(269, 46), end=(269, 47), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=1 (NAME), string='lnum', start=(269, 47), end=(269, 51), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(269, 51), end=(269, 52), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=2 (NUMBER), string='0', start=(269, 53), end=(269, 54), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=8 (RPAR), string=')', start=(269, 54), end=(269, 55), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=16 (COMMA), string=',', start=(269, 55), end=(269, 56), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=3 (STRING), string="''", start=(269, 57), end=(269, 59), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=8 (RPAR), string=')', start=(269, 59), end=(269, 60), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(269, 60), end=(269, 61), line="    yield TokenNode(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n")
TokenNode(type=54 (NL), string='\n', start=(270, 0), end=(270, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(271, 0), end=(271, 0), line='def tokenize(readline):\n')
TokenNode(type=33 (DEF), string='def', start=(271, 0), end=(271, 3), line='def tokenize(readline):\n')
TokenNode(type=1 (NAME), string='tokenize', start=(271, 4), end=(271, 12), line='def tokenize(readline):\n')
TokenNode(type=7 (LPAR), string='(', start=(271, 12), end=(271, 13), line='def tokenize(readline):\n')
TokenNode(type=1 (NAME), string='readline', start=(271, 13), end=(271, 21), line='def tokenize(readline):\n')
TokenNode(type=8 (RPAR), string=')', start=(271, 21), end=(271, 22), line='def tokenize(readline):\n')
TokenNode(type=13 (COLON), string=':', start=(271, 22), end=(271, 23), line='def tokenize(readline):\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(271, 23), end=(271, 24), line='def tokenize(readline):\n')
TokenNode(type=5 (INDENT), string='    ', start=(272, 0), end=(272, 4), line='    return token_generator(readline)\n')
TokenNode(type=24 (RETURN), string='return', start=(272, 4), end=(272, 10), line='    return token_generator(readline)\n')
TokenNode(type=1 (NAME), string='token_generator', start=(272, 11), end=(272, 26), line='    return token_generator(readline)\n')
TokenNode(type=7 (LPAR), string='(', start=(272, 26), end=(272, 27), line='    return token_generator(readline)\n')
TokenNode(type=1 (NAME), string='readline', start=(272, 27), end=(272, 35), line='    return token_generator(readline)\n')
TokenNode(type=8 (RPAR), string=')', start=(272, 35), end=(272, 36), line='    return token_generator(readline)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(272, 36), end=(272, 37), line='    return token_generator(readline)\n')
TokenNode(type=54 (NL), string='\n', start=(273, 0), end=(273, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(274, 0), end=(274, 0), line='def detect_encoding(readline):\n')
TokenNode(type=33 (DEF), string='def', start=(274, 0), end=(274, 3), line='def detect_encoding(readline):\n')
TokenNode(type=1 (NAME), string='detect_encoding', start=(274, 4), end=(274, 19), line='def detect_encoding(readline):\n')
TokenNode(type=7 (LPAR), string='(', start=(274, 19), end=(274, 20), line='def detect_encoding(readline):\n')
TokenNode(type=1 (NAME), string='readline', start=(274, 20), end=(274, 28), line='def detect_encoding(readline):\n')
TokenNode(type=8 (RPAR), string=')', start=(274, 28), end=(274, 29), line='def detect_encoding(readline):\n')
TokenNode(type=13 (COLON), string=':', start=(274, 29), end=(274, 30), line='def detect_encoding(readline):\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(274, 30), end=(274, 31), line='def detect_encoding(readline):\n')
TokenNode(type=5 (INDENT), string='    ', start=(275, 0), end=(275, 4), line="    default = 'utf-8'\n")
TokenNode(type=1 (NAME), string='default', start=(275, 4), end=(275, 11), line="    default = 'utf-8'\n")
TokenNode(type=17 (ASSIGN), string='=', start=(275, 12), end=(275, 13), line="    default = 'utf-8'\n")
TokenNode(type=3 (STRING), string="'utf-8'", start=(275, 14), end=(275, 21), line="    default = 'utf-8'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(275, 21), end=(275, 22), line="    default = 'utf-8'\n")
TokenNode(type=33 (DEF), string='def', start=(276, 4), end=(276, 7), line='    def read():\n')
TokenNode(type=1 (NAME), string='read', start=(276, 8), end=(276, 12), line='    def read():\n')
TokenNode(type=7 (LPAR), string='(', start=(276, 12), end=(276, 13), line='    def read():\n')
TokenNode(type=8 (RPAR), string=')', start=(276, 13), end=(276, 14), line='    def read():\n')
TokenNode(type=13 (COLON), string=':', start=(276, 14), end=(276, 15), line='    def read():\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(276, 15), end=(276, 16), line='    def read():\n')
TokenNode(type=5 (INDENT), string='        ', start=(277, 0), end=(277, 8), line='        try:\n')
TokenNode(type=46 (TRY), string='try', start=(277, 8), end=(277, 11), line='        try:\n')
TokenNode(type=13 (COLON), string=':', start=(277, 11), end=(277, 12), line='        try:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(277, 12), end=(277, 13), line='        try:\n')
TokenNode(type=5 (INDENT), string='            ', start=(278, 0), end=(278, 12), line='            return readline()\n')
TokenNode(type=24 (RETURN), string='return', start=(278, 12), end=(278, 18), line='            return readline()\n')
TokenNode(type=1 (NAME), string='readline', start=(278, 19), end=(278, 27), line='            return readline()\n')
TokenNode(type=7 (LPAR), string='(', start=(278, 27), end=(278, 28), line='            return readline()\n')
TokenNode(type=8 (RPAR), string=')', start=(278, 28), end=(278, 29), line='            return readline()\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(278, 29), end=(278, 30), line='            return readline()\n')
TokenNode(type=6 (DEDENT), string='', start=(279, 8), end=(279, 8), line='        except StopIteration:\n')
TokenNode(type=35 (EXCEPT), string='except', start=(279, 8), end=(279, 14), line='        except StopIteration:\n')
TokenNode(type=1 (NAME), string='StopIteration', start=(279, 15), end=(279, 28), line='        except StopIteration:\n')
TokenNode(type=13 (COLON), string=':', start=(279, 28), end=(279, 29), line='        except StopIteration:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(279, 29), end=(279, 30), line='        except StopIteration:\n')
TokenNode(type=5 (INDENT), string='            ', start=(280, 0), end=(280, 12), line="            return b''\n")
TokenNode(type=24 (RETURN), string='return', start=(280, 12), end=(280, 18), line="            return b''\n")
TokenNode(type=3 (STRING), string="b''", start=(280, 19), end=(280, 22), line="            return b''\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(280, 22), end=(280, 23), line="            return b''\n")
TokenNode(type=54 (NL), string='\n', start=(281, 0), end=(281, 1), line='\n')
TokenNode(type=6 (DEDENT), string='', start=(282, 4), end=(282, 4), line='    line = read()\n')
TokenNode(type=6 (DEDENT), string='', start=(282, 4), end=(282, 4), line='    line = read()\n')
TokenNode(type=1 (NAME), string='line', start=(282, 4), end=(282, 8), line='    line = read()\n')
TokenNode(type=17 (ASSIGN), string='=', start=(282, 9), end=(282, 10), line='    line = read()\n')
TokenNode(type=1 (NAME), string='read', start=(282, 11), end=(282, 15), line='    line = read()\n')
TokenNode(type=7 (LPAR), string='(', start=(282, 15), end=(282, 16), line='    line = read()\n')
TokenNode(type=8 (RPAR), string=')', start=(282, 16), end=(282, 17), line='    line = read()\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(282, 17), end=(282, 18), line='    line = read()\n')
TokenNode(type=23 (COMP), string='if', start=(283, 4), end=(283, 6), line='    if line.startswith(BOM_UTF8):\n')
TokenNode(type=1 (NAME), string='line', start=(283, 7), end=(283, 11), line='    if line.startswith(BOM_UTF8):\n')
TokenNode(type=15 (DOT), string='.', start=(283, 11), end=(283, 12), line='    if line.startswith(BOM_UTF8):\n')
TokenNode(type=1 (NAME), string='startswith', start=(283, 12), end=(283, 22), line='    if line.startswith(BOM_UTF8):\n')
TokenNode(type=7 (LPAR), string='(', start=(283, 22), end=(283, 23), line='    if line.startswith(BOM_UTF8):\n')
TokenNode(type=1 (NAME), string='BOM_UTF8', start=(283, 23), end=(283, 31), line='    if line.startswith(BOM_UTF8):\n')
TokenNode(type=8 (RPAR), string=')', start=(283, 31), end=(283, 32), line='    if line.startswith(BOM_UTF8):\n')
TokenNode(type=13 (COLON), string=':', start=(283, 32), end=(283, 33), line='    if line.startswith(BOM_UTF8):\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(283, 33), end=(283, 34), line='    if line.startswith(BOM_UTF8):\n')
TokenNode(type=5 (INDENT), string='        ', start=(284, 0), end=(284, 8), line='        line = line[3:]\n')
TokenNode(type=1 (NAME), string='line', start=(284, 8), end=(284, 12), line='        line = line[3:]\n')
TokenNode(type=17 (ASSIGN), string='=', start=(284, 13), end=(284, 14), line='        line = line[3:]\n')
TokenNode(type=1 (NAME), string='line', start=(284, 15), end=(284, 19), line='        line = line[3:]\n')
TokenNode(type=9 (LSQB), string='[', start=(284, 19), end=(284, 20), line='        line = line[3:]\n')
TokenNode(type=2 (NUMBER), string='3', start=(284, 20), end=(284, 21), line='        line = line[3:]\n')
TokenNode(type=13 (COLON), string=':', start=(284, 21), end=(284, 22), line='        line = line[3:]\n')
TokenNode(type=10 (RSQB), string=']', start=(284, 22), end=(284, 23), line='        line = line[3:]\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(284, 23), end=(284, 24), line='        line = line[3:]\n')
TokenNode(type=1 (NAME), string='default', start=(285, 8), end=(285, 15), line="        default = 'utf-8-sig'\n")
TokenNode(type=17 (ASSIGN), string='=', start=(285, 16), end=(285, 17), line="        default = 'utf-8-sig'\n")
TokenNode(type=3 (STRING), string="'utf-8-sig'", start=(285, 18), end=(285, 29), line="        default = 'utf-8-sig'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(285, 29), end=(285, 30), line="        default = 'utf-8-sig'\n")
TokenNode(type=6 (DEDENT), string='', start=(286, 4), end=(286, 4), line='    if not line:\n')
TokenNode(type=23 (COMP), string='if', start=(286, 4), end=(286, 6), line='    if not line:\n')
TokenNode(type=42 (NOT), string='not', start=(286, 7), end=(286, 10), line='    if not line:\n')
TokenNode(type=1 (NAME), string='line', start=(286, 11), end=(286, 15), line='    if not line:\n')
TokenNode(type=13 (COLON), string=':', start=(286, 15), end=(286, 16), line='    if not line:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(286, 16), end=(286, 17), line='    if not line:\n')
TokenNode(type=5 (INDENT), string='        ', start=(287, 0), end=(287, 8), line='        return default\n')
TokenNode(type=24 (RETURN), string='return', start=(287, 8), end=(287, 14), line='        return default\n')
TokenNode(type=1 (NAME), string='default', start=(287, 15), end=(287, 22), line='        return default\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(287, 22), end=(287, 23), line='        return default\n')
TokenNode(type=6 (DEDENT), string='', start=(288, 4), end=(288, 4), line='    return default\n')
TokenNode(type=24 (RETURN), string='return', start=(288, 4), end=(288, 10), line='    return default\n')
TokenNode(type=1 (NAME), string='default', start=(288, 11), end=(288, 18), line='    return default\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(288, 18), end=(288, 19), line='    return default\n')
TokenNode(type=54 (NL), string='\n', start=(289, 4), end=(289, 5), line='    \n')
TokenNode(type=6 (DEDENT), string='', start=(290, 0), end=(290, 0), line='def open(filename):\n')
TokenNode(type=33 (DEF), string='def', start=(290, 0), end=(290, 3), line='def open(filename):\n')
TokenNode(type=1 (NAME), string='open', start=(290, 4), end=(290, 8), line='def open(filename):\n')
TokenNode(type=7 (LPAR), string='(', start=(290, 8), end=(290, 9), line='def open(filename):\n')
TokenNode(type=1 (NAME), string='filename', start=(290, 9), end=(290, 17), line='def open(filename):\n')
TokenNode(type=8 (RPAR), string=')', start=(290, 17), end=(290, 18), line='def open(filename):\n')
TokenNode(type=13 (COLON), string=':', start=(290, 18), end=(290, 19), line='def open(filename):\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(290, 19), end=(290, 20), line='def open(filename):\n')
TokenNode(type=5 (INDENT), string='    ', start=(291, 0), end=(291, 4), line="    buffer = _open(filename, 'rb')\n")
TokenNode(type=1 (NAME), string='buffer', start=(291, 4), end=(291, 10), line="    buffer = _open(filename, 'rb')\n")
TokenNode(type=17 (ASSIGN), string='=', start=(291, 11), end=(291, 12), line="    buffer = _open(filename, 'rb')\n")
TokenNode(type=1 (NAME), string='_open', start=(291, 13), end=(291, 18), line="    buffer = _open(filename, 'rb')\n")
TokenNode(type=7 (LPAR), string='(', start=(291, 18), end=(291, 19), line="    buffer = _open(filename, 'rb')\n")
TokenNode(type=1 (NAME), string='filename', start=(291, 19), end=(291, 27), line="    buffer = _open(filename, 'rb')\n")
TokenNode(type=16 (COMMA), string=',', start=(291, 27), end=(291, 28), line="    buffer = _open(filename, 'rb')\n")
TokenNode(type=3 (STRING), string="'rb'", start=(291, 29), end=(291, 33), line="    buffer = _open(filename, 'rb')\n")
TokenNode(type=8 (RPAR), string=')', start=(291, 33), end=(291, 34), line="    buffer = _open(filename, 'rb')\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(291, 34), end=(291, 35), line="    buffer = _open(filename, 'rb')\n")
TokenNode(type=46 (TRY), string='try', start=(292, 4), end=(292, 7), line='    try:\n')
TokenNode(type=13 (COLON), string=':', start=(292, 7), end=(292, 8), line='    try:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(292, 8), end=(292, 9), line='    try:\n')
TokenNode(type=5 (INDENT), string='        ', start=(293, 0), end=(293, 8), line='        encoding = detect_encoding(buffer.readline)\n')
TokenNode(type=1 (NAME), string='encoding', start=(293, 8), end=(293, 16), line='        encoding = detect_encoding(buffer.readline)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(293, 17), end=(293, 18), line='        encoding = detect_encoding(buffer.readline)\n')
TokenNode(type=1 (NAME), string='detect_encoding', start=(293, 19), end=(293, 34), line='        encoding = detect_encoding(buffer.readline)\n')
TokenNode(type=7 (LPAR), string='(', start=(293, 34), end=(293, 35), line='        encoding = detect_encoding(buffer.readline)\n')
TokenNode(type=1 (NAME), string='buffer', start=(293, 35), end=(293, 41), line='        encoding = detect_encoding(buffer.readline)\n')
TokenNode(type=15 (DOT), string='.', start=(293, 41), end=(293, 42), line='        encoding = detect_encoding(buffer.readline)\n')
TokenNode(type=1 (NAME), string='readline', start=(293, 42), end=(293, 50), line='        encoding = detect_encoding(buffer.readline)\n')
TokenNode(type=8 (RPAR), string=')', start=(293, 50), end=(293, 51), line='        encoding = detect_encoding(buffer.readline)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(293, 51), end=(293, 52), line='        encoding = detect_encoding(buffer.readline)\n')
TokenNode(type=1 (NAME), string='buffer', start=(294, 8), end=(294, 14), line='        buffer.seek(0)\n')
TokenNode(type=15 (DOT), string='.', start=(294, 14), end=(294, 15), line='        buffer.seek(0)\n')
TokenNode(type=1 (NAME), string='seek', start=(294, 15), end=(294, 19), line='        buffer.seek(0)\n')
TokenNode(type=7 (LPAR), string='(', start=(294, 19), end=(294, 20), line='        buffer.seek(0)\n')
TokenNode(type=2 (NUMBER), string='0', start=(294, 20), end=(294, 21), line='        buffer.seek(0)\n')
TokenNode(type=8 (RPAR), string=')', start=(294, 21), end=(294, 22), line='        buffer.seek(0)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(294, 22), end=(294, 23), line='        buffer.seek(0)\n')
TokenNode(type=1 (NAME), string='text', start=(295, 8), end=(295, 12), line='        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(295, 13), end=(295, 14), line='        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n')
TokenNode(type=1 (NAME), string='TextIOWrapper', start=(295, 15), end=(295, 28), line='        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n')
TokenNode(type=7 (LPAR), string='(', start=(295, 28), end=(295, 29), line='        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n')
TokenNode(type=1 (NAME), string='buffer', start=(295, 29), end=(295, 35), line='        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n')
TokenNode(type=16 (COMMA), string=',', start=(295, 35), end=(295, 36), line='        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n')
TokenNode(type=1 (NAME), string='encoding', start=(295, 37), end=(295, 45), line='        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n')
TokenNode(type=16 (COMMA), string=',', start=(295, 45), end=(295, 46), line='        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n')
TokenNode(type=1 (NAME), string='line_buffering', start=(295, 47), end=(295, 61), line='        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n')
TokenNode(type=17 (ASSIGN), string='=', start=(295, 61), end=(295, 62), line='        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n')
TokenNode(type=37 (TRUE), string='True', start=(295, 62), end=(295, 66), line='        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n')
TokenNode(type=8 (RPAR), string=')', start=(295, 66), end=(295, 67), line='        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(295, 67), end=(295, 68), line='        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n')
TokenNode(type=1 (NAME), string='text', start=(296, 8), end=(296, 12), line="        text.mode = 'r'\n")
TokenNode(type=15 (DOT), string='.', start=(296, 12), end=(296, 13), line="        text.mode = 'r'\n")
TokenNode(type=1 (NAME), string='mode', start=(296, 13), end=(296, 17), line="        text.mode = 'r'\n")
TokenNode(type=17 (ASSIGN), string='=', start=(296, 18), end=(296, 19), line="        text.mode = 'r'\n")
TokenNode(type=3 (STRING), string="'r'", start=(296, 20), end=(296, 23), line="        text.mode = 'r'\n")
TokenNode(type=4 (NEWLINE), string='\n', start=(296, 23), end=(296, 24), line="        text.mode = 'r'\n")
TokenNode(type=24 (RETURN), string='return', start=(297, 8), end=(297, 14), line='        return text\n')
TokenNode(type=1 (NAME), string='text', start=(297, 15), end=(297, 19), line='        return text\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(297, 19), end=(297, 20), line='        return text\n')
TokenNode(type=6 (DEDENT), string='', start=(298, 4), end=(298, 4), line='    except:\n')
TokenNode(type=35 (EXCEPT), string='except', start=(298, 4), end=(298, 10), line='    except:\n')
TokenNode(type=13 (COLON), string=':', start=(298, 10), end=(298, 11), line='    except:\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(298, 11), end=(298, 12), line='    except:\n')
TokenNode(type=5 (INDENT), string='        ', start=(299, 0), end=(299, 8), line='        buffer.close()\n')
TokenNode(type=1 (NAME), string='buffer', start=(299, 8), end=(299, 14), line='        buffer.close()\n')
TokenNode(type=15 (DOT), string='.', start=(299, 14), end=(299, 15), line='        buffer.close()\n')
TokenNode(type=1 (NAME), string='close', start=(299, 15), end=(299, 20), line='        buffer.close()\n')
TokenNode(type=7 (LPAR), string='(', start=(299, 20), end=(299, 21), line='        buffer.close()\n')
TokenNode(type=8 (RPAR), string=')', start=(299, 21), end=(299, 22), line='        buffer.close()\n')
TokenNode(type=4 (NEWLINE), string='\n', start=(299, 22), end=(299, 23), line='        buffer.close()\n')
TokenNode(type=45 (RAISE), string='raise', start=(300, 8), end=(300, 13), line='        raise    \n')
TokenNode(type=4 (NEWLINE), string='\n', start=(300, 17), end=(300, 18), line='        raise    \n')
TokenNode(type=6 (DEDENT), string='', start=(301, 0), end=(301, 0), line='')
TokenNode(type=6 (DEDENT), string='', start=(301, 0), end=(301, 0), line='')
TokenNode(type=0 (ENDMARKER), string='', start=(301, 0), end=(301, 0), line='')
